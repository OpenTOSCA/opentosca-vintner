tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    shop.component:
        derived_from: tosca.nodes.SoftwareComponent

        properties:
            application_name:
                type: string
                metadata:
                    vintner_ignore: true

            application_image:
                type: string
                default: ghcr.io/opentosca/opentosca-shop-demo@sha256:25ce63b1d399b7d311edc13195abc12d98be859fd32f36f3e96056b32c622b8d

            DB_DIALECT:
                type: string

            DB_NAME:
                type: string

            DB_USERNAME:
                type: string

            DB_PASSWORD:
                type: string

            DB_ADDRESS:
                type: string

            DB_PORT:
                type: integer

            optional_feature:
                type: boolean
                metadata:
                    vintner_name: FEATURE_OPTIONAL

            premium_feature:
                type: boolean
                metadata:
                    vintner_name: FEATURE_PREMIUM

        artifacts:
            # TODO: migrate
            artifact_docker:
                type: tosca.artifacts.File
                file: files/shop.docker.tar.gz

            source_archive:
                type: source.archive
                file: files/shop.source.zip

        requirements:
            - database:
                  capability: tosca.capabilities.Endpoint.Database
                  relationship: tosca.relationships.ConnectsTo

        # TODO: is this part of the template?
        interfaces:
            management:
                type: Management
                operations:
                    configure: /usr/bin/npm ci
                    start: /usr/bin/npm start

    ###################################################
    #
    # Terraform OS
    #
    ###################################################

    shop.component::terraform::os.machine:
        derived_from: shop.component

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            os_ssh_host:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::management_address'}

            artifact_script:
                type: string
                default: {eval: '.artifacts::artifact_script'}

        artifacts:
            artifact_script:
                type: tosca.artifacts.File
                file: files/shop.create.sh

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    tfvars: |
                        ssh_user = "{{ SELF.os_ssh_user }}"
                        ssh_key_file = "{{ SELF.os_ssh_key_file }}"
                        ssh_host = "{{ SELF.os_ssh_host | first }}"

                        application_name = "{{ SELF.application_name }}"
                        application_artifact = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_tar.attributes.file }}"
                        application_script = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_script.attributes.file }}"

                        db_dialect="{{ SELF.DB_DIALECT}}"
                        db_name="{{ SELF.DB_NAME }}"
                        db_username="{{ SELF.DB_USERNAME }}"
                        db_password="{{ SELF.DB_PASSWORD }}"
                        db_address="{{ SELF.DB_ADDRESS | first }}"
                        db_port="{{ SELF.DB_PORT }}"

                        feature_optional="{{ SELF.optional_feature }}"
                        feature_premium="{{ SELF.premium_feature }}"
                    main: |
                        variable "ssh_user" {
                          type = string
                        }

                        variable "ssh_key_file" {
                          type = string
                        }

                        variable "ssh_host" {
                          type = string
                        }

                        variable "application_name" {
                          type = string
                        }

                        variable "application_script" {
                          type = string
                        }

                        variable "application_artifact" {
                          type = string
                        }

                        variable "db_dialect" {
                          type = string
                        }

                        variable "db_name" {
                          type = string
                        }

                        variable "db_username" {
                          type = string
                        }

                        variable "db_password" {
                          type = string
                        }

                        variable "db_address" {
                          type = string
                        }

                        variable "db_port" {
                          type = number
                        }

                        variable "feature_optional" {
                          type        = string
                        }

                        variable "feature_premium" {
                          type        = string
                        }

                        resource "terraform_data" "os" {

                          connection {
                            type        = "ssh"
                            user        = var.ssh_user
                            private_key = file(var.ssh_key_file)
                            host        = var.ssh_host
                          }

                          provisioner "file" {
                            source      = var.application_artifact
                            destination = "/tmp/shop.tar.gz"
                          }

                          provisioner "file" {
                            source      = var.application_script
                            destination = "/tmp/shop.create.sh"
                          }

                          provisioner "remote-exec" {
                            inline = [
                              "sudo bash /tmp/shop.create.sh ${var.application_name} /tmp/shop.tar.gz ${var.db_dialect} ${var.db_name} ${var.db_username} ${var.db_password} ${var.db_address} ${var.db_port} ${var.feature_optional} ${var.feature_premium}",
                            ]
                          }
                        }
