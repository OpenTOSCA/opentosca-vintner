tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    shop.component:
        derived_from: tosca.nodes.SoftwareComponent

        properties:
            application_name:
                type: string
                metadata:
                    vintner_ignore: true

            DB_DIALECT:
                type: string

            DB_NAME:
                type: string

            DB_USERNAME:
                type: string

            DB_PASSWORD:
                type: string

            DB_ADDRESS:
                type: string

            DB_PORT:
                type: integer

            optional_feature:
                type: boolean
                metadata:
                    vintner_name: FEATURE_OPTIONAL

            premium_feature:
                type: boolean
                metadata:
                    vintner_name: FEATURE_PREMIUM

            artifact_tar:
                type: string
                default: {eval: '.artifacts::artifact_tar '}
                metadata:
                    vintner_ignore: true

            artifact_zip:
                type: string
                default: {eval: '.artifacts::artifact_zip '}
                metadata:
                    vintner_ignore: true

            artifact_docker:
                type: string
                default: {eval: '.artifacts::artifact_docker '}
                metadata:
                    vintner_ignore: true

        artifacts:
            artifact_tar:
                type: tosca.artifacts.File
                file: files/shop.source.tar.gz

            artifact_zip:
                type: tosca.artifacts.File
                file: files/shop.source.zip

            artifact_docker:
                type: tosca.artifacts.File
                file: files/shop.docker.tar.gz

        requirements:
            - database:
                  capability: tosca.capabilities.Endpoint.Database
                  relationship: tosca.relationships.ConnectsTo

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    # TODO: not required ...
    shop.component::ansible::kubernetes:
        derived_from: shop.component

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: Create application directory
                                      file:
                                          path: shop
                                          state: directory

                                    - name: Copy deployment artifact
                                      copy:
                                          src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_tar.attributes.file }}"
                                          dest: shop

                                    - name: Extract deployment artifact
                                      shell: |
                                          cd shop
                                          tar -xvf shop.tar.gz

                                    - name: Build Docker Image
                                      shell: |
                                          cd shop
                                          eval $(minikube -p minikube docker-env)
                                          docker build -t shop .

                                    - name: Create file
                                      copy:
                                          dest: shop.yaml
                                          content: |
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: shop
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: shop
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: shop
                                                      spec:
                                                          containers:
                                                              - image: shop
                                                                imagePullPolicy: Never
                                                                name: shop
                                                                env:
                                                                    - name: DB_NAME
                                                                      value: {{ SELF.DB_NAME }}

                                                                    - name: DB_PASSWORD
                                                                      value: {{ SELF.DB_PASSWORD }}

                                                                    - name: DB_USERNAME
                                                                      value: {{ SELF.DB_USERNAME }}

                                                                    - name: DB_ADDRESS
                                                                      value: {{ SELF.DB_ADDRESS }}

                                                                    - name: DB_PORT
                                                                      value: "{{ SELF.DB_PORT }}"

                                                                    - name: DB_DIALECT
                                                                      value: {{ SELF.DB_DIALECT }}

                                                                    - name: FEATURE_OPTIONAL
                                                                      value: "{{ SELF.feature_optional }}"

                                                                    - name: FEATURE_PREMIUM
                                                                      value: "{{ SELF.premium_feature }}"


                                                                ports:
                                                                    - containerPort: 80

                                              ---
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: shop
                                              spec:
                                                  ports:
                                                      - port: 80
                                                  selector:
                                                      app: shop
                                                  type: NodePort

                                    - name: Install shop component
                                      shell: |
                                          kubectl apply -f shop.yaml
                                          kubectl rollout status deployment/shop --timeout 60s

                                    - name: create service
                                      copy:
                                          dest: '/etc/systemd/system/shop.service'
                                          content: |
                                              [Unit]
                                              After=network.target

                                              [Service]
                                              Type=simple
                                              ExecStart=sudo -E kubectl port-forward service/shop 80:80 --address 0.0.0.0
                                              User=ubuntu
                                              Group=ubuntu

                                              [Install]
                                              WantedBy=multi-user.target

                                    - name: start service
                                      systemd:
                                          name: shop
                                          state: started
                                          enabled: yes
                                          daemon_reload: yes

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.ssh_key_file }}
                                - --user={{ SELF.ssh_user }}
                                - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Kubernetes Kubernetes
    #
    ###################################################

    # TODO: inherit from shop.component?
    shop.component::kubernetes::kubernetes:
        derived_from: unfurl.nodes.K8sRawResource

        properties:
            application_name:
                type: string

            DB_DIALECT:
                type: string

            DB_NAME:
                type: string

            DB_USERNAME:
                type: string

            DB_PASSWORD:
                type: string

            DB_ADDRESS:
                type: string

            DB_PORT:
                type: integer

            optional_feature:
                type: boolean

            premium_feature:
                type: boolean

            definition:
                type: any
                default:
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                        name: shop
                        namespace: default
                    spec:
                        selector:
                            matchLabels:
                                app: shop
                        template:
                            metadata:
                                labels:
                                    app: shop
                            spec:
                                containers:
                                    - image: ghcr.io/opentosca/opentosca-shop-demo@sha256:25ce63b1d399b7d311edc13195abc12d98be859fd32f36f3e96056b32c622b8d
                                      name: shop
                                      env:
                                          - name: DB_NAME
                                            value: '{{ SELF.DB_NAME }}'

                                          - name: DB_PASSWORD
                                            value: '{{ SELF.DB_PASSWORD }}'

                                          - name: DB_USERNAME
                                            value: '{{ SELF.DB_USERNAME }}'

                                          - name: DB_ADDRESS
                                            value: '{{ SELF.DB_ADDRESS }}'

                                          - name: DB_PORT
                                            value: '"{{ SELF.DB_PORT }}"'

                                          - name: DB_DIALECT
                                            value: '{{ SELF.DB_DIALECT }}'

                                          - name: FEATURE_OPTIONAL
                                            value: '"{{ SELF.optional_feature }}"'

                                          - name: FEATURE_PREMIUM
                                            value: '"{{ SELF.premium_feature }}"'

                                      ports:
                                          - containerPort: 80

        requirements:
            - database:
                  capability: tosca.capabilities.Endpoint.Database
                  relationship: tosca.relationships.ConnectsTo

    shop.component.expose:
        derived_from: tosca.nodes.Root

    shop.component.expose::kubernetes::kubernetes:
        derived_from: unfurl.nodes.K8sRawResource
        properties:
            definition:
                type: any
                default:
                    apiVersion: v1
                    kind: Service
                    metadata:
                        name: shop
                        namespace: default
                    spec:
                        ports:
                            - port: 80
                              nodePort: 30080
                        selector:
                            app: shop
                        type: NodePort

    ###################################################
    #
    # Ansible OS
    #
    ###################################################

    shop.component::ansible::os.compute:
        derived_from: shop.component

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            application_directory:
                type: string
                default: {concat: ['/var/lib/node-applications/', {get_property: [SELF, application_name]}]}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                        inputs:
                            playbook:
                                q:
                                    - name: Wait for ssh
                                      wait_for_connection:

                                    - name: Install Node.js
                                      shell: |
                                          if [ ! -f /usr/bin/node ]; then
                                              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\
                                              sudo apt-get install -y nodejs
                                          fi
                                      args:
                                          executable: /usr/bin/bash

                                    - name: Create applications directory
                                      file:
                                          path: /var/lib/node-applications/
                                          state: directory

                                    - name: Create application directory
                                      file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory

                                    - name: Extract deployment artifact in application directory
                                      unarchive:
                                          src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_tar.attributes.file }}"
                                          dest: '{{ SELF.application_directory }}'

                                    - name: Install dependencies
                                      shell: /usr/bin/npm ci
                                      args:
                                          chdir: '{{ SELF.application_directory }}'

                                    - name: Create .env file
                                      copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |
                                              PORT=80
                                              INTERFACE="0.0.0.0"
                                              DB_DIALECT={{ SELF.DB_DIALECT }}
                                              DB_NAME={{ SELF.DB_NAME }}
                                              DB_USERNAME={{ SELF.DB_USERNAME }}
                                              DB_PASSWORD={{ SELF.DB_PASSWORD }}
                                              DB_ADDRESS={{ SELF.DB_ADDRESS | first }}
                                              DB_PORT={{ SELF.DB_PORT }}
                                              FEATURE_OPTIONAL={{ SELF.optional_feature }}
                                              FEATURE_PREMIUM={{ SELF.premium_feature }}

                                    - name: Create service
                                      copy:
                                          dest: '/etc/systemd/system/{{ SELF.application_name }}.service'
                                          content: |
                                              [Unit]
                                              After=network.target

                                              [Service]
                                              Type=simple
                                              ExecStart=/usr/bin/npm start
                                              WorkingDirectory={{ SELF.application_directory }}
                                              EnvironmentFile={{ SELF.application_directory }}/.env

                                              [Install]
                                              WantedBy=multi-user.target

                                    - name: Start service
                                      systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: started
                                          enabled: yes
                                          daemon_reload: yes

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                                - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                        inputs:
                            playbook:
                                q:
                                    - name: Wait for ssh
                                      wait_for_connection:

                                    - name: Stop service
                                      systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped

                                    - name: Delete systemd service
                                      file:
                                          path: '/etc/systemd/system/{{ SELF.application_name }}.service'
                                          state: absent

                                    - name: Reload daemon
                                      systemd:
                                          daemon_reload: true

                                    - name: Delete application directory
                                      file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                                - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Terraform OS
    #
    ###################################################

    shop.component::terraform::os:
        derived_from: shop.component

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            os_ssh_host:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::management_address'}

            artifact_script:
                type: string
                default: {eval: '.artifacts::artifact_script'}

        artifacts:
            artifact_script:
                type: tosca.artifacts.File
                file: files/shop.create.sh

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    tfvars: |
                        ssh_user = "{{ SELF.os_ssh_user }}"
                        ssh_key_file = "{{ SELF.os_ssh_key_file }}"
                        ssh_host = "{{ SELF.os_ssh_host | frist }}"

                        application_name = "{{ SELF.application_name }}"
                        application_artifact = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_tar.attributes.file }}"
                        application_script = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_script.attributes.file }}"

                        db_dialect="{{ SELF.DB_DIALECT}}"
                        db_name="{{ SELF.DB_NAME }}"
                        db_username="{{ SELF.DB_USERNAME }}"
                        db_password="{{ SELF.DB_PASSWORD }}"
                        db_address="{{ SELF.DB_ADDRESS | first }}"
                        db_port="{{ SELF.DB_PORT }}"

                        feature_optional="{{ SELF.optional_feature }}"
                        feature_premium="{{ SELF.premium_feature }}"
                    main: |
                        variable "ssh_user" {
                          type = string
                        }

                        variable "ssh_key_file" {
                          type = string
                        }

                        variable "ssh_host" {
                          type = string
                        }

                        variable "application_name" {
                          type = string
                        }

                        variable "application_script" {
                          type = string
                        }

                        variable "application_artifact" {
                          type = string
                        }

                        variable "db_dialect" {
                          type = string
                        }

                        variable "db_name" {
                          type = string
                        }

                        variable "db_username" {
                          type = string
                        }

                        variable "db_password" {
                          type = string
                        }

                        variable "db_address" {
                          type = string
                        }

                        variable "db_port" {
                          type = number
                        }

                        variable "feature_optional" {
                          type        = string
                        }

                        variable "feature_premium" {
                          type        = string
                        }

                        resource "terraform_data" "os" {

                          connection {
                            type        = "ssh"
                            user        = var.ssh_user
                            private_key = file(var.ssh_key_file)
                            host        = var.ssh_host
                          }

                          provisioner "file" {
                            source      = var.application_artifact
                            destination = "/tmp/shop.tar.gz"
                          }

                          provisioner "file" {
                            source      = var.application_script
                            destination = "/tmp/shop.create.sh"
                          }

                          provisioner "remote-exec" {
                            inline = [
                              "sudo bash /tmp/shop.create.sh ${var.application_name} /tmp/shop.tar.gz ${var.db_dialect} ${var.db_name} ${var.db_username} ${var.db_password} ${var.db_address} ${var.db_port} ${var.feature_optional} ${var.feature_premium}",
                            ]
                          }
                        }
