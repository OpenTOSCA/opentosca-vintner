tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    gcp.app_engine:
        derived_from: tosca.nodes.Root
        properties:
            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

        capabilities:
            host:
                type: tosca.capabilities.Compute

    ###################################################
    #
    # Ansible GCP
    #
    ###################################################

    gcp.app_engine::ansible:
        derived_from: gcp.app_engine
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: Activate service account
                                      shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'

                                    # https://cloud.google.com/sql/docs/mysql/connect-instance-cloud-shell
                                    - name: Enable Cloud Build API
                                      shell: |
                                          GCP_SERVICE=cloudbuild.googleapis.com

                                          GCP_SERVICE_ENABLED=$(gcloud services list --filter ${GCP_SERVICE} --format json --enabled | jq length)
                                          if [ ${GCP_SERVICE_ENABLED} = 0 ]; then
                                              gcloud services enable ${GCP_SERVICE}
                                          fi
                                      args:
                                          executable: /usr/bin/bash

                                    - name: Enable appengine.googleapis.com
                                      shell: |
                                          GCP_SERVICE=appengine.googleapis.com

                                          GCP_SERVICE_ENABLED=$(gcloud services list --filter ${GCP_SERVICE} --format json --enabled | jq length)
                                          if [ ${GCP_SERVICE_ENABLED} = 0 ]; then
                                              gcloud services enable ${GCP_SERVICE}
                                          fi
                                      args:
                                          executable: /usr/bin/bash

                                    # https://cloud.google.com/sdk/gcloud/reference/app/create
                                    - name: Create GCP AppEngine
                                      shell: 'gcloud app create --region {{ SELF.gcp_region }}'
                                      register: app_create_command
                                      failed_when:
                                          - "'Created' not in app_create_command.stderr"
                                          - "'already contains' not in app_create_command.stderr"

    ###################################################
    #
    # Terraform OS
    #
    ###################################################

    gcp.app_engine::terraform:
        derived_from: gcp.app_engine
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    tfvars: |
                        project = "{{ SELF.gcp_project }}"
                        region = "{{ SELF.gcp_region }}"
                        credentials = "{{ SELF.gcp_service_account_file }}"
                    main: |
                        terraform {
                           required_providers {
                             google = {
                               source = "hashicorp/google"
                               version = "4.67.0"
                             }
                           }
                         }

                         provider "google" {
                           project = var.project
                           region = var.region
                           credentials = var.credentials
                         }

                         variable "credentials" {
                           type        = string
                         }

                         variable "project" {
                           type        = string
                         }

                         variable "region" {
                           type        = string
                         }

                         resource "google_project_service" "app_engine_reporting" {
                           project  = var.project
                           service = "appenginereporting.googleapis.com"
                           disable_on_destroy = false
                         }

                         resource "google_project_service" "app_engine_admin" {
                           project  = var.project
                           service = "appengine.googleapis.com"
                           disable_on_destroy = false
                         }
