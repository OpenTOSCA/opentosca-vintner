###################################################
#
# WARNING: Do not edit! This file is autogenerated!
#
###################################################

tosca_definitions_version: tosca_simple_yaml_1_3
description: OpenTOSCA Vintner - Normative Base Types (Unfurl)
metadata:
    vintner_orchestrator: unfurl
artifact_types:
    artifact:
        derived_from: tosca.artifacts.Root
    source.archive:
        derived_from: artifact
        description: application packaged as archive
    system.package:
        derived_from: artifact
        properties:
            script:
                type: string
                required: false
                description: URL of an installation script
            repository:
                type: string
                required: false
                description: name of the repository (required if source is set)
            key:
                type: string
                required: false
                description: URL of the apt key which signs the apt repository (required if source is set)
            source:
                type: string
                required: false
                description: source of the repository
            dependencies:
                type: string
                required: false
                description: Comma separated list of apt packages that are additionally installed
            env:
                type: string
                default: ''
                description: Space separated env variables
    container.image:
        derived_from: artifact
        description: expects image reference in "file"
    virtual.machine.image:
        derived_from: artifact
        description: expects image reference in "file"
interface_types:
    interface:
        derived_from: tosca.interfaces.Root
        metadata:
            vintner_normative: 'true'
    management:
        derived_from: interface
        metadata:
            vintner_normative: 'true'
        operations:
            create:
            configure:
            start:
            stop:
            delete:
node_types:
    node:
        derived_from: tosca.nodes.Root
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
    cloud.provider:
        derived_from: node
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        capabilities:
            host:
                type: tosca.capabilities.Compute
    cloud.service:
        derived_from: node
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        capabilities:
            host:
                type: tosca.capabilities.Compute
        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn
    software.application:
        derived_from: node
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            application_name:
                type: string
            _management_create:
                type: string
                metadata:
                    vintner_ignore: 'true'
                default:
                    eval:
                        python: '{{ "project" | get_dir }}/vintner_utils.py#get_operation'
                        args:
                            - management
                            - create
            _management_configure:
                type: string
                metadata:
                    vintner_ignore: 'true'
                default:
                    eval:
                        python: '{{ "project" | get_dir }}/vintner_utils.py#get_operation'
                        args:
                            - management
                            - configure
            _management_start:
                type: string
                metadata:
                    vintner_ignore: 'true'
                default:
                    eval:
                        python: '{{ "project" | get_dir }}/vintner_utils.py#get_operation'
                        args:
                            - management
                            - start
            _management_stop:
                type: string
                metadata:
                    vintner_ignore: 'true'
                default:
                    eval:
                        python: '{{ "project" | get_dir }}/vintner_utils.py#get_operation'
                        args:
                            - management
                            - stop
            _management_delete:
                type: string
                metadata:
                    vintner_ignore: 'true'
                default:
                    eval:
                        python: '{{ "project" | get_dir }}/vintner_utils.py#get_operation'
                        args:
                            - management
                            - delete
        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn
        interfaces:
            management:
                type: management
    service.application:
        derived_from: software.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
            application_port:
                type: string
                metadata:
                    vintner_name: PORT
            application_protocol:
                type: string
        attributes:
            application_address:
                type: string
            application_endpoint:
                type: string
                default:
                    concat:
                        - eval: .::application_protocol
                        - '://'
                        - eval: .::application_address
                        - ':'
                        - eval: .::application_port
    software.runtime:
        derived_from: software.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        capabilities:
            host:
                type: tosca.capabilities.Compute
    container.runtime:
        derived_from: software.runtime
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
    virtual.machine:
        derived_from: node
        metadata:
            vintner_normative: 'true'
        properties:
            machine_name:
                type: string
            ports:
                type: list
                entry_schema:
                    type: string
            flavor:
                type: string
                default: m1.medium
            network:
                type: string
            ssh_user:
                type: string
            ssh_key_name:
                type: string
            ssh_key_file:
                type: string
        attributes:
            management_address:
                type: string
            application_address:
                type: string
                default:
                    eval: .::management_address
        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
    database:
        derived_from: node
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
    relational.database:
        derived_from: database
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
    dbms:
        derived_from: software.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
    relational.dbms:
        derived_from: dbms
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
    ingress:
        derived_from: node
        metadata:
            vintner_normative: 'true'
        properties:
            application_name:
                type: string
                default:
                    eval: .::.requirements::[.name=application]::.target::application_name
            application_port:
                type: string
                default:
                    eval: .::.requirements::[.name=application]::.target::application_port
            application_protocol:
                type: string
                default:
                    eval: .::.requirements::[.name=application]::.target::application_protocol
        attributes:
            application_address:
                type: string
        requirements:
            - application:
                  capability: tosca.capabilities.Endpoint
                  relationship: tosca.relationships.ConnectsTo
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    # [OPENTOSCA_VINTNER_GENERATION_MARK]

    ################################################################
    #
    # WARNING: Do not edit! This following content is autogenerated!
    #
    ################################################################

    virtual.machine~virtual.machine#virtual.machine.image::ansible@openstack.provider:
        derived_from: virtual.machine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_region_name:
                type: string
                default:
                    get_input: os_region_name
            os_auth_type:
                type: string
                default:
                    get_input: os_auth_type
            os_auth_url:
                type: string
                default:
                    get_input: os_auth_url
            os_identity_api_version:
                type: string
                default:
                    get_input: os_identity_api_version
            os_interface:
                type: string
                default:
                    get_input: os_interface
            os_application_credential_id:
                type: string
                default:
                    get_input: os_application_credential_id
            os_application_credential_secret:
                type: string
                default:
                    get_input: os_application_credential_secret
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                OS_AUTH_TYPE:
                                    eval: .::os_auth_type
                                OS_AUTH_URL:
                                    eval: .::os_auth_url
                                OS_IDENTITY_API_VERSION:
                                    eval: .::os_identity_api_version
                                OS_REGION_NAME:
                                    eval: .::os_region_name
                                OS_INTERFACE:
                                    eval: .::os_interface
                                OS_APPLICATION_CREDENTIAL_ID:
                                    eval: .::os_application_credential_id
                                OS_APPLICATION_CREDENTIAL_SECRET:
                                    eval: .::os_application_credential_secret
                        inputs:
                            playbook:
                                q:
                                    - name: Create security group
                                      openstack.cloud.security_group:
                                          name: '{{ SELF.machine_name }}'
                                    - name: Open ports
                                      openstack.cloud.security_group_rule:
                                          security_group: '{{ SELF.machine_name }}'
                                          protocol: tcp
                                          port_range_min: '{{ item }}'
                                          port_range_max: '{{ item }}'
                                          remote_ip_prefix: 0.0.0.0/0
                                          direction: ingress
                                          ethertype: IPv4
                                      loop: '{{ SELF.ports | join("::") | split("::") | map("int") }}'
                                    - name: Create VM
                                      openstack.cloud.server:
                                          state: present
                                          name: '{{ SELF.machine_name }}'
                                          image: '{{  ".artifacts::virtual_machine_image::file" | eval }}'
                                          key_name: default
                                          flavor: '{{ SELF.flavor }}'
                                          network: '{{ SELF.network }}'
                                          security_groups: "{{ 'default,' + SELF.machine_name }}"
                                          auto_ip: false
                                          timeout: 360
                                      register: server_info
                                    - name: Set attributes
                                      set_fact:
                                          management_address: '{{ server_info.server.accessIPv4 }}'
                            resultTemplate: |
                                name: SELF
                                attributes:
                                    management_address: '{{ outputs.management_address | trim }}'
                        outputs:
                            management_address:
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: Delete VM
                                      openstack.cloud.server:
                                          state: absent
                                          name: '{{ SELF.machine_name }}'
                                          delete_fip: true
                                          timeout: 360
                                    - name: Delete security group
                                      openstack.cloud.security_group:
                                          state: absent
                                          name: '{{ SELF.machine_name }}'
    virtual.machine~virtual.machine#virtual.machine.image::terraform@openstack.provider:
        derived_from: virtual.machine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_region_name:
                type: string
                default:
                    get_input: os_region_name
            os_auth_type:
                type: string
                default:
                    get_input: os_auth_type
            os_auth_url:
                type: string
                default:
                    get_input: os_auth_url
            os_identity_api_version:
                type: string
                default:
                    get_input: os_identity_api_version
            os_interface:
                type: string
                default:
                    get_input: os_interface
            os_application_credential_id:
                type: string
                default:
                    get_input: os_application_credential_id
            os_application_credential_secret:
                type: string
                default:
                    get_input: os_application_credential_secret
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    management_address: management_address
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - openstack:
                                        source: terraform-provider-openstack/openstack
                                        version: ~> 1.48.0
                              required_version: '>= 0.14.0'
                        provider:
                            openstack:
                                - application_credential_id: '{{ SELF.os_application_credential_id }}'
                                  application_credential_secret: '{{ SELF.os_application_credential_secret }}'
                                  auth_url: '{{ SELF.os_auth_url }}'
                                  region: '{{ SELF.os_region_name }}'
                        output:
                            management_address:
                                - value: ${yamldecode(openstack_compute_instance_v2.machine.access_ip_v4)}
                        resource:
                            openstack_compute_instance_v2:
                                machine:
                                    - flavor_name: '{{ SELF.flavor }}'
                                      image_name: '{{  ".artifacts::virtual_machine_image::file" | eval }}'
                                      key_pair: default
                                      name: '{{ SELF.machine_name }}'
                                      network:
                                          - name: '{{ SELF.network }}'
                                      security_groups:
                                          - default
                                          - ${openstack_networking_secgroup_v2.ports.name}
                            openstack_networking_secgroup_rule_v2:
                                port:
                                    - direction: ingress
                                      ethertype: IPv4
                                      for_each: ${toset(split("::", "{{ SELF.ports | join("::") }}"))}
                                      port_range_max: ${each.value}
                                      port_range_min: ${each.value}
                                      protocol: tcp
                                      remote_ip_prefix: 0.0.0.0/0
                                      security_group_id: ${openstack_networking_secgroup_v2.ports.id}
                            openstack_networking_secgroup_v2:
                                ports:
                                    - name: '{{ SELF.machine_name }}'
    ingress~ingress::ansible@kubernetes.cluster:
        derived_from: ingress
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default: not implemented
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST:
                                    eval: .::k8s_host
                                K8S_AUTH_SSL_CA_CERT:
                                    eval: .::k8s_ca_cert_file
                                K8S_AUTH_CERT_FILE:
                                    eval: .::k8s_client_cert_file
                                K8S_AUTH_KEY_FILE:
                                    eval: .::k8s_client_key_file
                        inputs:
                            playbook:
                                q:
                                    - name: apply service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}-external'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: 80
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: LoadBalancer
    ingress~ingress::ansible@virtual.machine:
        derived_from: ingress
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::application_address
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install caddy
                                      ansible.builtin.shell: |
                                          apt install -y debian-keyring debian-archive-keyring apt-transport-https curl
                                          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor --yes -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
                                          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
                                          apt-get update
                                          apt-get install caddy -y
                                      args:
                                          executable: /usr/bin/bash
                                    - name: configure caddy
                                      ansible.builtin.copy:
                                          dest: /etc/caddy/Caddyfile
                                          content: |
                                              :80 {
                                                      reverse_proxy localhost:{{ SELF.application_port }}
                                              }
                                    - name: restart caddy
                                      ansible.builtin.shell: systemctl reload caddy
                                      args:
                                          executable: /usr/bin/bash
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    ingress~ingress::terraform@kubernetes.cluster:
        derived_from: ingress
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default: not implemented
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: ${file("{{ SELF.k8s_client_cert_file }}")}
                                  client_key: ${file("{{ SELF.k8s_client_key_file }}")}
                                  cluster_ca_certificate: ${file("{{ SELF.k8s_ca_cert_file }}")}
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}-external'
                                      wait_for_load_balancer: false
                                      spec:
                                          - port:
                                                - name: '{{ SELF.application_protocol }}'
                                                  port: 80
                                                  target_port: '{{ SELF.application_port }}'
                                            selector:
                                                app: '{{ SELF.application_name }}'
                                            type: LoadBalancer
    ingress~ingress::terraform@virtual.machine:
        derived_from: ingress
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::application_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    apt-get install -y debian-keyring debian-archive-keyring apt-transport-https curl
                                                    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor --yes -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
                                                    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
                                                    apt-get update
                                                    apt-get install caddy -y

                                                    echo > /etc/caddy/Caddyfile
                                                    echo ":80 {" >> /etc/caddy/Caddyfile
                                                    echo "        reverse_proxy localhost:{{ SELF.application_port }}" >> /etc/caddy/Caddyfile
                                                    echo "}" >> /etc/caddy/Caddyfile

                                                    systemctl reload caddy
                                                destination: /tmp/install-ingress.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/install-ingress.sh
    ingress~ingress::kubernetes@kubernetes.cluster:
        derived_from: ingress
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default: not implemented
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.ingress.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: '{{ service | to_yaml }}'
                                      vars:
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}-external'
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: LoadBalancer
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
