tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - lib/scenario/types.yaml
    - lib/compute/types.yaml
    - lib/queue/types.yaml

topology_template:
    inputs:
        instance:
            type: string

        compute_vm_network:
            type: string

        compute_vm_security_groups:
            type: string

        compute_vm_key_name:
            type: string

        compute_vm_ssh_user:
            type: string

        compute_vm_ssh_key_file:
            type: string

        os_region_name:
            type: string

        os_auth_type:
            type: string

        os_auth_url:
            type: string

        os_identity_api_version:
            type: string

        os_interface:
            type: string

        os_application_credential_id:
            type: string

        os_application_credential_secret:
            type: string

        compute_raspberry_address:
            type: string
            default: raspberrypi

        compute_raspberry_user_name:
            type: string

        compute_raspberry_ssh_key_file:
            type: string

    node_templates:
        application:
            type: scenario.application
            properties:
                scale: 4
            requirements:
                - input: queue_input
                - output: queue_output
                - host:
                      node: compute_vm
            artifacts:
                binary:
                    type: tosca.artifacts.File
                    file: files/application-linux-x64.xz

        queue_input:
            type: queue.queue

        queue_output:
            type: queue.queue

        compute_vm:
            type: compute.vm
            properties:
                ports: [80, 3000, 3001, 3002, 3003, 3004]
                name: {concat: ['compute-vm-', {get_input: instance}]}
                image: Ubuntu 20.04
                flavor: m1.medium
                network: {get_input: compute_vm_network}
                security_groups: {get_input: compute_vm_security_groups}
                key_name: {get_input: compute_vm_key_name}
                ssh_user: {get_input: compute_vm_ssh_user}
                ssh_key_file: {get_input: compute_vm_ssh_key_file}
            requirements:
                - host:
                      node: compute_hypervisor

        compute_hypervisor:
            type: compute.hypervisor
            properties:
                region_name: {get_input: os_region_name}
                auth_type: {get_input: os_auth_type}
                auth_url: {get_input: os_auth_url}
                identity_api_version: {get_input: os_identity_api_version}
                interface: {get_input: os_interface}
                application_credential_id: {get_input: os_application_credential_id}
                application_credential_secret: {get_input: os_application_credential_secret}
