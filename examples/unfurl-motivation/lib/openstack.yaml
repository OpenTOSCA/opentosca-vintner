tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    openstack.provider:
        derived_from: tosca.nodes.Root
        properties:
            region_name:
                type: string

            auth_type:
                type: string

            auth_url:
                type: string

            identity_api_version:
                type: string

            interface:
                type: string

            application_credential_id:
                type: string

            application_credential_secret:
                type: string

        capabilities:
            host:
                type: tosca.capabilities.Compute
                valid_source_types: [openstack.vm]

        interfaces:
            Standard:
                operations:
                    create: echo 'Nothing to do here'

    openstack.vm:
        derived_from: tosca.nodes.Compute
        properties:
            region_name:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::region_name'}

            auth_type:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::auth_type'}

            auth_url:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::auth_url'}

            identity_api_version:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::identity_api_version'}

            interface:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::interface'}

            application_credential_id:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::application_credential_id'}

            application_credential_secret:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::application_credential_secret'}

            port:
                type: string

            instance_name:
                type: string

            image:
                type: string
                default: Ubuntu 20.04

            flavor:
                type: string
                default: m1.medium

            network:
                type: string

            security_group:
                type: string

            key_name:
                type: string

            ssh_user:
                type: string

            ssh_key_file:
                type: string

        attributes:
            public_address:
                type: string

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        interfaces:
            Standard:
                operations:
                    create:
                        implementation: |
                            set -e

                            export OS_AUTH_TYPE={{ SELF.auth_type }}
                            export OS_AUTH_URL={{ SELF.auth_url }}
                            export OS_IDENTITY_API_VERSION={{ SELF.identity_api_version }}
                            export OS_REGION_NAME={{ SELF.region_name }}
                            export OS_INTERFACE={{ SELF.interface }}
                            export OS_APPLICATION_CREDENTIAL_ID={{ SELF.application_credential_id }}
                            export OS_APPLICATION_CREDENTIAL_SECRET={{ SELF.application_credential_secret }}

                            openstack security group create {{ SELF.instance_name }} >/dev/null
                            openstack security group rule create --protocol tcp --dst-port {{ SELF.port }} --remote-ip 0.0.0.0/0 --ingress --ethertype IPv4 {{ SELF.instance_name }} >/dev/null
                            openstack server create --flavor {{ SELF.flavor }} --image "{{ SELF.image }}" --key-name {{ SELF.key_name }} --security-group {{ SELF.security_group }} --security-group {{ SELF.instance_name }} --wait {{ SELF.instance_name }} >/dev/null
                            sleep 60
                            openstack server show {{ SELF.instance_name }} --format=json
                        inputs:
                            keeplines: true
                            resultTemplate:
                                attributes:
                                    public_address: '{{ (stdout | from_json).addresses[SELF.network][0] }}'

                    delete:
                        implementation: |
                            set -e

                            export OS_AUTH_TYPE={{ SELF.auth_type }}
                            export OS_AUTH_URL={{ SELF.auth_url }}
                            export OS_IDENTITY_API_VERSION={{ SELF.identity_api_version }}
                            export OS_REGION_NAME={{ SELF.region_name }}
                            export OS_INTERFACE={{ SELF.interface }}
                            export OS_APPLICATION_CREDENTIAL_ID={{ SELF.application_credential_id }}
                            export OS_APPLICATION_CREDENTIAL_SECRET={{ SELF.application_credential_secret }}

                            openstack server delete --wait {{ SELF.instance_name }}
                            openstack security group delete {{ SELF.instance_name }}
                        inputs:
                            keeplines: true
