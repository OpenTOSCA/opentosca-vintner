tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    gcp.provider:
        derived_from: tosca.nodes.Root
        properties:
            region:
                type: string
            service_account_file:
                type: string
        capabilities:
            host:
                type: tosca.capabilities.Compute
                valid_source_types: [gcp.sql.dbms, gcp.appengine.engine]

    gcp.sql.dbms:
        derived_from: tosca.nodes.Root
        properties:
            instance_name:
                type: string

            instance_tier:
                type: string
                default: db-f1-micro

            database_version:
                type: string
                default: MYSQL_5_7

            root_password:
                type: string

            region:
                type: string
                default: {get_property: [SELF, host, region]}
                # default: europe-west3

            service_account_file:
                type: string
                default: {get_property: [SELF, host, service_account_file]}

            authorized_networks:
                type: string
                # default: 0.0.0.0/0

        attributes:
            public_address:
                type: string

        capabilities:
            host:
                type: tosca.capabilities.Compute
                valid_source_types: [gcp.sql.db]

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        interfaces:
            Standard:
                inputs:
                    instance_name:
                        type: string
                        value: {get_property: [SELF, instance_name]}

                    instance_tier:
                        type: string
                        value: {get_property: [SELF, instance_tier]}

                    database_version:
                        type: string
                        value: {get_property: [SELF, database_version]}

                    root_password:
                        type: string
                        value: {get_property: [SELF, root_password]}

                    region:
                        type: string
                        value: {get_property: [SELF, region]}

                    service_account_file:
                        type: string
                        value: {get_property: [SELF, service_account_file]}

                    authorized_networks:
                        type: string
                        value: {get_property: [SELF, authorized_networks]}

                operations:
                    create: sql/dbms/playbooks/create.yaml
                    delete: sql/dbms/playbooks/delete.yaml

    gcp.sql.db:
        derived_from: tosca.nodes.Root
        properties:
            database_name:
                type: string

            database_dialect:
                type: string
                default: mysql

            instance_name:
                type: string

            public_address:
                type: string
                default: {get_attribute: [SELF, host, public_address]}

            service_account_file:
                type: string
                default: {get_property: [SELF, host, service_account_file]}

        capabilities:
            database:
                type: tosca.capabilities.Endpoint.Database

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        interfaces:
            Standard:
                inputs:
                    database_name:
                        type: string
                        value: {get_property: [SELF, database_name]}

                    instance_name:
                        type: string
                        value: {get_property: [SELF, instance_name]}

                    service_account_file:
                        type: string
                        value: {get_property: [SELF, service_account_file]}

                operations:
                    create: sql/db/playbooks/create.yaml
                    delete: sql/db/playbooks/delete.yaml

    gcp.appengine.engine:
        derived_from: tosca.nodes.Root
        properties:
            env_type:
                type: string
                default: gcp

            region:
                type: string
                default: {get_property: [SELF, host, region]}

            service_account_file:
                type: string
                default: {get_property: [SELF, host, service_account_file]}

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        interfaces:
            Standard:
                inputs:
                    region:
                        type: string
                        value: {get_property: [SELF, region]}

                    service_account_file:
                        type: string
                        value: {get_property: [SELF, service_account_file]}

                operations:
                    create: appengine/engine/playbooks/create.yaml
