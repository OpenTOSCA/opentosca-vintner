tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - lib/gcp/types.yaml
    - lib/openstack/types.yaml
    - lib/sqlite/types.yaml
    - lib/node/types.yaml

topology_template:
    inputs:
        release:
            type: string
            default: abcdefgh

        gcp_project:
            type: string
            default: europe-west3

        gcp_region:
            type: string
            default: stoetzms-387808

        gcp_service_account_file:
            type: string
            default: /home/milesstoetzner/gcp/stoetzms-387808-2ec1cf865c76.json

        root_password:
            type: string
            default: password

        private_vm_network:
            type: string
            default: public-belwue

        private_vm_security_groups:
            type: string
            default: default

        private_vm_key_name:
            type: string
            default: default

        private_vm_ssh_user:
            type: string
            default: user

        private_vm_ssh_key_file:
            type: string
            default: /home/milesstoetzner/.ssh/bw-cloud--default

        os_region_name:
            type: string
            default: Mannheim

        os_auth_type:
            type: string
            default: v3applicationcredential

        os_auth_url:
            type: string
            default: https://idm02.bw-cloud.org:5000/v3

        os_identity_api_version:
            type: string
            default: '3'

        os_interface:
            type: string
            default: public

        os_application_credential_id:
            type: string
            default: 3f538f1823bd484e8238b2433de2f21a

        os_application_credential_secret:
            type: string

    node_templates:
        web_component:
            type: node.application
            properties:
                application_name: application
                application_environment:
                    DB_DIALECT: {get_property: [SELF, database, database_dialect]}
                    DB_NAME: {get_property: [SELF, database, database_name]}
                    DB_USERNAME: root
                    DB_PASSWORD: {get_input: root_password}
                    DB_ADDRESS: {get_property: [SELF, database, public_address]}
                vm_ssh_user: {get_input: private_vm_ssh_user}
                vm_ssh_key_file: {get_input: private_vm_ssh_key_file}
                gcp_service_account_file: {get_input: gcp_service_account_file}
                gcp_project: {get_input: gcp_project}
                gcp_region: {get_input: gcp_region}
            requirements:
                - host: dev_runtime
                - database: dev_database
            artifacts:
                artifact_file:
                    type: tosca.artifacts.File
                    file: files/application.tar.gz

        dev_runtime:
            type: node.runtime
            requirements:
                - host: private_vm

        dev_database:
            type: sqlite.db
            properties:
                database_name: {concat: [{get_input: release}, '-', db]}
            requirements:
                - host: private_vm

        private_vm:
            type: openstack.vm
            properties:
                ports: [80]
                name: {concat: [{get_input: release}, '-', private-vm]}
                image: Ubuntu 20.04
                flavor: m1.medium
                network: {get_input: private_vm_network}
                security_groups: {get_input: private_vm_security_groups}
                key_name: {get_input: private_vm_key_name}
                ssh_user: {get_input: private_vm_ssh_user}
                ssh_key_file: {get_input: private_vm_ssh_key_file}
            requirements:
                - host: openstack

        openstack:
            type: openstack.provider
            properties:
                region_name: {get_input: os_region_name}
                auth_type: {get_input: os_auth_type}
                auth_url: {get_input: os_auth_url}
                identity_api_version: {get_input: os_identity_api_version}
                interface: {get_input: os_interface}
                application_credential_id: {get_input: os_application_credential_id}
                application_credential_secret: {get_input: os_application_credential_secret}
