tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - ../base.yaml

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    mysql.dbms:
        derived_from: relational.dbms

        properties:
            dbms_name:
                type: string

            dbms_image:
                type: string
                default: mysql:5.6

            dbms_password:
                type: string

        attributes:
            application_address:
                type: string

            application_port:
                type: integer

            management_address:
                type: string

            management_port:
                type: integer

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    ###################################################
    #
    # Ansible GCP
    #
    ###################################################

    # TODO: next: mysql.dbms.ansible.gcp

    mysql.dbms.ansible.gcp:
        derived_from: mysql.dbms

        properties:
            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

        attributes:
            application_port:
                type: string
                default: 3306

            management_address:
                type: string
                default: {eval: '.::application_address'}

            management_port:
                type: integer
                default: {eval: '.::application_port'}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: Activate service account
                                      shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                      args:
                                          executable: /usr/bin/bash

                                    # https://cloud.google.com/sql/docs/mysql/create-instance
                                    # https://cloud.google.com/sdk/gcloud/reference/sql/instances/create
                                    - name: Create Instance
                                      shell: |
                                          gcloud sql instances create {{ SELF.dbms_name }} \
                                              --tier db-f1-micro \
                                              --region {{ SELF.gcp_region }} \
                                              --database-version MYSQL_5_7 \
                                              --authorized-networks "0.0.0.0/0" \
                                              --availability-type REGIONAL \
                                              --backup --enable-bin-log \
                                              --timeout unlimited
                                      args:
                                          executable: /usr/bin/bash

                                    # https://cloud.google.com/sql/docs/mysql/create-instance
                                    - name: Set Root Password
                                      shell: gcloud sql users set-password root --host=% --instance {{ SELF.dbms_name }} --password {{ SELF.dbms_password }}
                                      args:
                                          executable: /usr/bin/bash

                                    # https://cloud.google.com/sdk/gcloud/reference/sql/instances/describe
                                    - name: Get Instance Information
                                      shell: gcloud sql instances describe {{ SELF.dbms_name }} --format=yaml --quiet
                                      register: instance_info
                                      args:
                                          executable: /usr/bin/bash

                                    - name: Set Attributes
                                      set_fact:
                                          application_address: '{{ (instance_info.stdout | from_yaml).ipAddresses[0].ipAddress }}'

                            resultTemplate: |
                                - name: SELF
                                  attributes:
                                    application_address: "{{ outputs.application_address | trim }}"

                        outputs:
                            application_address:

                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: Activate service account
                                      shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'

                                    - name: Delete Instance
                                      shell: 'gcloud sql instances delete {{ SELF.instance_name }} --quiet'

    ###################################################
    #
    # Terraform GCP
    #
    ###################################################

    # TODO: next: test this

    mysql.dbms.terraform.gcp:
        derived_from: mysql.dbms

        properties:
            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

        attributes:
            application_port:
                type: string
                default: 3306

            management_address:
                type: string
                default: {eval: '.::application_address'}

            management_port:
                type: integer
                default: {eval: '.::application_port'}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        output:
                            application_address:
                                - value: ${google_sql_database_instance.dbms.public_ip_address}
                        resource:
                            google_sql_database_instance:
                                dbms:
                                    - database_version: MYSQL_5_7
                                      deletion_protection: false
                                      name: '{{ SELF.dbms_name }}'
                                      root_password: '{{ SELF.dbms_password }}'
                                      settings:
                                          - availability_type: REGIONAL
                                            backup_configuration:
                                                - binary_log_enabled: true
                                                  enabled: true
                                            ip_configuration:
                                                - authorized_networks:
                                                      - name: public
                                                        value: 0.0.0.0/0
                                                  ipv4_enabled: true
                                            tier: db-f1-micro
                            google_sql_user:
                                user:
                                    - host: '%'
                                      instance: ${google_sql_database_instance.dbms.name}
                                      name: root
                                      password: ${google_sql_database_instance.dbms.root_password}

    ###################################################
    #
    # Terraform Kubernetes
    #
    ###################################################

    mysql.dbms.terraform.kubernetes:
        derived_from: mysql.dbms

        properties:
            k8s_host:
                type: string
                default: {get_input: k8s_host}

            k8s_ca_cert_file:
                type: string
                default: {get_input: k8s_ca_cert_file}

            k8s_client_cert_file:
                type: string
                default: {get_input: k8s_client_cert_file}

            k8s_client_key_file:
                type: string
                default: {get_input: k8s_client_key_file}

        attributes:
            application_address:
                type: string
                default: {eval: '.::dbms_name'}

            application_port:
                type: integer
                default: 3306

            management_address:
                type: string
                default: {eval: '.::application_address'}

            management_port:
                type: integer
                default: {eval: '.::application_port'}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: '${file("{{ SELF.k8s_client_cert_file }}")}'
                                  client_key: '${file("{{ SELF.k8s_client_key_file }}")}'
                                  cluster_ca_certificate: '${file("{{ SELF.k8s_ca_cert_file }}")}'
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_deployment_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.dbms_name }}'
                                      spec:
                                          - selector:
                                                - match_labels:
                                                      app: '{{ SELF.dbms_name }}'
                                            template:
                                                - metadata:
                                                      - labels:
                                                            app: '{{ SELF.dbms_name }}'
                                                  spec:
                                                      - container:
                                                            - name: '{{ SELF.dbms_name }}'
                                                              image: '{{ SELF.dbms_image }}'
                                                              env:
                                                                  - name: MYSQL_ROOT_PASSWORD
                                                                    value: '{{ SELF.dbms_password }}'
                                                              port:
                                                                  - container_port: 3306
                                                                    name: mysql
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.dbms_name }}'
                                      spec:
                                          - port:
                                                - name: mysql
                                                  port: 3306
                                                  target_port: 3306
                                            selector:
                                                app: '{{ SELF.dbms_name }}'
                                            type: ClusterIP

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    mysql.dbms.ansible.kubernetes:
        derived_from: mysql.dbms

        properties:
            k8s_host:
                type: string
                default: {get_input: k8s_host}

            k8s_ca_cert_file:
                type: string
                default: {get_input: k8s_ca_cert_file}

            k8s_client_cert_file:
                type: string
                default: {get_input: k8s_client_cert_file}

            k8s_client_key_file:
                type: string
                default: {get_input: k8s_client_key_file}

        attributes:
            application_address:
                type: string
                default: {eval: '.::dbms_name'}

            application_port:
                type: integer
                default: 3306

            management_address:
                type: string
                default: {eval: '.::application_address'}

            management_port:
                type: integer
                default: {eval: '.::application_port'}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST: {eval: '.::k8s_host'}
                                K8S_AUTH_SSL_CA_CERT: {eval: '.::k8s_ca_cert_file'}
                                K8S_AUTH_CERT_FILE: {eval: '.::k8s_client_cert_file'}
                                K8S_AUTH_KEY_FILE: {eval: '.::k8s_client_key_file'}
                        inputs:
                            playbook:
                                q:
                                    - name: create deployment
                                      kubernetes.core.k8s:
                                          wait: true
                                          definition:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.dbms_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.dbms_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ SELF.dbms_image }}'
                                                                name: '{{ SELF.dbms_name }}'
                                                                env:
                                                                    - name: MYSQL_ROOT_PASSWORD
                                                                      value: '{{ SELF.dbms_password }}'
                                                                ports:
                                                                    - containerPort: 3306
                                                                      name: mysql

                                    - name: create service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: mysql
                                                        port: 3306
                                                        targetPort: 3306
                                                  selector:
                                                      app: '{{ SELF.dbms_name }}'
                                                  type: ClusterIP
                    delete: exit 0

    ###################################################
    #
    # Kubernetes Kubernetes
    #
    ###################################################

    mysql.dbms.kubernetes.kubernetes:
        derived_from: mysql.dbms

        attributes:
            application_address:
                type: string
                default: {eval: '.::dbms_name'}

            application_port:
                type: integer
                default: 3306

            management_address:
                type: string
                default: {eval: '.::application_address'}

            management_port:
                type: integer
                default: {eval: '.::application_port'}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.dbms_name }}.dbms.manifest.yaml'

                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: |
                                              {{ deployment | to_yaml }}
                                              ---
                                              {{ service | to_yaml }}
                                      vars:
                                          deployment:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.dbms_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.dbms_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ SELF.dbms_image }}'
                                                                name: '{{ SELF.dbms_name }}'
                                                                env:
                                                                    - name: MYSQL_ROOT_PASSWORD
                                                                      value: '{{ SELF.dbms_password }}'
                                                                ports:
                                                                    - containerPort: 3306
                                                                      name: mysql

                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                              spec:
                                                  ports:
                                                      - name: mysql
                                                        port: 3306
                                                        targetPort: 3306
                                                  selector:
                                                      app: '{{ SELF.dbms_name }}'
                                                  type: ClusterIP

                                    - name: apply manifest
                                      ansible.builtin.shell: |
                                          kubectl apply -f {{ manifest.path }}
                                          kubectl rollout status deployment/{{ SELF.dbms_name }} --timeout 60s
                                      args:
                                          executable: /usr/bin/bash

                                    - name: give DBMS some time
                                      ansible.builtin.pause:
                                          seconds: 10

                    delete: exit 0

    ###################################################
    #
    # Ansible Docker
    #
    ###################################################

    mysql.dbms.ansible.docker:
        derived_from: mysql.dbms

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            application_address:
                type: string
                default: {concat: ['localhost', ':', '{{ SELF.application_port }}']}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: start container
                                      community.docker.docker_container:
                                          name: '{{ SELF.dbms_name }}'
                                          image: '{{ SELF.dbms_image }}'
                                          network_mode: host
                                          env:
                                              MYSQL_ROOT_PASSWORD: '{{ SELF.dbms_password | string }}'

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                    delete: exit 0

    ###################################################
    #
    # Terraform Docker
    #
    ###################################################

    mysql.dbms.terraform.docker:
        derived_from: mysql.dbms

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            os_ssh_host:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::management_address'}

        attributes:
            application_address:
                type: string
                default: '127.0.0.1'

            application_port:
                type: integer
                default: 3306

            management_address:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::management_address'}

            management_port:
                type: integer
                default: 3306

        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host: {eval: '.parent::management_address'}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - docker:
                                        source: kreuzwerker/docker
                                        version: 3.0.2
                        provider:
                            docker:
                                - host: 'ssh://{{ SELF.os_ssh_user }}@{{ SELF.os_ssh_host }}:22'
                                  ssh_opts:
                                      - '-i'
                                      - '{{ SELF.os_ssh_key_file }}'
                                      - '-o'
                                      - 'IdentitiesOnly=yes'
                                      - '-o'
                                      - 'BatchMode=yes'
                                      - '-o'
                                      - 'UserKnownHostsFile=/dev/null'
                                      - '-o'
                                      - 'StrictHostKeyChecking=no'
                        resource:
                            docker_container:
                                application:
                                    - name: '{{ SELF.dbms_name }}'
                                      image: '${docker_image.image.image_id}'
                                      network_mode: host
                                      env:
                                          - 'MYSQL_ROOT_PASSWORD={{ SELF.dbms_password }}'
                            docker_image:
                                image:
                                    - name: '{{ SELF.dbms_image }}'

    ###################################################
    #
    # Docker Docker
    #
    ###################################################

    mysql.dbms.docker.docker:
        derived_from: mysql.dbms

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            application_address:
                type: string
                default: '127.0.0.1'

            application_port:
                type: integer
                default: 3306

            management_address:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::management_address'}

            management_port:
                type: integer
                default: 3306

        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host: {eval: '.parent::management_address'}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.dbms_name }}.compose.yaml'

                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.dbms_name }}'
                                                      image: '{{ SELF.dbms_image }}'
                                                      network_mode: host
                                                      environment:
                                                          MYSQL_ROOT_PASSWORD: '{{ SELF.dbms_password }}'

                                    - name: apply compose
                                      ansible.builtin.shell: |
                                          docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash

                                    - name: give DBMS some time
                                      ansible.builtin.pause:
                                          seconds: 10

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                    delete: exit 0
