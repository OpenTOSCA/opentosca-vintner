# TODO: improve this to exec into container? we assume that dbms is exposed on the docker host
# TODO: add openstack suffix?

tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - ../extended.yaml

node_types:
    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    mysql.database::ansible::mysql.dbms::kubernetes:
        derived_from: mysql.database

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: create database
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }} -- mysql --password={{ HOST.dbms_password }} -e "CREATE DATABASE IF NOT EXISTS {{ SELF.database_name }}";
                                      args:
                                          executable: /usr/bin/bash

                                    - name: create user
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }}  -- mysql --password={{ HOST.dbms_password }} -e "CREATE USER IF NOT EXISTS '{{ SELF.database_user }}'@'%' IDENTIFIED BY '{{ SELF.database_password }}'";
                                      args:
                                          executable: /usr/bin/bash

                                    - name: grant privileges
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }}  -- mysql --password={{ HOST.dbms_password }} -e "GRANT ALL PRIVILEGES ON *.* TO '{{ SELF.database_user }}'@'%'";
                                      args:
                                          executable: /usr/bin/bash

    ###################################################
    #
    # Terraform Kubernetes
    #
    ###################################################

    # TODO:  mysql.database::terraform::mysql.dbms::kubernetes
    mysql.database::terraform::mysql.dbms::kubernetes:
        derived_from: mysql.database

    ###################################################
    #
    # Kubernetes Kubernetes
    #
    ###################################################

    # TODO: some syntax error at create-user

    mysql.database::kubernetes::mysql.dbms::kubernetes:
        derived_from: mysql.database

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.database_name }}-{{ HOST.dbms_name }}.database.manifest.yaml'

                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: '{{ job | to_yaml }}'
                                      vars:
                                          job:
                                              apiVersion: batch/v1
                                              kind: Job
                                              metadata:
                                                  name: '{{ SELF.database_name }}-{{ HOST.dbms_name }}'
                                              spec:
                                                  template:
                                                      spec:
                                                          restartPolicy: Never
                                                          initContainers:
                                                              - name: create-database
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - 'mysql'
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - '-e'
                                                                    - 'CREATE DATABASE IF NOT EXISTS {{ SELF.database_name }}'

                                                              - name: create-user
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - 'mysql'
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - -e
                                                                    - CREATE USER IF NOT EXISTS '{{ SELF.database_user }}'@'%' IDENTIFIED BY '{{ SELF.database_password }}'

                                                              - name: grant-privileges
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - 'mysql'
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - -e
                                                                    - GRANT ALL PRIVILEGES ON *.* TO '{{ SELF.database_user }}'@'%'

                                                          containers:
                                                              - name: none
                                                                image: busybox
                                                                command: ['echo', "'done'"]

                                    - name: apply manifest
                                      ansible.builtin.shell: |
                                          kubectl apply -f {{ manifest.path }}
                                          kubectl wait --for=condition=complete --timeout=30s job/{{ SELF.database_name }}-{{ HOST.dbms_name }}
                                          #kubectl delete -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash

                    delete: exit 0

    ###################################################
    #
    # Ansible GCP
    #
    ###################################################

    mysql.database::ansible::mysql.dbms::gcp.cloudsql:
        derived_from: mysql.database

        properties:
            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE: {eval: '.::gcp_service_account_file'}
                                GCP_AUTH_KIND: 'serviceaccount'
                        inputs:
                            playbook:
                                q:
                                    # https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_sql_database_module.html
                                    - name: create a database
                                      google.cloud.gcp_sql_database:
                                          name: '{{ SELF.database_name }}'
                                          charset: utf8
                                          instance: '{{ HOST.dbms_name }}'
                                          project: '{{ SELF.gcp_project }}'

                                    - name: create user (with privileges)
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: '{{ HOST.management_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: 3306
                                          login_user: root

    ###################################################
    #
    # Terraform GCP
    #
    ###################################################

    mysql.database::terraform::mysql.dbms::gcp.cloudsql:
        derived_from: mysql.database

        properties:
            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                                    mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                            # Could also use GCP CloudSQL connection support, see https://registry.terraform.io/providers/petoju/mysql/latest/docs#gcp-cloudsql-connection
                            mysql:
                                - endpoint: '{{ HOST.management_address }}'
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                        resource:
                            google_sql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                                      instance: '{{ HOST.dbms_name }}'
                            google_sql_user:
                                user:
                                    - host: '%'
                                      instance: '{{ HOST.dbms_name }}'
                                      name: '{{ SELF.database_name }}'
                                      password: '{{ SELF.database_password }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - 'ALL'
                                      user: ${google_sql_user.user.name}

    ###################################################
    #
    # Terraform Docker
    #
    ###################################################

    mysql.database::terraform::mysql.dbms::docker.engine:
        derived_from: mysql.database

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                                    ssh:
                                        source: AndrewChubatiuk/ssh
                                        version: 0.2.3
                        data:
                            ssh_tunnel:
                                mysql:
                                    - remote:
                                          port: 3306
                        provider:
                            mysql:
                                - endpoint: ${data.ssh_tunnel.mysql.local.address}
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                            ssh:
                                - auth:
                                      private_key:
                                          content: '${file(pathexpand("{{ SELF.os_ssh_key_file }}"))}'
                                  server:
                                      host: '{{ HOST.management_address }}'
                                      port: 22
                                  user: '{{ SELF.os_ssh_user }}'
                        resource:
                            mysql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                            mysql_user:
                                user:
                                    - host: '%'
                                      plaintext_password: '{{ SELF.database_password }}'
                                      user: '{{ SELF.database_user }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - 'ALL'
                                      user: ${mysql_user.user.user}

    ###################################################
    #
    # Ansible Docker
    #
    ###################################################

    mysql.database::ansible::mysql.dbms::docker.engine:
        derived_from: mysql.database

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: install pip
                                      apt:
                                          name: python3-pip
                                          state: present

                                    - name: install pymysql
                                      pip:
                                          name: pymysql
                                          state: present

                                    - name: create database
                                      community.mysql.mysql_db:
                                          name: '{{ SELF.database_name }}'
                                          login_host: 127.0.0.1
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: 3306
                                          login_user: root

                                    - name: create user (with privileges)
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: 127.0.0.1
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: 3306
                                          login_user: root

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                    delete: exit 0

    ###################################################
    #
    # Docker Docker
    #
    ###################################################

    # TODO:  mysql.database::docker::mysql.dbms::docker.engine
    mysql.database::docker::mysql.dbms::docker.engine:
        derived_from: mysql.database
