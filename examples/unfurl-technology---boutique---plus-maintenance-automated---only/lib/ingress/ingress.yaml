tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - ../base.yaml

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    ingress:
        derived_from: root

        properties:
            application_name:
                type: string
                default: {eval: '.::.requirements::[.name=application]::.target::application_name'}

            application_port:
                type: string
                default: {eval: '.::.requirements::[.name=application]::.target::application_port'}

            application_protocol:
                type: string
                default: {eval: '.::.requirements::[.name=application]::.target::application_protocol'}

        attributes:
            application_address:
                type: string

        requirements:
            - application:
                  capability: tosca.capabilities.Endpoint
                  relationship: tosca.relationships.ConnectsTo

            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    ###################################################
    #
    # Ansible Openstack
    #
    ###################################################

    ingress::ansible::openstack.machine:
        derived_from: ingress

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            application_address:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::application_address'}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: install caddy
                                      ansible.builtin.shell: |
                                          apt install -y debian-keyring debian-archive-keyring apt-transport-https curl
                                          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor --yes -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
                                          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
                                          apt-get update
                                          apt-get install caddy -y
                                      args:
                                          executable: /usr/bin/bash

                                    - name: configure caddy
                                      ansible.builtin.copy:
                                          dest: /etc/caddy/Caddyfile
                                          content: |
                                              :80 {
                                                      reverse_proxy localhost:{{ SELF.application_port }}
                                              }

                                    - name: restart caddy
                                      ansible.builtin.shell: systemctl reload caddy
                                      args:
                                          executable: /usr/bin/bash

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                    delete: exit 0

    ###################################################
    #
    # Terraform Openstack
    #
    ###################################################

    ingress::terraform::openstack.machine:
        derived_from: ingress

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            os_ssh_host:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::management_address'}

        attributes:
            application_address:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::application_address'}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                os:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    apt-get install -y debian-keyring debian-archive-keyring apt-transport-https curl
                                                    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor --yes -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
                                                    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
                                                    apt-get update
                                                    apt-get install caddy -y

                                                    echo > /etc/caddy/Caddyfile
                                                    echo ":80 {" >> /etc/caddy/Caddyfile
                                                    echo "        reverse_proxy localhost:{{ SELF.application_port }}" >> /etc/caddy/Caddyfile
                                                    echo "}" >> /etc/caddy/Caddyfile

                                                    systemctl reload caddy
                                                destination: /tmp/install-ingress.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/install-ingress.sh

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    ingress::ansible::kubernetes:
        derived_from: ingress

        properties:
            k8s_host:
                type: string
                default: {get_input: k8s_host}

            k8s_ca_cert_file:
                type: string
                default: {get_input: k8s_ca_cert_file}

            k8s_client_cert_file:
                type: string
                default: {get_input: k8s_client_cert_file}

            k8s_client_key_file:
                type: string
                default: {get_input: k8s_client_key_file}

        # TODO: this
        attributes:
            application_address:
                type: string
                default: 'not implemented'

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST: {eval: '.::k8s_host'}
                                K8S_AUTH_SSL_CA_CERT: {eval: '.::k8s_ca_cert_file'}
                                K8S_AUTH_CERT_FILE: {eval: '.::k8s_client_cert_file'}
                                K8S_AUTH_KEY_FILE: {eval: '.::k8s_client_key_file'}
                        inputs:
                            playbook:
                                q:
                                    - name: apply service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}-external'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: 80
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: LoadBalancer

    ###################################################
    #
    # Terraform Kubernetes
    #
    ###################################################

    ingress::terraform::kubernetes:
        derived_from: ingress

        # TODO: this
        attributes:
            application_address:
                type: string
                default: 'not implemented'

        properties:
            k8s_host:
                type: string
                default: {get_input: k8s_host}

            k8s_ca_cert_file:
                type: string
                default: {get_input: k8s_ca_cert_file}

            k8s_client_cert_file:
                type: string
                default: {get_input: k8s_client_cert_file}

            k8s_client_key_file:
                type: string
                default: {get_input: k8s_client_key_file}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: '${file("{{ SELF.k8s_client_cert_file }}")}'
                                  client_key: '${file("{{ SELF.k8s_client_key_file }}")}'
                                  cluster_ca_certificate: '${file("{{ SELF.k8s_ca_cert_file }}")}'
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}-external'
                                      wait_for_load_balancer: false
                                      spec:
                                          - port:
                                                - name: '{{ SELF.application_protocol }}'
                                                  port: 80
                                                  target_port: '{{ SELF.application_port }}'
                                            selector:
                                                app: '{{ SELF.application_name }}'
                                            type: LoadBalancer

    ###################################################
    #
    # Kubernetes Kubernetes
    #
    ###################################################

    ingress::kubernetes::kubernetes:
        derived_from: ingress

        # TODO: this
        attributes:
            application_address:
                type: string
                default: 'not implemented'

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.ingress.manifest.yaml'

                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: '{{ service | to_yaml }}'
                                      vars:
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}-external'
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: LoadBalancer

                                    - name: apply manifest
                                      ansible.builtin.shell: |
                                          kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
