tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    mysql.database:
        derived_from: tosca.nodes.SoftwareComponent

        properties:
            database_name:
                type: string

        attributes:
            public_address:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_address'}

            database_address:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::database_address'}

        capabilities:
            database:
                type: tosca.capabilities.Endpoint.Database

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    # TODO: not required ...
    mysql.database.ansible.kubernetes:
        derived_from: mysql.database

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: wait for ssh
                                  wait_for_connection:

                                - name: Create database
                                  shell: kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -ppassword -e "create database shop";

                        playbookArgs:
                            - --key-file={{ SELF.os_ssh_key_file }}
                            - --user={{ SELF.os_ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Ansible GCP
    #
    ###################################################

    mysql.database.ansible.gcp:
        derived_from: mysql.database

        properties:
            instance_name:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::instance_name'}

            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: ORCHESTRATOR
                    inputs:
                        playbook:
                            q:
                                - name: Activate service account
                                  shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'

                                # https://cloud.google.com/sql/docs/mysql/create-manage-databases
                                - name: Create database
                                  shell: 'gcloud sql databases create {{ SELF.database_name }} --instance {{ SELF.instance_name }}'
                                  register: create_command
                                  failed_when:
                                      - "'Created database' not in create_command.stderr"
                                      - "'database exists' not in create_command.stderr"

    ###################################################
    #
    # Terraform GCP
    #
    ###################################################

    mysql.database.terraform.gcp:
        derived_from: mysql.database

        properties:
            instance_name:
                type: string

            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    tfvars: |
                        project = "{{ SELF.gcp_project }}"
                        region = "{{ SELF.gcp_region }}"
                        credentials = "{{ SELF.gcp_service_account_file }}"

                        name = "{{ SELF.database_name }}"
                        instance = "{{ SELF.instance_name }}"
                    main: |
                        terraform {
                           required_providers {
                             google = {
                               source = "hashicorp/google"
                               version = "4.67.0"
                             }
                           }
                         }

                        provider "google" {
                          project = var.project
                          region = var.region
                          credentials = var.credentials
                        }

                        variable "credentials" {
                          type        = string
                        }

                         variable "project" {
                           type        = string
                         }

                         variable "region" {
                           type        = string
                         }

                         variable "name" {
                           type        = string
                         }

                         variable "instance" {
                           type        = string
                         }

                         resource "google_sql_database" "database" {
                           name     = var.name
                           instance = var.instance
                         }

    ###################################################
    #
    # Terraform MySQL
    #
    ###################################################

    mysql.database.terraform.mysql:
        derived_from: mysql.database

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            os_ssh_host:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_address'}

            root_password:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::root_password'}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    tfvars: |
                        name = "{{ SELF.database_name }}"
                        root_password = "{{ SELF.root_password }}"
                        host = "{{ SELF.os_ssh_host }}"
                    main: |
                        terraform {
                           required_providers {
                             mysql  = {
                               source = "petoju/mysql"
                               version = "3.0.48"
                             }
                           }
                         }

                        variable "name" {
                           type        = string
                        }

                        variable "host" {
                           type        = string
                        }

                        variable "root_password" {
                           type        = string
                        }

                        provider "mysql" {
                            endpoint = concat([var.host, ":3306"])
                            username = root
                            password = var.root_password
                        }

                        resource "mysql_database" "app" {
                            name = var.name
                        }

    ###################################################
    #
    # Ansible MySQL
    #
    ###################################################

    mysql.database.ansible.mysql:
        derived_from: mysql.database

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: Wait for ssh
                                  wait_for_connection:

                                - name: Creating database
                                  community.mysql.mysql_db:
                                      name: '{{ SELF.database_name }}'
                                      state: present
                                  become: true

                        playbookArgs:
                            - --key-file={{ SELF.os_ssh_key_file }}
                            - --user={{ SELF.os_ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
