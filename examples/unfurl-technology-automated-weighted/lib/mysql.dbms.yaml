tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    mysql.dbms:
        derived_from: tosca.nodes.Root
        properties:
            root_password:
                type: string

        attributes:
            public_address:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_address'}

            public_ip:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_ip'}

            database_address:
                type: string

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    ###################################################
    #
    # Ansible OS
    #
    ###################################################

    mysql.dbms.ansible.os:
        derived_from: mysql.dbms

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            database_address:
                type: string
                default: '127.0.0.1'

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: Wait for ssh
                                  wait_for_connection:

                                - name: Installing mysql
                                  package:
                                      name: '{{item}}'
                                      state: present
                                      update_cache: yes
                                  loop:
                                      - mysql-server
                                      - mysql-client
                                      - python3-mysqldb
                                      - libmysqlclient-dev

                                - name: Start and enable mysql service
                                  service:
                                      name: mysql
                                      state: started
                                      enabled: yes

                                - name: Create mysql user
                                  community.mysql.mysql_user:
                                      name: root
                                      password: '{{ SELF.root_password }}'
                                      priv: '*.*:ALL'
                                      host: '%'
                                      state: present

                                - name: Enable remote login to mysql
                                  lineinfile:
                                      path: /etc/mysql/mysql.conf.d/mysqld.cnf
                                      regexp: '^bind-address'
                                      line: 'bind-address = 0.0.0.0'
                                      backup: yes

                                - name: Restart mysql
                                  service:
                                      name: mysql
                                      state: restarted

                        playbookArgs:
                            - --become
                            - --key-file={{ SELF.os_ssh_key_file }}
                            - --user={{ SELF.os_ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    # TODO: not required ...
    mysql.dbms.ansible.kubernetes:
        derived_from: tosca.nodes.Root
        properties:
            ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            database_address:
                type: string
                default: mysql

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: wait for ssh
                                  wait_for_connection:

                                - name: Create file
                                  copy:
                                      dest: mysql.yaml
                                      content: |
                                          ---
                                          apiVersion: apps/v1
                                          kind: Deployment
                                          metadata:
                                              name: mysql
                                          spec:
                                              selector:
                                                  matchLabels:
                                                      app: mysql
                                              strategy:
                                                  type: Recreate
                                              template:
                                                  metadata:
                                                      labels:
                                                          app: mysql
                                                  spec:
                                                      containers:
                                                          - image: mysql:5.6
                                                            name: mysql
                                                            env:
                                                                - name: MYSQL_ROOT_PASSWORD
                                                                  value: password
                                                            ports:
                                                                - containerPort: 3306
                                                                  name: mysql

                                          ---
                                          apiVersion: v1
                                          kind: Service
                                          metadata:
                                              name: mysql
                                          spec:
                                              ports:
                                                  - port: 3306
                                              selector:
                                                  app: mysql
                                              type: NodePort

                                - name: Install MySQL DBMS
                                  shell: |
                                      kubectl apply -f mysql.yaml
                                      kubectl rollout status deployment/mysql --timeout 60s
                                      sleep 2m

                        playbookArgs:
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    # TODO: inherit from mysql.dbms?
    mysql.dbms.kubernetes.kubernetes:
        derived_from: unfurl.nodes.K8sRawResource

        attributes:
            public_address:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_address'}

            public_ip:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_ip'}

            database_address:
                type: string
                default: mysql

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        properties:
            root_password:
                type: string

            definition:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                    name: mysql
                spec:
                    selector:
                        matchLabels:
                            app: mysql
                    strategy:
                        type: Recreate
                    template:
                        metadata:
                            labels:
                                app: mysql
                        spec:
                            containers:
                                - image: mysql:5.6
                                  name: mysql
                                  env:
                                      - name: MYSQL_ROOT_PASSWORD
                                        value: password
                                  ports:
                                      - containerPort: 3306
                                        name: mysql

    # TODO: how to expose ...
    mysql.dbms.expose.kubernetes.kubernetes:
        derived_from: unfurl.nodes.K8sRawResource

        properties:
            root_password:
                type: string

            definition:
                apiVersion: v1
                kind: Service
                metadata:
                    name: mysql
                spec:
                    ports:
                        - port: 3306
                    selector:
                        app: mysql
                    type: NodePort

    ###################################################
    #
    # Terraform OS
    #
    ###################################################

    mysql.dbms.terraform.os:
        derived_from: mysql.dbms

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            os_ssh_host:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_address'}

            artifact_script:
                type: string
                default: {eval: '.artifacts::artifact_script'}

        artifacts:
            artifact_script:
                type: tosca.artifacts.File
                file: files/mysql.dbms.create.sh

        attributes:
            database_address:
                type: string
                default: '127.0.0.1'

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    tfvars: |
                        ssh_user = "{{ SELF.os_ssh_user }}"
                        ssh_key_file = "{{ SELF.os_ssh_key_file }}"
                        ssh_host = "{{ SELF.os_ssh_host }}"

                        script = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_script.attributes.file }}"
                        root_password = "{{ SELF.root_password }}"
                    main: |
                        variable "ssh_user" {
                          type = string
                        }

                        variable "ssh_key_file" {
                          type = string
                        }

                        variable "ssh_host" {
                          type = string
                        }

                        variable "script" {
                          type = string
                        }

                        variable "root_password" {
                          type = string
                        }

                        resource "terraform_data" "os" {

                          connection {
                            type        = "ssh"
                            user        = var.ssh_user
                            private_key = var.ssh_key_file
                            host        = var.ssh_host
                          }

                          provisioner "file" {
                            source      = var.script
                            destination = "/tmp/mysql.dbms.create.sh"
                          }

                          provisioner "remote-exec" {
                            inline = [
                              "/tmp/mysql.dbms.create.sh ${var.root_password}",
                            ]
                          }
                        }
