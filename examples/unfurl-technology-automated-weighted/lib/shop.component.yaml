tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    shop.component:
        derived_from: tosca.nodes.SoftwareComponent

        properties:
            application_name:
                type: string

            DB_DIALECT:
                type: string

            DB_NAME:
                type: string

            DB_USERNAME:
                type: string

            DB_PASSWORD:
                type: string

            DB_ADDRESS:
                type: string

            artifact_tar:
                type: string
                default: {eval: '.artifacts::artifact_tar '}

            artifact_zip:
                type: string
                default: {eval: '.artifacts::artifact_zip '}

            artifact_docker:
                type: string
                default: {eval: '.artifacts::artifact_docker '}

        artifacts:
            artifact_tar:
                type: tosca.artifacts.File
                file: files/shop.code.tar.gz

            artifact_zip:
                type: tosca.artifacts.File
                file: files/shop.code.zip

            artifact_docker:
                type: tosca.artifacts.File
                file: files/shop.docker.tar.gz

        requirements:
            - database:
                  capability: tosca.capabilities.Endpoint.Database
                  relationship: tosca.relationships.ConnectsTo

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    # TODO: not required ...
    shop.component.ansible.kubernetes:
        derived_from: shop.component

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: wait for ssh
                                  wait_for_connection:

                                - name: Create application directory
                                  file:
                                      path: shop
                                      state: directory

                                - name: Copy deployment artifact
                                  copy:
                                      src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_tar.attributes.file }}"
                                      dest: shop

                                - name: Extract deployment artifact
                                  shell: |
                                      cd shop
                                      tar -xvf shop.tar.gz

                                - name: Build Docker Image
                                  shell: |
                                      cd shop
                                      eval $(minikube -p minikube docker-env)
                                      docker build -t shop .

                                - name: Create file
                                  copy:
                                      dest: shop.yaml
                                      content: |
                                          apiVersion: apps/v1
                                          kind: Deployment
                                          metadata:
                                              name: shop
                                          spec:
                                              selector:
                                                  matchLabels:
                                                      app: shop
                                              template:
                                                  metadata:
                                                      labels:
                                                          app: shop
                                                  spec:
                                                      containers:
                                                          - image: shop
                                                            imagePullPolicy: Never
                                                            name: shop
                                                            env:
                                                                - name: DB_NAME
                                                                  value: {{ SELF.DB_NAME }}

                                                                - name: DB_PASSWORD
                                                                  value: {{ SELF.DB_PASSWORD }}

                                                                - name: DB_USERNAME
                                                                  value: {{ SELF.DB_USERNAME }}

                                                                - name: DB_ADDRESS
                                                                  value: {{ SELF.DB_ADDRESS }}

                                                                - name: DB_DIALECT
                                                                  value: {{ SELF.DB_DIALECT }}

                                                            ports:
                                                                - containerPort: 80

                                          ---
                                          apiVersion: v1
                                          kind: Service
                                          metadata:
                                              name: shop
                                          spec:
                                              ports:
                                                  - port: 80
                                              selector:
                                                  app: shop
                                              type: NodePort

                                - name: Install shop component
                                  shell: |
                                      kubectl apply -f shop.yaml
                                      kubectl rollout status deployment/shop --timeout 60s

                                - name: create service
                                  copy:
                                      dest: '/etc/systemd/system/shop.service'
                                      content: |
                                          [Unit]
                                          After=network.target

                                          [Service]
                                          Type=simple
                                          ExecStart=sudo -E kubectl port-forward service/shop 80:80 --address 0.0.0.0
                                          User=ubuntu
                                          Group=ubuntu

                                          [Install]
                                          WantedBy=multi-user.target
                                  become: true

                                - name: start service
                                  systemd:
                                      name: shop
                                      state: started
                                      enabled: yes
                                      daemon_reload: yes
                                  become: true

                        playbookArgs:
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Kubernetes Kubernetes
    #
    ###################################################

    # TODO: inherit from shop.component?
    shop.component.kubernetes.kubernetes:
        derived_from: unfurl.nodes.K8sRawResource

        properties:
            application_name:
                type: string

            DB_DIALECT:
                type: string

            DB_NAME:
                type: string

            DB_USERNAME:
                type: string

            DB_PASSWORD:
                type: string

            DB_ADDRESS:
                type: string

            definition:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                    name: shop
                spec:
                    selector:
                        matchLabels:
                            app: shop
                    template:
                        metadata:
                            labels:
                                app: shop
                        spec:
                            containers:
                                # TODO: upload image
                                - image: ghcr.io/milesstoetzner/express-attest-db-demo:unfurl-technology
                                  name: shop
                                  env:
                                      - name: DB_NAME
                                        value: '{{ SELF.DB_NAME }}'

                                      - name: DB_PASSWORD
                                        value: '{{ SELF.DB_PASSWORD }}'

                                      - name: DB_USERNAME
                                        value: '{{ SELF.DB_USERNAME }}'

                                      - name: DB_ADDRESS
                                        value: '{{ SELF.DB_ADDRESS }}'

                                      - name: DB_DIALECT
                                        value: '{{ SELF.DB_DIALECT }}'

                                  ports:
                                      - containerPort: 80

        requirements:
            - database:
                  capability: tosca.capabilities.Endpoint.Database
                  relationship: tosca.relationships.ConnectsTo

    # TODO: how to expose ...
    shop.component.expose.kubernetes.kubernetes:
        derived_from: unfurl.nodes.K8sRawResource
        properties:
            definition:
                apiVersion: v1
                kind: Service
                metadata:
                    name: shop
                spec:
                    ports:
                        - port: 80
                    selector:
                        app: shop
                    type: NodePort

    ###################################################
    #
    # Ansible OS
    #
    ###################################################

    shop.component.ansible.os:
        derived_from: shop.component

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            application_directory:
                type: string
                default: {concat: ['/var/lib/node-applications/', {get_property: [SELF, application_name]}]}

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: Wait for ssh
                                  wait_for_connection:

                                - name: Install Node.js
                                  shell: |
                                      if [ ! -f /usr/bin/node ]; then
                                          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\
                                          sudo apt-get install -y nodejs
                                      fi
                                  args:
                                      executable: /usr/bin/bash

                                - name: Create applications directory
                                  file:
                                      path: /var/lib/node-applications/
                                      state: directory

                                - name: Create application directory
                                  file:
                                      path: '{{ SELF.application_directory }}'
                                      state: directory
                                  become: true

                                - name: Extract deployment artifact in application directory
                                  unarchive:
                                      src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_tar.attributes.file }}"
                                      dest: '{{ SELF.application_directory }}'
                                  become: true

                                - name: Install dependencies
                                  shell: /usr/bin/npm ci
                                  args:
                                      chdir: '{{ SELF.application_directory }}'

                                - name: Create .env file
                                  copy:
                                      dest: '{{ SELF.application_directory }}/.env'
                                      content: |
                                          PORT=3000
                                          INTERFACE="0.0.0.0"
                                          DB_DIALECT={{ SELF.DB_DIALECT}}
                                          DB_NAME={{ SELF.DB_NAME }}
                                          DB_USERNAME={{ SELF.DB_USERNAME }}
                                          DB_PASSWORD={{ SELF.DB_PASSWORD }}
                                          DB_ADDRESS={{ SELF.DB_ADDRESS }}
                                          APPLICATION_LANGUAGE={{ SELF.APPLICATION_LANGUAGE }}
                                      mode: a+x
                                  become: true

                                - name: Create service
                                  copy:
                                      dest: '/etc/systemd/system/{{ SELF.application_name }}.service'
                                      content: |
                                          [Unit]
                                          After=network.target

                                          [Service]
                                          Type=simple
                                          ExecStart=/usr/bin/npm start
                                          WorkingDirectory={{ SELF.application_directory }}
                                          EnvironmentFile={{ SELF.application_directory }}/.env

                                          [Install]
                                          WantedBy=multi-user.target
                                  become: true

                                - name: Start service
                                  systemd:
                                      name: '{{ SELF.application_name }}'
                                      state: started
                                      enabled: yes
                                      daemon_reload: yes
                                  become: true

                        playbookArgs:
                            - --key-file={{ SELF.os_ssh_key_file }}
                            - --user={{ SELF.os_ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

                delete:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: Wait for ssh
                                  wait_for_connection:

                                - name: Stop service
                                  systemd:
                                      name: '{{ SELF.application_name }}'
                                      state: stopped
                                  become: true

                                - name: Delete systemd service
                                  file:
                                      path: '/etc/systemd/system/{{ SELF.application_name }}.service'
                                      state: absent
                                  become: true

                                - name: Reload daemon
                                  systemd:
                                      daemon_reload: true
                                  become: true

                                - name: Delete application directory
                                  file:
                                      path: '{{ SELF.application_directory }}'
                                      state: absent
                                  become: true

                        playbookArgs:
                            - --key-file={{ SELF.os_ssh_key_file }}
                            - --user={{ SELF.os_ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Ansible GCP
    #
    ###################################################

    shop.component.ansible.gcp:
        derived_from: shop.component

        properties:
            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: Activate service account
                                  shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'

                                - name: Create working directory
                                  tempfile:
                                      state: directory
                                  register: tempdir_info

                                - name: Extract deployment artifact in working directory
                                  unarchive:
                                      src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_tar.attributes.file }}"
                                      dest: '{{ tempdir_info.path }}'

                                # https://cloud.google.com/appengine/docs/standard/reference/app-yaml?tab=node.js
                                - name: Configure app yaml
                                  copy:
                                      dest: '{{ tempdir_info.path }}/app.yaml'
                                      content: |
                                          runtime: nodejs18
                                          service: {{ SELF.application_name }}
                                          instance_class: F1
                                          env_variables:
                                              DB_DIALECT: {{ SELF.DB_DIALECT}}
                                              DB_NAME: {{ SELF.DB_NAME }}
                                              DB_USERNAME: {{ SELF.DB_USERNAME }}
                                              DB_PASSWORD: {{ SELF.DB_PASSWORD }}
                                              DB_ADDRESS: {{ SELF.DB_ADDRESS }}

                                # https://cloud.google.com/sdk/gcloud/reference/app/deploy
                                - name: Create App
                                  shell: 'gcloud app deploy {{ tempdir_info.path }} --quiet'

                delete:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: Activate service account
                                  shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'

                                # https://cloud.google.com/sdk/gcloud/reference/app/deploy
                                - name: Create App
                                  shell: 'gcloud app services delete {{ SELF.application_name }} --quiet'

    ###################################################
    #
    # Terraform GCP
    #
    ###################################################

    shop.component.terraform.gcp:
        derived_from: shop.component

        properties:
            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    public_ip: public_address
                    public_address: public_address

                inputs:
                    tfvars: |
                        project = "{{ SELF.gcp_project }}"
                        region = "{{ SELF.gcp_region }}"
                        credentials = "{{ SELF.gcp_service_account_file }}"

                        db_dialect="{{ SELF.DB_DIALECT}}"
                        db_name="{{ SELF.DB_NAME }}"
                        db_username="{{ SELF.DB_USERNAME }}"
                        db_password="{{ SELF.DB_PASSWORD }}"
                        db_address="{{ SELF.DB_ADDRESS }}"

                        application_name = "{{ SELF.application_name }}"
                        artifact = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_zip.attributes.file }}"
                    main: |
                        terraform {
                           required_providers {
                             google = {
                               source = "hashicorp/google"
                               version = "4.67.0"
                             }
                           }
                         }

                         provider "google" {
                           project = var.project
                           region = var.region
                           credentials = var.credentials
                         }

                         variable "credentials" {
                           type        = string
                         }

                         variable "project" {
                           type        = string
                         }

                         variable "region" {
                           type        = string
                         }

                         variable "artifact" {
                           type        = string
                         }

                         variable "application_name" {
                           type        = string
                         }

                         variable "db_dialect" {
                           type        = string
                         }

                         variable "db_name" {
                           type        = string
                         }

                         variable "db_username" {
                           type        = string
                         }

                         variable "db_password" {
                           type        = string
                         }

                         variable "db_address" {
                           type        = string
                         }

                         variable "try" {
                           type = string
                           default = "try-8"
                         }

                         resource "google_app_engine_standard_app_version" "app" {
                           version_id      = "v2"
                           service         = var.application_name
                           runtime         = "nodejs18"
                           app_engine_apis = true

                           entrypoint {
                             shell = "node ./index.js"
                           }

                           deployment {
                             zip {
                               source_url = "https://storage.googleapis.com/${google_storage_bucket.bucket.name}/${google_storage_bucket_object.object.name}"
                             }
                           }

                           env_variables = {
                             DB_DIALECT  = var.db_dialect
                             DB_NAME     = var.db_name
                             DB_USERNAME = var.db_username
                             DB_PASSWORD = var.db_password
                             DB_ADDRESS  = var.db_address
                           }

                           service_account = google_service_account.custom_service_account.email
                         }

                         resource "google_storage_bucket" "bucket" {
                           name     = "${var.project}-appengine-static-content-${var.try}"
                           location = "EU"
                         }

                         resource "google_storage_bucket_object" "object" {
                           name   = "object-${var.try}.zip"
                           bucket = google_storage_bucket.bucket.name
                           source = var.artifact
                         }

                         resource "google_service_account" "custom_service_account" {
                           account_id   = "${var.application_name}-account-${var.try}"
                           display_name = "Custom Service Account"
                         }

                         resource "google_project_iam_member" "gae_api" {
                           project = google_service_account.custom_service_account.project
                           role    = "roles/compute.networkUser"
                           member  = "serviceAccount:${google_service_account.custom_service_account.email}"
                         }

                         resource "google_project_iam_member" "storage_viewer" {
                           project = google_service_account.custom_service_account.project
                           role    = "roles/storage.objectViewer"
                           member  = "serviceAccount:${google_service_account.custom_service_account.email}"
                         }

    ###################################################
    #
    # Terraform OS
    #
    ###################################################

    shop.component.terraform.os:
        derived_from: shop.component

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            os_ssh_host:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_address'}

            artifact_script:
                type: string
                default: {eval: '.artifacts::artifact_script'}

        artifacts:
            artifact_script:
                type: tosca.artifacts.File
                file: files/shop.create.sh

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    tfvars: |
                        ssh_user = "{{ SELF.os_ssh_user }}"
                        ssh_key_file = "{{ SELF.os_ssh_key_file }}"
                        ssh_host = "{{ SELF.os_ssh_host }}"

                        application_name = "{{ SELF.application_name }}"
                        application_artifact = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_tar.attributes.file }}"
                        application_script = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_script.attributes.file }}"

                        db_dialect="{{ SELF.DB_DIALECT}}"
                        db_name="{{ SELF.DB_NAME }}"
                        db_username="{{ SELF.DB_USERNAME }}"
                        db_password="{{ SELF.DB_PASSWORD }}"
                        db_address="{{ SELF.DB_ADDRESS }}"
                    main: |
                        variable "ssh_user" {
                          type = string
                        }

                        variable "ssh_key_file" {
                          type = string
                        }

                        variable "ssh_host" {
                          type = string
                        }

                        variable "application_name" {
                          type = string
                        }

                        variable "application_script" {
                          type = string
                        }

                        variable "application_artifact" {
                          type = string
                        }

                        variable "db_dialect" {
                          type = string
                        }

                        variable "db_name" {
                          type = string
                        }

                        variable "db_username" {
                          type = string
                        }

                        variable "db_password" {
                          type = string
                        }

                        variable "db_address" {
                          type = string
                        }

                        resource "terraform_data" "os" {

                          connection {
                            type        = "ssh"
                            user        = var.ssh_user
                            private_key = var.ssh_key_file
                            host        = var.ssh_host
                          }

                          provisioner "file" {
                            source      = var.application_artifact
                            destination = "/tmp/shop.tar.gz"
                          }

                          provisioner "file" {
                            source      = var.application_script
                            destination = "/tmp/shop.create.sh"
                          }

                          provisioner "remote-exec" {
                            inline = [
                              "/tmp/shop.install.sh ${var.application_name} /tmp/shop.tar.gz ${var.db_dialect} ${var.db_name} ${var.db_username} ${var.db_password} ${var.db_address}",
                            ]
                          }
                        }
