tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    os.compute:
        derived_from: tosca.nodes.Root
        properties:
            ports:
                type: list
                entry_schema:
                    type: integer

            machine:
                type: string

            flavor:
                type: string
                default: 'm1.medium'

            network:
                type: string

            os_region_name:
                type: string
                default: {get_input: os_region_name}

            os_auth_type:
                type: string
                default: {get_input: os_auth_type}

            os_auth_url:
                type: string
                default: {get_input: os_auth_url}

            os_identity_api_version:
                type: string
                default: {get_input: os_identity_api_version}

            os_interface:
                type: string
                default: {get_input: os_interface}

            os_application_credential_id:
                type: string
                default: {get_input: os_application_credential_id}

            os_application_credential_secret:
                type: string
                default: {get_input: os_application_credential_secret}

        attributes:
            public_address:
                type: string

        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host: {eval: '.::..::public_address'}

    ###################################################
    #
    # Ansible OS
    #
    ###################################################

    os.compute.ansible.os:
        derived_from: os.compute

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: ORCHESTRATOR
                    inputs:
                        environment:
                            OS_AUTH_TYPE: '{{ SELF.os_auth_type }}'
                            OS_AUTH_URL: '{{ SELF.os_auth_url }}'
                            OS_IDENTITY_API_VERSION: '{{ SELF.os_identity_api_version }}'
                            OS_REGION_NAME: '{{ SELF.os_region_name }}'
                            OS_INTERFACE: '{{ SELF.os_interface }}'
                            OS_APPLICATION_CREDENTIAL_ID: '{{ SELF.os_application_credential_id }}'
                            OS_APPLICATION_CREDENTIAL_SECRET: '{{ SELF.os_application_credential_secret }}'
                        playbook:
                            q:
                                - name: Create security group
                                  openstack.cloud.security_group:
                                      name: '{{ SELF.machine }}'

                                - name: Open ports
                                  openstack.cloud.security_group_rule:
                                      security_group: '{{ SELF.name }}'
                                      protocol: tcp
                                      port_range_min: '{{ item }}'
                                      port_range_max: '{{ item }}'
                                      remote_ip_prefix: '0.0.0.0/0'
                                      direction: ingress
                                      ethertype: IPv4
                                  loop: '{{ SELF.ports }}'

                                - name: Create VM
                                  openstack.cloud.server:
                                      state: present
                                      name: '{{ SELF.machine }}'
                                      image: 'Ubuntu 22.04'
                                      key_name: 'default'
                                      flavor: '{{ SELF.flavor }}'
                                      network: '{{ SELF.network }}'
                                      security_groups: "{{ 'default,' + SELF.machine }}"
                                      auto_ip: false
                                  register: server_info

                                - name: Set attributes
                                  set_fact:
                                      public_address: '{{ server_info.server.addresses[network][0].addr }}'

                        resultTemplate: |
                            - name: SELF
                              attributes:
                                public_address: "{{ outputs.public_address | trim }}"

                    outputs:
                        public_address:

                delete:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: Delete VM
                                  openstack.cloud.server:
                                      state: absent
                                      name: '{{ SELF.machine }}'
                                      delete_fip: true

                                - name: Delete security group
                                  openstack.cloud.security_group:
                                      state: absent
                                      name: '{{ SELF.machine }}'

    ###################################################
    #
    # Terraform OS
    #
    ###################################################

    os.compute.terraform.os:
        derived_from: os.compute
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    public_address: public_address
                inputs:
                    tfvars: |
                        os_region_name = "{{ SELF.os_region_name}}"
                        os_auth_url = "{{ SELF.os_auth_url}}"

                        os_application_credential_id = "{{ SELF.os_application_credential_id}}"
                        os_application_credential_secret = "{{ SELF.os_application_credential_secret}}"

                        ports = {{ SELF.ports }}
                        machine = "{{ SELF.machine }}"
                        flavor = "{{ SELF.flavor }}"
                        network = "{{ SELF.network }}"
                    main: |
                        terraform {
                        required_version = ">= 0.14.0"
                          required_providers {
                            openstack = {
                              source  = "terraform-provider-openstack/openstack"
                              version = "~> 1.48.0"
                            }
                          }
                        }

                        provider "openstack" {
                          region = var.os_region_name
                          auth_url = var.os_auth_url

                          application_credential_id = var.os_application_credential_id
                          application_credential_secret = var.os_application_credential_secret
                        }

                        variable "os_region_name" {
                          type        = string
                        }

                        variable "os_auth_url" {
                          type        = string
                        }

                        variable "os_application_credential_id" {
                          type        = string
                        }

                        variable "os_application_credential_secret" {
                          type        = string
                        }

                        variable "ports" {
                          type        = list(string)
                        }

                        variable "machine" {
                          type        = string
                        }

                        variable "flavor" {
                          type        = string
                        }

                        variable "network" {
                          type        = string
                        }

                        resource "openstack_networking_secgroup_v2" "ports" {
                            name        = "${var.machine}-ports"
                            description = "ports for ${var.machine}"
                        }

                        resource "openstack_networking_secgroup_rule_v2" "port" {
                            for_each = toset(var.ports)

                            direction         = "ingress"
                            ethertype         = "IPv4"
                            protocol          = "tcp"
                            port_range_min    = each.value
                            port_range_max    = each.value
                            remote_ip_prefix  = "0.0.0.0/0"
                            security_group_id = openstack_networking_secgroup_v2.ports.id
                        }

                        resource "openstack_compute_instance_v2" "machine" {
                          name            = var.machine
                          image_name      = "Ubuntu 22.04"
                          flavor_name     = var.flavor
                          key_pair        = "default"
                          security_groups = ["default", openstack_networking_secgroup_v2.ports.name]

                          network {
                            name = var.network
                          }
                        }

                        output "public_address" {
                          value = yamldecode(openstack_compute_instance_v2.machine.access_ip_v4)
                        }
