tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    node.app:
        derived_from: tosca.nodes.SoftwareComponent

        properties:
            application_name:
                type: string

            DB_DIALECT:
                type: string
                default: {eval: '.::.requirements[.name=database]::.target::database_dialect'}

            DB_NAME:
                type: string
                default: {eval: '.::.requirements[.name=database]::.target::database_name'}

            DB_USERNAME:
                type: string
                default: root

            DB_PASSWORD:
                type: string
                default: {get_input: db_password}

            DB_ADDRESS:
                type: string
                default: {eval: '.::.requirements[.name=database]::.target::public_address[0]'}

            APPLICATION_LANGUAGE:
                type: string
                default: {get_input: language}

            application_directory:
                type: string
                required: false
                default: {concat: ['/var/lib/node-applications/', {get_property: [SELF, application_name]}]}

            artifact:
                type: string
                default: {eval: '.artifacts::artifact '}

            ssh_user:
                type: string
                default: {get_input: ssh_user}

            ssh_key_file:
                type: string
                default: {get_input: ssh_key_file}

        attributes:
            public_address:
                type: string
                default: {get_attribute: [SELF, host, public_address]}

            public_ip:
                type: string
                default: {get_attribute: [SELF, host, public_ip]}

        requirements:
            - database:
                  capability: tosca.capabilities.Endpoint.Database
                  relationship: tosca.relationships.ConnectsTo

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                - name: wait for ssh
                                  wait_for_connection:

                                - name: Create application directory
                                  file:
                                      path: '{{ SELF.application_directory }}'
                                      state: directory

                                - name: Extract deployment artifact in application directory
                                  unarchive:
                                      src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact.attributes.file }}"
                                      dest: '{{ SELF.application_directory }}'

                                - name: install
                                  shell: 'sudo npm install'
                                  args:
                                      chdir: '{{ SELF.application_directory }}'

                                - name: create .env file
                                  copy:
                                      dest: '{{ SELF.application_directory }}/.env'
                                      content: |
                                          DB_DIALECT={{ SELF.DB_DIALECT}}
                                          DB_NAME={{ SELF.DB_NAME }}
                                          DB_USERNAME={{ SELF.DB_USERNAME }}
                                          DB_PASSWORD={{ SELF.DB_PASSWORD }}
                                          DB_ADDRESS={{ SELF.DB_ADDRESS }}
                                          APPLICATION_LANGUAGE={{ SELF.APPLICATION_LANGUAGE }}
                                      mode: a+x

                                - name: create service
                                  copy:
                                      dest: '/etc/systemd/system/{{ SELF.application_name }}.service'
                                      content: |
                                          [Unit]
                                          After=network.target

                                          [Service]
                                          Type=simple
                                          ExecStart=/usr/bin/npm start
                                          WorkingDirectory={{ SELF.application_directory }}
                                          EnvironmentFile={{ SELF.application_directory }}/.env

                                          [Install]
                                          WantedBy=multi-user.target

                                - name: start service
                                  systemd:
                                      name: '{{ SELF.application_name }}'
                                      state: started
                                      enabled: yes
                                      daemon_reload: yes

                        playbookArgs:
                            - --become
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
