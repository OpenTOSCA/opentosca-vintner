tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    shop.app:
        derived_from: tosca.nodes.SoftwareComponent

        properties:
            application_name:
                type: string

            DB_DIALECT:
                type: string

            DB_NAME:
                type: string

            DB_USERNAME:
                type: string

            DB_PASSWORD:
                type: string

            DB_ADDRESS:
                type: string

            APPLICATION_LANGUAGE:
                type: string

            APPLICATION_ANALYTICAL_REPORTS:
                type: boolean
                required: false

            artifact:
                type: string
                default: {eval: '.artifacts::artifact '}

            deployment_mode:
                type: string

            ###################################################
            #
            # GCP
            #
            ###################################################

            credentials:
                type: string
                required: false

            project:
                type: string
                required: false

            region:
                type: string
                required: false

            auto_scaling:
                type: boolean
                required: false

            ###################################################
            #
            # OS
            #
            ###################################################

            ssh_user:
                type: string
                required: false
                default: ubuntu

            ssh_key_file:
                type: string
                required: false
                default: dummy

            application_directory:
                type: string
                default: {concat: ['/var/lib/node-applications/', {get_property: [SELF, application_name]}]}

        requirements:
            - database:
                  capability: tosca.capabilities.Endpoint.Database
                  relationship: tosca.relationships.ConnectsTo

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                ###################################################
                                #
                                # OS
                                #
                                ###################################################

                                - name: wait for ssh
                                  wait_for_connection:
                                  when: SELF.deployment_mode == "OS"

                                - name: Create application directory
                                  file:
                                      path: '{{ SELF.application_directory }}'
                                      state: directory
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                - name: Extract deployment artifact in application directory
                                  unarchive:
                                      src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact.attributes.file }}"
                                      dest: '{{ SELF.application_directory }}'
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                - name: create .env file
                                  copy:
                                      dest: '{{ SELF.application_directory }}/.env'
                                      content: |
                                          PORT=3000
                                          INTERFACE="::"
                                          DB_DIALECT={{ SELF.DB_DIALECT}}
                                          DB_NAME={{ SELF.DB_NAME }}
                                          DB_USERNAME={{ SELF.DB_USERNAME }}
                                          DB_PASSWORD={{ SELF.DB_PASSWORD }}
                                          DB_ADDRESS={{ SELF.DB_ADDRESS }}
                                          APPLICATION_LANGUAGE={{ SELF.APPLICATION_LANGUAGE }}
                                      mode: a+x
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                - name: create service
                                  copy:
                                      dest: '/etc/systemd/system/{{ SELF.application_name }}.service'
                                      content: |
                                          [Unit]
                                          After=network.target

                                          [Service]
                                          Type=simple
                                          ExecStart=/usr/bin/npm start
                                          WorkingDirectory={{ SELF.application_directory }}
                                          EnvironmentFile={{ SELF.application_directory }}/.env

                                          [Install]
                                          WantedBy=multi-user.target
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                - name: start service
                                  systemd:
                                      name: '{{ SELF.application_name }}'
                                      state: started
                                      enabled: yes
                                      daemon_reload: yes
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                ###################################################
                                #
                                # GCP
                                #
                                ###################################################

                                - name: Activate service account
                                  shell: 'gcloud auth activate-service-account --key-file {{ SELF.credentials }} --project {{ SELF.project }}'
                                  when: SELF.deployment_mode == "GCP"

                                - name: Create working directory
                                  tempfile:
                                      state: directory
                                  register: tempdir_info
                                  when: SELF.deployment_mode == "GCP"

                                - name: Extract deployment artifact in working directory
                                  unarchive:
                                      src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact.attributes.file }}"
                                      dest: '{{ tempdir_info.path }}'
                                  when: SELF.deployment_mode == "GCP"

                                # https://cloud.google.com/appengine/docs/standard/reference/app-yaml?tab=node.js
                                - name: Configure app yaml
                                  copy:
                                      dest: '{{ tempdir_info.path }}/app.yaml'
                                      content: |
                                          runtime: nodejs18
                                          service: {{ SELF.application_name }}
                                          instance_class: F1
                                          automatic_scaling:
                                              max_instances: {{ 100 if SELF.auto_scaling else 1 }}
                                          env_variables:
                                              DB_DIALECT: {{ SELF.DB_DIALECT}}
                                              DB_NAME: {{ SELF.DB_NAME }}
                                              DB_USERNAME: {{ SELF.DB_USERNAME }}
                                              DB_PASSWORD: {{ SELF.DB_PASSWORD }}
                                              DB_ADDRESS: {{ SELF.DB_ADDRESS }}
                                              APPLICATION_LANGUAGE: {{ SELF.APPLICATION_LANGUAGE }}
                                              APPLICATION_ANALYTICAL_REPORTS: {{ SELF.APPLICATION_ANALYTICAL_REPORTS }}
                                  when: SELF.deployment_mode == "GCP"

                                # https://cloud.google.com/sdk/gcloud/reference/app/deploy
                                - name: Create App
                                  shell: 'gcloud app deploy {{ tempdir_info.path }} --quiet'
                                  when: SELF.deployment_mode == "GCP"

                        playbookArgs:
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

                delete:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                ###################################################
                                #
                                # OS
                                #
                                ###################################################

                                - name: wait for ssh
                                  wait_for_connection:
                                  when: SELF.deployment_mode == "OS"

                                - name: stop service
                                  systemd:
                                      name: '{{ SELF.application_name }}'
                                      state: stopped
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                - name: Delete systemd service
                                  file:
                                      path: '/etc/systemd/system/{{ SELF.application_name }}.service'
                                      state: absent
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                - name: Reload daemon
                                  systemd:
                                      daemon_reload: true
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                - name: delete application directory
                                  file:
                                      path: '{{ SELF.application_directory }}'
                                      state: absent
                                  become: true
                                  when: SELF.deployment_mode == "OS"

                                ###################################################
                                #
                                # GCP
                                #
                                ###################################################

                                - name: Activate service account
                                  shell: 'gcloud auth activate-service-account --key-file {{ SELF.credentials }} --project {{ SELF.project }}'
                                  when: SELF.deployment_mode == "GCP"

                                # https://cloud.google.com/sdk/gcloud/reference/app/deploy
                                - name: Create App
                                  shell: 'gcloud app services delete {{ SELF.application_name }} --quiet'
                                  when: SELF.deployment_mode == "GCP"

                        playbookArgs:
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
