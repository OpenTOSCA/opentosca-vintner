tosca_definitions_version: tosca_variability_1_0

imports:
    - lib/scenario/types.yaml
    - lib/compute/types.yaml

topology_template:
    inputs:
        instance:
            type: string

        compute_vm_network:
            type: string

        compute_vm_security_groups:
            type: string

        compute_vm_key_name:
            type: string

        compute_vm_ssh_user:
            type: string

        compute_vm_ssh_key_file:
            type: string

        os_region_name:
            type: string

        os_auth_type:
            type: string

        os_auth_url:
            type: string

        os_identity_api_version:
            type: string

        os_interface:
            type: string

        os_application_credential_id:
            type: string

        os_application_credential_secret:
            type: string

    variability:
        inputs:
            static:
                type: boolean
                default: true

            large:
                type: boolean
                default: false

        presets:
            static:
                inputs:
                    static: true

            static-large:
                inputs:
                    static: true
                    large: true

            elastic:
                inputs:
                    static: false

        expressions:
            is_static: {equal: [{variability_input: static}, true]}
            is_elastic: {equal: [{variability_input: static}, false]}

            is_large: {variability_input: large}
            is_medium: {not: {logic_expression: is_large}}

        options:
            mode: loose

        type_specific_conditions:
            node_types:
                scenario.monitor:
                    conditions: {host_presence: SELF}

    node_templates:
        shop:
            type: scenario.shop
            properties:
                - DB_DIALECT:
                      conditions: {logic_expression: is_static}
                      value: sqlite

                - DB_DIALECT:
                      conditions: {logic_expression: is_elastic}
                      value: mysql

            requirements:
                - host:
                      node: os_compute
                      conditions: {logic_expression: is_static}

                - host:
                      node: gcp_runtime
                      conditions: {logic_expression: is_elastic}

                - database:
                      node: os_database
                      conditions: {logic_expression: is_static}

                - database:
                      node: gcp_database
                      conditions: {logic_expression: is_elastic}

            artifacts:
                - artifact:
                      type: tosca.artifacts.File
                      file: files/shop.xz

        os_database:
            type: os.database
            properties:
                name: shop
            requirements:
                - host: os_compute

        os_monitor:
            type: os.monitor
            properties:
                interval: 15 sec
            artifacts:
                binary:
                    type: tosca.artifacts.File
                    file: files/application-linux-arm64.xz
            requirements:
                - host: os_compute

        os_compute:
            type: os.compute
            properties:
                - ports: [80, 3000]
                - name: {concat: ['compute-vm-', {get_input: instance}]}

                - image: Ubuntu 22.04

                - tier:
                      value: medium
                      conditions: {logic_expression: is_medium}

                - tier:
                      value: large
                      conditions: {logic_expression: is_large}

                # TODO: drop this in favor of tier
                - flavor: m1.medium

                - network: {get_input: compute_vm_network}
                - security_groups: {get_input: compute_vm_security_groups}
                - key_name: {get_input: compute_vm_key_name}
                - ssh_user: {get_input: compute_vm_ssh_user}
                - ssh_key_file: {get_input: compute_vm_ssh_key_file}
            requirements:
                - host: os_cloud

        os_cloud:
            type: os.provider
            properties:
                region_name: {get_input: os_region_name}
                auth_type: {get_input: os_auth_type}
                auth_url: {get_input: os_auth_url}
                identity_api_version: {get_input: os_identity_api_version}
                interface: {get_input: os_interface}
                application_credential_id: {get_input: os_application_credential_id}
                application_credential_secret: {get_input: os_application_credential_secret}

        gcp_runtime:
            type: gcp.runtime
            properties:
                auto_scaling: true
            capabilities:
                endpoint:
                    properties:
                        connection: local
            requirements:
                - host: gcp_dbms

        gcp_database:
            type: gcp.database
            properties:
                database_name: shop
            requirements:
                - host: gcp_dbms

        gcp_dbms:
            type: gcp.dbms
            properties:
                - instance_name: shop
                - root_password: {get_input: db_password}
                - backups: true

                # TODO: implement this
                - variant: MySQL5_7

                - availability_type: REGIONAL
            requirements:
                - host: gcp_cloud

        gcp_cloud:
            type: gcp.provider
# todo: correct type names
