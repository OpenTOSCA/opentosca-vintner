tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - tosca-vintner-profile.yaml

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    shop.component:
        derived_from: nodejs.service.application

        properties:
            application_name:
                type: string
                metadata:
                    vintner_ignore: 'true'

            application_port:
                type: string
                metadata:
                    vintner_name: PORT

            application_protocol:
                type: string
                metadata:
                    vintner_ignore: 'true'
                default: http

            DB_DIALECT:
                type: string

            DB_NAME:
                type: string

            DB_USERNAME:
                type: string

            DB_PASSWORD:
                type: string

            DB_ADDRESS:
                type: string

            DB_PORT:
                type: integer

            optional_feature:
                type: boolean
                metadata:
                    vintner_name: FEATURE_OPTIONAL

            premium_feature:
                type: boolean
                metadata:
                    vintner_name: FEATURE_PREMIUM

        capabilities:
            endpoint:
                type: tosca.capabilities.Endpoint

        requirements:
            - database:
                  capability: tosca.capabilities.Endpoint.Database
                  relationship: tosca.relationships.ConnectsTo

    # [OPENTOSCA_VINTNER_GENERATION_MARK]

    ################################################################
    #
    # WARNING: Do not edit! This following content is autogenerated!
    #
    ################################################################

    shop.component~service.application#docker.image::ansible@docker.engine->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: start container
                                      community.docker.docker_container:
                                          name: '{{ SELF.application_name }}'
                                          image: '{{ ".artifacts::docker_image::file" | eval }}'
                                          network_mode: host
                                          env:
                                              PORT: '"{{ SELF.application_port }}"'
                                              DB_DIALECT: '"{{ SELF.DB_DIALECT }}"'
                                              DB_NAME: '"{{ SELF.DB_NAME }}"'
                                              DB_USERNAME: '"{{ SELF.DB_USERNAME }}"'
                                              DB_PASSWORD: '"{{ SELF.DB_PASSWORD }}"'
                                              DB_ADDRESS: '"{{ SELF.DB_ADDRESS }}"'
                                              DB_PORT: '"{{ SELF.DB_PORT }}"'
                                              FEATURE_OPTIONAL: '"{{ SELF.optional_feature }}"'
                                              FEATURE_PREMIUM: '"{{ SELF.premium_feature }}"'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: stop container
                                      community.docker.docker_container:
                                          name: '{{ SELF.application_name }}'
                                          state: absent
    shop.component~service.application#docker.image::compose@docker.engine->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.application_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.application_name }}'
                                                      image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                      network_mode: host
                                                      environment:
                                                          PORT: '"{{ SELF.application_port }}"'
                                                          DB_DIALECT: '"{{ SELF.DB_DIALECT }}"'
                                                          DB_NAME: '"{{ SELF.DB_NAME }}"'
                                                          DB_USERNAME: '"{{ SELF.DB_USERNAME }}"'
                                                          DB_PASSWORD: '"{{ SELF.DB_PASSWORD }}"'
                                                          DB_ADDRESS: '"{{ SELF.DB_ADDRESS }}"'
                                                          DB_PORT: '"{{ SELF.DB_PORT }}"'
                                                          FEATURE_OPTIONAL: '"{{ SELF.optional_feature }}"'
                                                          FEATURE_PREMIUM: '"{{ SELF.premium_feature }}"'
                                    - name: apply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.application_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.application_name }}'
                                                      image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                      network_mode: host
                                                      environment:
                                                          PORT: '"{{ SELF.application_port }}"'
                                                          DB_DIALECT: '"{{ SELF.DB_DIALECT }}"'
                                                          DB_NAME: '"{{ SELF.DB_NAME }}"'
                                                          DB_USERNAME: '"{{ SELF.DB_USERNAME }}"'
                                                          DB_PASSWORD: '"{{ SELF.DB_PASSWORD }}"'
                                                          DB_ADDRESS: '"{{ SELF.DB_ADDRESS }}"'
                                                          DB_PORT: '"{{ SELF.DB_PORT }}"'
                                                          FEATURE_OPTIONAL: '"{{ SELF.optional_feature }}"'
                                                          FEATURE_PREMIUM: '"{{ SELF.premium_feature }}"'
                                    - name: unapply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} down
                                      args:
                                          executable: /usr/bin/bash
    shop.component~service.application#docker.image::terraform@docker.engine->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - docker:
                                        source: kreuzwerker/docker
                                        version: 3.0.2
                              required_version: '>= 0.14.0'
                        provider:
                            docker:
                                - host: unix:///var/run/docker.sock
                        resource:
                            docker_container:
                                application:
                                    - env:
                                          - PORT={{ SELF.application_port }}
                                          - DB_DIALECT={{ SELF.DB_DIALECT }}
                                          - DB_NAME={{ SELF.DB_NAME }}
                                          - DB_USERNAME={{ SELF.DB_USERNAME }}
                                          - DB_PASSWORD={{ SELF.DB_PASSWORD }}
                                          - DB_ADDRESS={{ SELF.DB_ADDRESS }}
                                          - DB_PORT={{ SELF.DB_PORT }}
                                          - FEATURE_OPTIONAL={{ SELF.optional_feature }}
                                          - FEATURE_PREMIUM={{ SELF.premium_feature }}
                                      image: ${docker_image.image.image_id}
                                      name: '{{ SELF.application_name }}'
                                      network_mode: host
                            docker_image:
                                image:
                                    - name: '{{ ".artifacts::docker_image::file" | eval }}'
    shop.component~service.application#docker.image::ansible@docker.engine->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: start container
                                      community.docker.docker_container:
                                          name: '{{ SELF.application_name }}'
                                          image: '{{ ".artifacts::docker_image::file" | eval }}'
                                          network_mode: host
                                          env:
                                              PORT: '"{{ SELF.application_port }}"'
                                              DB_DIALECT: '"{{ SELF.DB_DIALECT }}"'
                                              DB_NAME: '"{{ SELF.DB_NAME }}"'
                                              DB_USERNAME: '"{{ SELF.DB_USERNAME }}"'
                                              DB_PASSWORD: '"{{ SELF.DB_PASSWORD }}"'
                                              DB_ADDRESS: '"{{ SELF.DB_ADDRESS }}"'
                                              DB_PORT: '"{{ SELF.DB_PORT }}"'
                                              FEATURE_OPTIONAL: '"{{ SELF.optional_feature }}"'
                                              FEATURE_PREMIUM: '"{{ SELF.premium_feature }}"'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: stop container
                                      community.docker.docker_container:
                                          name: '{{ SELF.application_name }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    shop.component~service.application#docker.image::compose@docker.engine->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.application_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.application_name }}'
                                                      image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                      network_mode: host
                                                      environment:
                                                          PORT: '"{{ SELF.application_port }}"'
                                                          DB_DIALECT: '"{{ SELF.DB_DIALECT }}"'
                                                          DB_NAME: '"{{ SELF.DB_NAME }}"'
                                                          DB_USERNAME: '"{{ SELF.DB_USERNAME }}"'
                                                          DB_PASSWORD: '"{{ SELF.DB_PASSWORD }}"'
                                                          DB_ADDRESS: '"{{ SELF.DB_ADDRESS }}"'
                                                          DB_PORT: '"{{ SELF.DB_PORT }}"'
                                                          FEATURE_OPTIONAL: '"{{ SELF.optional_feature }}"'
                                                          FEATURE_PREMIUM: '"{{ SELF.premium_feature }}"'
                                    - name: apply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash
                                      environment:
                                          DOCKER_HOST: '{{ SELF.os_ssh_host }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.application_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.application_name }}'
                                                      image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                      network_mode: host
                                                      environment:
                                                          PORT: '"{{ SELF.application_port }}"'
                                                          DB_DIALECT: '"{{ SELF.DB_DIALECT }}"'
                                                          DB_NAME: '"{{ SELF.DB_NAME }}"'
                                                          DB_USERNAME: '"{{ SELF.DB_USERNAME }}"'
                                                          DB_PASSWORD: '"{{ SELF.DB_PASSWORD }}"'
                                                          DB_ADDRESS: '"{{ SELF.DB_ADDRESS }}"'
                                                          DB_PORT: '"{{ SELF.DB_PORT }}"'
                                                          FEATURE_OPTIONAL: '"{{ SELF.optional_feature }}"'
                                                          FEATURE_PREMIUM: '"{{ SELF.premium_feature }}"'
                                    - name: unapply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} down
                                      args:
                                          executable: /usr/bin/bash
                                      environment:
                                          DOCKER_HOST: '{{ SELF.os_ssh_host }}'
    shop.component~service.application#docker.image::terraform@docker.engine->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - docker:
                                        source: kreuzwerker/docker
                                        version: 3.0.2
                        provider:
                            docker:
                                - host: ssh://{{ SELF.os_ssh_user }}@{{ SELF.os_ssh_host }}:22
                                  ssh_opts:
                                      - '-i'
                                      - '{{ SELF.os_ssh_key_file }}'
                                      - '-o'
                                      - IdentitiesOnly=yes
                                      - '-o'
                                      - BatchMode=yes
                                      - '-o'
                                      - UserKnownHostsFile=/dev/null
                                      - '-o'
                                      - StrictHostKeyChecking=no
                        resource:
                            docker_container:
                                application:
                                    - env:
                                          - PORT={{ SELF.application_port }}
                                          - DB_DIALECT={{ SELF.DB_DIALECT }}
                                          - DB_NAME={{ SELF.DB_NAME }}
                                          - DB_USERNAME={{ SELF.DB_USERNAME }}
                                          - DB_PASSWORD={{ SELF.DB_PASSWORD }}
                                          - DB_ADDRESS={{ SELF.DB_ADDRESS }}
                                          - DB_PORT={{ SELF.DB_PORT }}
                                          - FEATURE_OPTIONAL={{ SELF.optional_feature }}
                                          - FEATURE_PREMIUM={{ SELF.premium_feature }}
                                      image: ${docker_image.image.image_id}
                                      name: '{{ SELF.application_name }}'
                                      network_mode: host
                            docker_image:
                                image:
                                    - name: '{{ ".artifacts::docker_image::file" | eval }}'
    shop.component~service.application#docker.image::ansible@gcp.cloudrun:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_protocol:
                type: string
                default: https
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                      args:
                                          executable: /bin/bash
                                    - name: touch service
                                      register: service
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.service.yaml'
                                    - name: create service
                                      ansible.builtin.copy:
                                          dest: '{{ service.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              apiVersion: serving.knative.dev/v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  labels:
                                                      cloud.googleapis.com/location: '{{ SELF.gcp_region }}'
                                                  annotations:
                                                      run.googleapis.com/ingress: all
                                              spec:
                                                  template:
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                                ports:
                                                                    - name: http1
                                                                      containerPort: '{{ SELF.application_port }}'
                                                                env:
                                                                    - name: DB_DIALECT
                                                                      value: '"{{ SELF.DB_DIALECT }}"'
                                                                    - name: DB_NAME
                                                                      value: '"{{ SELF.DB_NAME }}"'
                                                                    - name: DB_USERNAME
                                                                      value: '"{{ SELF.DB_USERNAME }}"'
                                                                    - name: DB_PASSWORD
                                                                      value: '"{{ SELF.DB_PASSWORD }}"'
                                                                    - name: DB_ADDRESS
                                                                      value: '"{{ SELF.DB_ADDRESS }}"'
                                                                    - name: DB_PORT
                                                                      value: '"{{ SELF.DB_PORT }}"'
                                                                    - name: FEATURE_OPTIONAL
                                                                      value: '"{{ SELF.optional_feature }}"'
                                                                    - name: FEATURE_PREMIUM
                                                                      value: '"{{ SELF.premium_feature }}"'
                                    - name: apply service
                                      ansible.builtin.shell: gcloud run services replace {{ service.path }} --quiet
                                      args:
                                          executable: /bin/bash
                                    - name: touch policy
                                      register: policy
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.policy.yaml'
                                    - name: fill policy
                                      ansible.builtin.copy:
                                          dest: '{{ policy.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              bindings:
                                                  - members:
                                                        - allUsers
                                                    role: roles/run.invoker
                                    - name: apply policy
                                      ansible.builtin.shell: gcloud run services set-iam-policy {{ SELF.application_name }} {{ policy.path }} --region {{ SELF.gcp_region }} --quiet
                                      args:
                                          executable: /bin/bash
                                    - name: describe service
                                      register: service_description
                                      ansible.builtin.shell: gcloud run services describe {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet --format=json
                                      args:
                                          executable: /bin/bash
                                    - name: set attributes
                                      set_fact:
                                          application_address: '{{ (service_description.stdout | from_json ).status.url[8:] | trim }}'
                                          application_endpoint: '{{ SELF.application_protocol if SELF.application_protocol.endswith("s") else SELF.application_protocol + "s" }}://{{ (service_description.stdout | from_json ).status.url[8:] | trim }}:443'
                            resultTemplate: |
                                name: SELF
                                attributes:
                                    application_address: '{{ outputs.application_address | trim }}'
                                    application_endpoint: '{{ outputs.application_endpoint | trim }}'
                        outputs:
                            application_address:
                            application_endpoint:
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                      args:
                                          executable: /bin/bash
                                    - name: delete app
                                      ansible.builtin.shell: gcloud run services delete {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet
                                      args:
                                          executable: /bin/bash
    shop.component~service.application#docker.image::terraform@gcp.cloudrun:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_protocol:
                type: string
                default: https
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                    application_endpoint: application_endpoint
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        output:
                            application_address:
                                - value: ${substr(google_cloud_run_v2_service.application.uri, 8, -1)}
                            application_endpoint:
                                - value: '{{ SELF.application_protocol if SELF.application_protocol.endswith("s") else SELF.application_protocol + "s" }}://${substr(google_cloud_run_v2_service.application.uri, 8, -1)}:443'
                        resource:
                            google_cloud_run_v2_service:
                                application:
                                    - ingress: INGRESS_TRAFFIC_ALL
                                      location: '{{ SELF.gcp_region }}'
                                      name: '{{ SELF.application_name }}'
                                      template:
                                          - containers:
                                                - image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                  ports:
                                                      - name: http1
                                                        container_port: '{{ SELF.application_port }}'
                                                  env:
                                                      - name: DB_DIALECT
                                                        value: '"{{ SELF.DB_DIALECT }}"'
                                                      - name: DB_NAME
                                                        value: '"{{ SELF.DB_NAME }}"'
                                                      - name: DB_USERNAME
                                                        value: '"{{ SELF.DB_USERNAME }}"'
                                                      - name: DB_PASSWORD
                                                        value: '"{{ SELF.DB_PASSWORD }}"'
                                                      - name: DB_ADDRESS
                                                        value: '"{{ SELF.DB_ADDRESS }}"'
                                                      - name: DB_PORT
                                                        value: '"{{ SELF.DB_PORT }}"'
                                                      - name: FEATURE_OPTIONAL
                                                        value: '"{{ SELF.optional_feature }}"'
                                                      - name: FEATURE_PREMIUM
                                                        value: '"{{ SELF.premium_feature }}"'
                            google_cloud_run_service_iam_binding:
                                application:
                                    - location: '{{ SELF.gcp_region }}'
                                      members:
                                          - allUsers
                                      role: roles/run.invoker
                                      service: '{{ SELF.application_name }}'
    shop.component~service.application#docker.image::ansible@kubernetes.cluster:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST:
                                    eval: .::k8s_host
                                K8S_AUTH_SSL_CA_CERT:
                                    eval: .::k8s_ca_cert_file
                                K8S_AUTH_CERT_FILE:
                                    eval: .::k8s_client_cert_file
                                K8S_AUTH_KEY_FILE:
                                    eval: .::k8s_client_key_file
                        inputs:
                            playbook:
                                q:
                                    - name: create deployment
                                      kubernetes.core.k8s:
                                          wait: true
                                          definition:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env:
                                                                    - name: PORT
                                                                      value: '"{{ SELF.application_port }}"'
                                                                    - name: DB_DIALECT
                                                                      value: '"{{ SELF.DB_DIALECT }}"'
                                                                    - name: DB_NAME
                                                                      value: '"{{ SELF.DB_NAME }}"'
                                                                    - name: DB_USERNAME
                                                                      value: '"{{ SELF.DB_USERNAME }}"'
                                                                    - name: DB_PASSWORD
                                                                      value: '"{{ SELF.DB_PASSWORD }}"'
                                                                    - name: DB_ADDRESS
                                                                      value: '"{{ SELF.DB_ADDRESS }}"'
                                                                    - name: DB_PORT
                                                                      value: '"{{ SELF.DB_PORT }}"'
                                                                    - name: FEATURE_OPTIONAL
                                                                      value: '"{{ SELF.optional_feature }}"'
                                                                    - name: FEATURE_PREMIUM
                                                                      value: '"{{ SELF.premium_feature }}"'
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                    - name: create service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST:
                                    eval: .::k8s_host
                                K8S_AUTH_SSL_CA_CERT:
                                    eval: .::k8s_ca_cert_file
                                K8S_AUTH_CERT_FILE:
                                    eval: .::k8s_client_cert_file
                                K8S_AUTH_KEY_FILE:
                                    eval: .::k8s_client_key_file
                        inputs:
                            playbook:
                                q:
                                    - name: delete service
                                      kubernetes.core.k8s:
                                          state: absent
                                          api_version: v1
                                          kind: Service
                                          namespace: default
                                          name: '{{ SELF.application_name }}'
                                    - name: delete deployment
                                      kubernetes.core.k8s:
                                          state: absent
                                          api_version: app/v1
                                          kind: Deployment
                                          namespace: default
                                          name: '{{ SELF.application_name }}'
    shop.component~service.application#docker.image::kubernetes@kubernetes.cluster:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.application.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: |
                                              {{ deployment | to_yaml }}
                                              ---
                                              {{ service | to_yaml }}
                                      vars:
                                          deployment:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env:
                                                                    - name: PORT
                                                                      value: '"{{ SELF.application_port }}"'
                                                                    - name: DB_DIALECT
                                                                      value: '"{{ SELF.DB_DIALECT }}"'
                                                                    - name: DB_NAME
                                                                      value: '"{{ SELF.DB_NAME }}"'
                                                                    - name: DB_USERNAME
                                                                      value: '"{{ SELF.DB_USERNAME }}"'
                                                                    - name: DB_PASSWORD
                                                                      value: '"{{ SELF.DB_PASSWORD }}"'
                                                                    - name: DB_ADDRESS
                                                                      value: '"{{ SELF.DB_ADDRESS }}"'
                                                                    - name: DB_PORT
                                                                      value: '"{{ SELF.DB_PORT }}"'
                                                                    - name: FEATURE_OPTIONAL
                                                                      value: '"{{ SELF.optional_feature }}"'
                                                                    - name: FEATURE_PREMIUM
                                                                      value: '"{{ SELF.premium_feature }}"'
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl --server {{ SELF.k8s_host }} --certificate-authority {{ SELF.k8s_ca_cert_file }} --client-certificate {{ SELF.k8s_client_cert_file }} --client-key {{ SELF.k8s_client_key_file }} apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: wait for deployment
                                      ansible.builtin.shell: kubectl --server {{ SELF.k8s_host }} --certificate-authority {{ SELF.k8s_ca_cert_file }} --client-certificate {{ SELF.k8s_client_cert_file }} --client-key {{ SELF.k8s_client_key_file }} rollout status deployment/{{ SELF.application_name }} --timeout 60s
                                      args:
                                          executable: /usr/bin/bash
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.application.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: |
                                              {{ deployment | to_yaml }}
                                              ---
                                              {{ service | to_yaml }}
                                      vars:
                                          deployment:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env:
                                                                    - name: PORT
                                                                      value: '"{{ SELF.application_port }}"'
                                                                    - name: DB_DIALECT
                                                                      value: '"{{ SELF.DB_DIALECT }}"'
                                                                    - name: DB_NAME
                                                                      value: '"{{ SELF.DB_NAME }}"'
                                                                    - name: DB_USERNAME
                                                                      value: '"{{ SELF.DB_USERNAME }}"'
                                                                    - name: DB_PASSWORD
                                                                      value: '"{{ SELF.DB_PASSWORD }}"'
                                                                    - name: DB_ADDRESS
                                                                      value: '"{{ SELF.DB_ADDRESS }}"'
                                                                    - name: DB_PORT
                                                                      value: '"{{ SELF.DB_PORT }}"'
                                                                    - name: FEATURE_OPTIONAL
                                                                      value: '"{{ SELF.optional_feature }}"'
                                                                    - name: FEATURE_PREMIUM
                                                                      value: '"{{ SELF.premium_feature }}"'
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                                    - name: unapply manifest
                                      ansible.builtin.shell: kubectl --server {{ SELF.k8s_host }} --certificate-authority {{ SELF.k8s_ca_cert_file }} --client-certificate {{ SELF.k8s_client_cert_file }} --client-key {{ SELF.k8s_client_key_file }} delete -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
    shop.component~service.application#docker.image::terraform@kubernetes.cluster:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: ${file("{{ SELF.k8s_client_cert_file }}")}
                                  client_key: ${file("{{ SELF.k8s_client_key_file }}")}
                                  cluster_ca_certificate: ${file("{{ SELF.k8s_ca_cert_file }}")}
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_deployment_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}'
                                      spec:
                                          - selector:
                                                - match_labels:
                                                      app: '{{ SELF.application_name }}'
                                            template:
                                                - metadata:
                                                      - labels:
                                                            app: '{{ SELF.application_name }}'
                                                  spec:
                                                      - container:
                                                            - env:
                                                                  - name: PORT
                                                                    value: '"{{ SELF.application_port }}"'
                                                                  - name: DB_DIALECT
                                                                    value: '"{{ SELF.DB_DIALECT }}"'
                                                                  - name: DB_NAME
                                                                    value: '"{{ SELF.DB_NAME }}"'
                                                                  - name: DB_USERNAME
                                                                    value: '"{{ SELF.DB_USERNAME }}"'
                                                                  - name: DB_PASSWORD
                                                                    value: '"{{ SELF.DB_PASSWORD }}"'
                                                                  - name: DB_ADDRESS
                                                                    value: '"{{ SELF.DB_ADDRESS }}"'
                                                                  - name: DB_PORT
                                                                    value: '"{{ SELF.DB_PORT }}"'
                                                                  - name: FEATURE_OPTIONAL
                                                                    value: '"{{ SELF.optional_feature }}"'
                                                                  - name: FEATURE_PREMIUM
                                                                    value: '"{{ SELF.premium_feature }}"'
                                                              image: '{{ ".artifacts::docker_image::file" | eval }}'
                                                              name: '{{ SELF.application_name }}'
                                                              port:
                                                                  - container_port: '{{ SELF.application_port }}'
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}'
                                      spec:
                                          - port:
                                                - name: '{{ SELF.application_protocol }}'
                                                  port: '{{ SELF.application_port }}'
                                                  target_port: '{{ SELF.application_port }}'
                                            selector:
                                                app: '{{ SELF.application_name }}'
                                            type: ClusterIP
    shop.component~service.application#tar.archive::ansible@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              PORT="{{ SELF.application_port }}"
                                              DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                              DB_NAME="{{ SELF.DB_NAME }}"
                                              DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                              DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                              DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                              DB_PORT="{{ SELF.DB_PORT }}"
                                              FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                              FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: create service
                                      ansible.builtin.copy:
                                          dest: /etc/systemd/system/{{ SELF.application_name }}.service
                                          content: |
                                              [Unit]
                                              After=network.target

                                              [Service]
                                              Type=simple
                                              ExecStart=/usr/bin/bash -c ". ./.vintner/start.sh"
                                              WorkingDirectory={{ SELF.application_directory }}
                                              EnvironmentFile={{ SELF.application_directory }}/.env

                                              [Install]
                                              WantedBy=multi-user.target
                                    - name: enable service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped
                                          enabled: 'yes'
                                          daemon_reload: 'yes'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: start service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: started
                                          enabled: 'yes'
                                          daemon_reload: 'yes'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: stop service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: delete systemd service
                                      ansible.builtin.file:
                                          path: /etc/systemd/system/{{ SELF.application_name }}.service
                                          state: absent
                                    - name: reload daemon
                                      ansible.builtin.systemd:
                                          daemon_reload: true
    shop.component~service.application#tar.archive::terraform@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            local_file:
                                tmp_artifact:
                                    source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                    filename: /tmp/artifact-shop.component
                                    count: '{{ (not (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                tmp_service:
                                    content: |
                                        [Unit]
                                        After=network.target

                                        [Service]
                                        Type=simple
                                        ExecStart=/usr/bin/bash -c ". ./.vintner/start.sh"
                                        WorkingDirectory={{ SELF.application_directory }}
                                        EnvironmentFile={{ SELF.application_directory }}/.env

                                        [Install]
                                        WantedBy=multi-user.target
                                    filename: /etc/systemd/system/{{ SELF.application_name }}.service
                                tmp_create:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Create application directory
                                        mkdir -p {{ SELF.application_directory }}

                                        # Create application environment
                                        cat <<EOF > {{ SELF.application_directory }}/.env
                                        PORT="{{ SELF.application_port }}"
                                        DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                        DB_NAME="{{ SELF.DB_NAME }}"
                                        DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                        DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                        DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                        DB_PORT="{{ SELF.DB_PORT }}"
                                        FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                        FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                        EOF>>

                                        # Download deployment artifact if required
                                        if [[ "{{ ".artifacts::*::[.type=tar.archive::file" | eval }}" == http* ]]; then 
                                            wget -O /tmp/artifact-shop.component {{ ".artifacts::*::[.type=tar.archive::file" | eval }} 
                                        fi

                                        # Extract deployment artifact
                                        tar -xzf /tmp/artifact-shop.component -C {{ SELF.application_directory }} {{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}

                                        # Create vintner directory
                                        mkdir -p {{ SELF.application_directory }}/.vintner

                                        # Reload systemd daemon
                                        systemctl daemon-reload

                                        # Enable service 
                                        systemctl enable {{ SELF.application_name }}
                                    filename: /tmp/create-shop.component.sh
                                tmp_configure:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/configure.sh
                                    filename: /tmp/configure-shop.component.sh
                                tmp_start:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Assert operation
                                        if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                            echo 'Management operation "start" missing'
                                            exit 1 
                                        fi

                                        # Start service 
                                        systemctl start {{ SELF.application_name }}
                                    filename: /tmp/start-shop.component.sh
                                tmp_stop:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Assert operation
                                        if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                            echo 'Management operation "stop" missing'
                                            exit 1 
                                        fi

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/stop.sh

                                        # Stop service 
                                        systemctl stop {{ SELF.application_name }}
                                    filename: /tmp/stop-shop.component.sh
                                tmp_delete:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/delete.sh

                                        # Delete application directory
                                        rm -rf "{{ SELF.application_directory }}"

                                        # Delete systemd service 
                                        rm -f /etc/systemd/system/{{ SELF.application_name }}.service

                                        # Reload system daemon
                                        systemctl daemon-reload
                                    filename: /tmp/delete-shop.component.sh
                            terraform_data:
                                local:
                                    - depends_on:
                                          - local_file.tmp_artifact
                                          - local_file.tmp_service
                                          - local_file.tmp_create
                                          - local_file.tmp_configure
                                          - local_file.tmp_start
                                          - local_file.tmp_stop
                                          - local_file.tmp_delete
                                      provisioner:
                                          local-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~service.application#tar.archive::ansible@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              PORT="{{ SELF.application_port }}"
                                              DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                              DB_NAME="{{ SELF.DB_NAME }}"
                                              DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                              DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                              DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                              DB_PORT="{{ SELF.DB_PORT }}"
                                              FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                              FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: create service
                                      ansible.builtin.copy:
                                          dest: /etc/systemd/system/{{ SELF.application_name }}.service
                                          content: |
                                              [Unit]
                                              After=network.target

                                              [Service]
                                              Type=simple
                                              ExecStart=/usr/bin/bash -c ". ./.vintner/start.sh"
                                              WorkingDirectory={{ SELF.application_directory }}
                                              EnvironmentFile={{ SELF.application_directory }}/.env

                                              [Install]
                                              WantedBy=multi-user.target
                                    - name: enable service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped
                                          enabled: 'yes'
                                          daemon_reload: 'yes'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: start service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: started
                                          enabled: 'yes'
                                          daemon_reload: 'yes'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: stop service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: delete systemd service
                                      ansible.builtin.file:
                                          path: /etc/systemd/system/{{ SELF.application_name }}.service
                                          state: absent
                                    - name: reload daemon
                                      ansible.builtin.systemd:
                                          daemon_reload: true
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    shop.component~service.application#tar.archive::terraform@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                                destination: /tmp/artifact-shop.component
                                                count: '{{ (not (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    [Unit]
                                                    After=network.target

                                                    [Service]
                                                    Type=simple
                                                    ExecStart=/usr/bin/bash -c ". ./.vintner/start.sh"
                                                    WorkingDirectory={{ SELF.application_directory }}
                                                    EnvironmentFile={{ SELF.application_directory }}/.env

                                                    [Install]
                                                    WantedBy=multi-user.target
                                                destination: /etc/systemd/system/{{ SELF.application_name }}.service
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    PORT="{{ SELF.application_port }}"
                                                    DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                                    DB_NAME="{{ SELF.DB_NAME }}"
                                                    DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                                    DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                                    DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                                    DB_PORT="{{ SELF.DB_PORT }}"
                                                    FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                                    FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::*::[.type=tar.archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-shop.component {{ ".artifacts::*::[.type=tar.archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    tar -xzf /tmp/artifact-shop.component -C {{ SELF.application_directory }} {{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Reload systemd daemon
                                                    systemctl daemon-reload

                                                    # Enable service 
                                                    systemctl enable {{ SELF.application_name }}
                                                destination: /tmp/create-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Start service 
                                                    systemctl start {{ SELF.application_name }}
                                                destination: /tmp/start-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh

                                                    # Stop service 
                                                    systemctl stop {{ SELF.application_name }}
                                                destination: /tmp/stop-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Delete systemd service 
                                                    rm -f /etc/systemd/system/{{ SELF.application_name }}.service

                                                    # Reload system daemon
                                                    systemctl daemon-reload
                                                destination: /tmp/delete-shop.component.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~service.application#zip.archive::ansible@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::*::[.type=zip.archive]::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::*::[.type=zip.archive]::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              PORT="{{ SELF.application_port }}"
                                              DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                              DB_NAME="{{ SELF.DB_NAME }}"
                                              DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                              DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                              DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                              DB_PORT="{{ SELF.DB_PORT }}"
                                              FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                              FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: create service
                                      ansible.builtin.copy:
                                          dest: /etc/systemd/system/{{ SELF.application_name }}.service
                                          content: |
                                              [Unit]
                                              After=network.target

                                              [Service]
                                              Type=simple
                                              ExecStart=/usr/bin/bash -c ". ./.vintner/start.sh"
                                              WorkingDirectory={{ SELF.application_directory }}
                                              EnvironmentFile={{ SELF.application_directory }}/.env

                                              [Install]
                                              WantedBy=multi-user.target
                                    - name: enable service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped
                                          enabled: 'yes'
                                          daemon_reload: 'yes'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: start service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: started
                                          enabled: 'yes'
                                          daemon_reload: 'yes'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: stop service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: delete systemd service
                                      ansible.builtin.file:
                                          path: /etc/systemd/system/{{ SELF.application_name }}.service
                                          state: absent
                                    - name: reload daemon
                                      ansible.builtin.systemd:
                                          daemon_reload: true
    shop.component~service.application#zip.archive::terraform@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            local_file:
                                tmp_artifact:
                                    source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                    filename: /tmp/artifact-shop.component
                                    count: '{{ (not (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                tmp_service:
                                    content: |
                                        [Unit]
                                        After=network.target

                                        [Service]
                                        Type=simple
                                        ExecStart=/usr/bin/bash -c ". ./.vintner/start.sh"
                                        WorkingDirectory={{ SELF.application_directory }}
                                        EnvironmentFile={{ SELF.application_directory }}/.env

                                        [Install]
                                        WantedBy=multi-user.target
                                    filename: /etc/systemd/system/{{ SELF.application_name }}.service
                                tmp_create:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Create application directory
                                        mkdir -p {{ SELF.application_directory }}

                                        # Create application environment
                                        cat <<EOF > {{ SELF.application_directory }}/.env
                                        PORT="{{ SELF.application_port }}"
                                        DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                        DB_NAME="{{ SELF.DB_NAME }}"
                                        DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                        DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                        DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                        DB_PORT="{{ SELF.DB_PORT }}"
                                        FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                        FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                        EOF>>

                                        # Download deployment artifact if required
                                        if [[ "{{ ".artifacts::*::[.type=zip.archive::file" | eval }}" == http* ]]; then 
                                            wget -O /tmp/artifact-shop.component {{ ".artifacts::*::[.type=zip.archive::file" | eval }} 
                                        fi

                                        # Extract deployment artifact
                                        unzip /tmp/artifact-shop.component -d {{ SELF.application_directory }} {{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}

                                        # Create vintner directory
                                        mkdir -p {{ SELF.application_directory }}/.vintner

                                        # Reload systemd daemon
                                        systemctl daemon-reload

                                        # Enable service 
                                        systemctl enable {{ SELF.application_name }}
                                    filename: /tmp/create-shop.component.sh
                                tmp_configure:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/configure.sh
                                    filename: /tmp/configure-shop.component.sh
                                tmp_start:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Assert operation
                                        if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                            echo 'Management operation "start" missing'
                                            exit 1 
                                        fi

                                        # Start service 
                                        systemctl start {{ SELF.application_name }}
                                    filename: /tmp/start-shop.component.sh
                                tmp_stop:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Assert operation
                                        if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                            echo 'Management operation "stop" missing'
                                            exit 1 
                                        fi

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/stop.sh

                                        # Stop service 
                                        systemctl stop {{ SELF.application_name }}
                                    filename: /tmp/stop-shop.component.sh
                                tmp_delete:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/delete.sh

                                        # Delete application directory
                                        rm -rf "{{ SELF.application_directory }}"

                                        # Delete systemd service 
                                        rm -f /etc/systemd/system/{{ SELF.application_name }}.service

                                        # Reload system daemon
                                        systemctl daemon-reload
                                    filename: /tmp/delete-shop.component.sh
                            terraform_data:
                                local:
                                    - depends_on:
                                          - local_file.tmp_artifact
                                          - local_file.tmp_service
                                          - local_file.tmp_create
                                          - local_file.tmp_configure
                                          - local_file.tmp_start
                                          - local_file.tmp_stop
                                          - local_file.tmp_delete
                                      provisioner:
                                          local-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~service.application#zip.archive::ansible@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::*::[.type=zip.archive]::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::*::[.type=zip.archive]::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              PORT="{{ SELF.application_port }}"
                                              DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                              DB_NAME="{{ SELF.DB_NAME }}"
                                              DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                              DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                              DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                              DB_PORT="{{ SELF.DB_PORT }}"
                                              FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                              FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: create service
                                      ansible.builtin.copy:
                                          dest: /etc/systemd/system/{{ SELF.application_name }}.service
                                          content: |
                                              [Unit]
                                              After=network.target

                                              [Service]
                                              Type=simple
                                              ExecStart=/usr/bin/bash -c ". ./.vintner/start.sh"
                                              WorkingDirectory={{ SELF.application_directory }}
                                              EnvironmentFile={{ SELF.application_directory }}/.env

                                              [Install]
                                              WantedBy=multi-user.target
                                    - name: enable service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped
                                          enabled: 'yes'
                                          daemon_reload: 'yes'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: start service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: started
                                          enabled: 'yes'
                                          daemon_reload: 'yes'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: stop service
                                      ansible.builtin.systemd:
                                          name: '{{ SELF.application_name }}'
                                          state: stopped
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: delete systemd service
                                      ansible.builtin.file:
                                          path: /etc/systemd/system/{{ SELF.application_name }}.service
                                          state: absent
                                    - name: reload daemon
                                      ansible.builtin.systemd:
                                          daemon_reload: true
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    shop.component~service.application#zip.archive::terraform@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                                destination: /tmp/artifact-shop.component
                                                count: '{{ (not (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    [Unit]
                                                    After=network.target

                                                    [Service]
                                                    Type=simple
                                                    ExecStart=/usr/bin/bash -c ". ./.vintner/start.sh"
                                                    WorkingDirectory={{ SELF.application_directory }}
                                                    EnvironmentFile={{ SELF.application_directory }}/.env

                                                    [Install]
                                                    WantedBy=multi-user.target
                                                destination: /etc/systemd/system/{{ SELF.application_name }}.service
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    PORT="{{ SELF.application_port }}"
                                                    DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                                    DB_NAME="{{ SELF.DB_NAME }}"
                                                    DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                                    DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                                    DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                                    DB_PORT="{{ SELF.DB_PORT }}"
                                                    FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                                    FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::*::[.type=zip.archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-shop.component {{ ".artifacts::*::[.type=zip.archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    unzip /tmp/artifact-shop.component -d {{ SELF.application_directory }} {{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Reload systemd daemon
                                                    systemctl daemon-reload

                                                    # Enable service 
                                                    systemctl enable {{ SELF.application_name }}
                                                destination: /tmp/create-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Start service 
                                                    systemctl start {{ SELF.application_name }}
                                                destination: /tmp/start-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh

                                                    # Stop service 
                                                    systemctl stop {{ SELF.application_name }}
                                                destination: /tmp/stop-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Delete systemd service 
                                                    rm -f /etc/systemd/system/{{ SELF.application_name }}.service

                                                    # Reload system daemon
                                                    systemctl daemon-reload
                                                destination: /tmp/delete-shop.component.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~service.application#zip.archive::ansible@gcp.appengine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_protocol:
                type: string
                default: https
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                      args:
                                          executable: /bin/bash
                                    - name: enable GCP AppEngine
                                      ansible.builtin.shell: gcloud app create --region {{ SELF.gcp_region }} --quiet
                                      args:
                                          executable: /bin/bash
                                      register: app_create_command
                                      failed_when:
                                          - "'Created' not in app_create_command.stderr"
                                          - "'already contains' not in app_create_command.stderr"
                                    - name: create working directory
                                      register: directory
                                      ansible.builtin.tempfile:
                                          state: directory
                                    - name: extract deployment artifact in working directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ directory.path }}'
                                    - name: create specification
                                      ansible.builtin.copy:
                                          dest: '{{ directory.path }}/app.yaml'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              runtime: '{{ SELF.application_language }}'
                                              service: '{{ SELF.application_name }}'
                                              instance_class: F1
                                              env_variables:
                                                  DB_DIALECT: '"{{ SELF.DB_DIALECT }}"'
                                                  DB_NAME: '"{{ SELF.DB_NAME }}"'
                                                  DB_USERNAME: '"{{ SELF.DB_USERNAME }}"'
                                                  DB_PASSWORD: '"{{ SELF.DB_PASSWORD }}"'
                                                  DB_ADDRESS: '"{{ SELF.DB_ADDRESS }}"'
                                                  DB_PORT: '"{{ SELF.DB_PORT }}"'
                                                  FEATURE_OPTIONAL: '"{{ SELF.optional_feature }}"'
                                                  FEATURE_PREMIUM: '"{{ SELF.premium_feature }}"'
                                    - name: create app
                                      ansible.builtin.shell: gcloud app deploy {{ directory.path }} --quiet
                                      args:
                                          executable: /bin/bash
                                    - name: browse app
                                      register: browse_app
                                      ansible.builtin.shell: 'gcloud app browse --service {{ SELF.application_name }} --no-launch-browser --quiet '
                                      args:
                                          executable: /bin/bash
                                    - name: set attributes
                                      set_fact:
                                          application_address: '{{ browse_app.stdout[8:] | trim }}'
                                          application_endpoint: '{{ SELF.application_protocol if SELF.application_protocol.endswith("s") else SELF.application_protocol + "s" }}://{{ browse_app.stdout[8:] | trim }}:443'
                            resultTemplate: |
                                name: SELF
                                attributes:
                                    application_address: '{{ outputs.application_address | trim }}'
                                    application_endpoint: '{{ outputs.application_endpoint | trim }}'
                        outputs:
                            application_address:
                            application_endpoint:
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                      args:
                                          executable: /bin/bash
                                    - name: delete app
                                      ansible.builtin.shell: gcloud app services delete {{ SELF.application_name }} --quiet
                                      args:
                                          executable: /bin/bash
    shop.component~service.application#zip.archive::terraform@gcp.appengine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_protocol:
                type: string
                default: https
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                    application_endpoint: application_endpoint
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        output:
                            application_address:
                                - value: '{{ SELF.application_name }}-dot-{{ SELF.gcp_project }}.ey.r.appspot.com'
                            application_endpoint:
                                - value: '{{ SELF.application_protocol if SELF.application_protocol.endswith("s") else SELF.application_protocol + "s" }}://{{ SELF.application_name }}-dot-{{ SELF.gcp_project }}.ey.r.appspot.com:443'
                        resource:
                            google_app_engine_standard_app_version:
                                app:
                                    - delete_service_on_destroy: true
                                      deployment:
                                          - zip:
                                                - source_url: https://storage.googleapis.com/${google_storage_bucket.bucket.name}/${google_storage_bucket_object.object.name}
                                      entrypoint:
                                          - shell: '{{ SELF._management_start }}'
                                      env_variables:
                                          DB_DIALECT: '"{{ SELF.DB_DIALECT }}"'
                                          DB_NAME: '"{{ SELF.DB_NAME }}"'
                                          DB_USERNAME: '"{{ SELF.DB_USERNAME }}"'
                                          DB_PASSWORD: '"{{ SELF.DB_PASSWORD }}"'
                                          DB_ADDRESS: '"{{ SELF.DB_ADDRESS }}"'
                                          DB_PORT: '"{{ SELF.DB_PORT }}"'
                                          FEATURE_OPTIONAL: '"{{ SELF.optional_feature }}"'
                                          FEATURE_PREMIUM: '"{{ SELF.premium_feature }}"'
                                      runtime: '{{ SELF.application_language }}'
                                      service: '{{ SELF.application_name }}'
                                      service_account: ${google_service_account.custom_service_account.email}
                                      version_id: v1
                            google_project_iam_member:
                                gae_api:
                                    - member: serviceAccount:${google_service_account.custom_service_account.email}
                                      project: ${google_service_account.custom_service_account.project}
                                      role: roles/compute.networkUser
                                storage_viewer:
                                    - member: serviceAccount:${google_service_account.custom_service_account.email}
                                      project: ${google_service_account.custom_service_account.project}
                                      role: roles/storage.objectViewer
                            google_service_account:
                                custom_service_account:
                                    - account_id: '{{ SELF.application_name }}-account'
                                      display_name: Custom Service Account
                            google_storage_bucket:
                                bucket:
                                    - location: EU
                                      name: '{{ SELF.gcp_project }}-{{ SELF.application_name }}'
                            google_storage_bucket_object:
                                object:
                                    - bucket: ${google_storage_bucket.bucket.name}
                                      name: object.zip
                                      source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
    shop.component~software.application#apt.package::ansible@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                      args:
                                          executable: /bin/bash
                                      when: '".artifacts::apt_package::script" | eval != ""'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::apt_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::apt_package::key" | eval != ""'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}
                                          filename: '{{ ".artifacts::apt_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::apt_package::source" | eval != ""'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::apt_package::dependencies" | eval != ""'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::apt_package::env" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: absent
    shop.component~software.application#apt.package::terraform@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            local_file:
                                tmp_create:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Run setup script 
                                        if [[ "{{ ".artifacts::apt_package::script" | eval }}" != "" ]]; then 
                                            curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                        fi

                                        # Add apt key
                                        if [[ "{{ ".artifacts::apt_package::key" | eval }}" != "" ]]; then 
                                            curl -1sLf {{ ".artifacts::apt_package::key" | eval }} | gpg --dearmor --yes -o /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                        fi

                                        # Add apt repository
                                        if [[ "{{ ".artifacts::apt_package::source" | eval }}" != "" ]]; then 
                                            echo "deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}" | tee {{ ".artifacts::apt_package::repository" | eval }}
                                        fi

                                        # Update apt cache
                                        apt-get update -y

                                        # Install dependencies
                                        if [[ "{{ ".artifacts::apt_package::dependencies" | eval }}" != "" ]]; then 
                                            apt-get install {{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }} -y
                                        fi

                                        # Install package
                                        {{ ".artifacts::apt_package::env" | eval }} apt-get install {{ ".artifacts::apt_package::file" | eval }} -y

                                        # Create application directory
                                        mkdir -p {{ SELF.application_directory }}

                                        # Create application environment
                                        cat <<EOF > {{ SELF.application_directory }}/.env
                                        PORT="{{ SELF.application_port }}"
                                        DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                        DB_NAME="{{ SELF.DB_NAME }}"
                                        DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                        DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                        DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                        DB_PORT="{{ SELF.DB_PORT }}"
                                        FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                        FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                        EOF>>

                                        # Create vintner directory
                                        mkdir -p {{ SELF.application_directory }}/.vintner

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/create.sh
                                    filename: /tmp/create-shop.component.sh
                                tmp_configure:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/configure.sh
                                    filename: /tmp/configure-shop.component.sh
                                tmp_start:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/start.sh
                                    filename: /tmp/start-shop.component.sh
                                tmp_stop:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/stop.sh
                                    filename: /tmp/stop-shop.component.sh
                                tmp_delete:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/delete.sh

                                        # Delete application directory
                                        rm -rf "{{ SELF.application_directory }}"

                                        # Uninstall package
                                        apt-get uninstall {{ ".artifacts::apt_package::file" | eval }} -y
                                    filename: /tmp/delete-shop.component.sh
                            terraform_data:
                                local:
                                    - provisioner:
                                          depends_on:
                                              - local_file.tmp_artifact
                                              - local_file.tmp_create
                                              - local_file.tmp_configure
                                              - local_file.tmp_start
                                              - local_file.tmp_stop
                                              - local_file.tmp_delete
                                          local-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~software.application#apt.package::ansible@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                      args:
                                          executable: /bin/bash
                                      when: '".artifacts::apt_package::script" | eval != ""'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::apt_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::apt_package::key" | eval != ""'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}
                                          filename: '{{ ".artifacts::apt_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::apt_package::source" | eval != ""'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::apt_package::dependencies" | eval != ""'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::apt_package::env" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    shop.component~software.application#apt.package::terraform@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Run setup script 
                                                    if [[ "{{ ".artifacts::apt_package::script" | eval }}" != "" ]]; then 
                                                        curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                                    fi

                                                    # Add apt key
                                                    if [[ "{{ ".artifacts::apt_package::key" | eval }}" != "" ]]; then 
                                                        curl -1sLf {{ ".artifacts::apt_package::key" | eval }} | gpg --dearmor --yes -o /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                                    fi

                                                    # Add apt repository
                                                    if [[ "{{ ".artifacts::apt_package::source" | eval }}" != "" ]]; then 
                                                        echo "deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}" | tee {{ ".artifacts::apt_package::repository" | eval }}
                                                    fi

                                                    # Update apt cache
                                                    apt-get update -y

                                                    # Install dependencies
                                                    if [[ "{{ ".artifacts::apt_package::dependencies" | eval }}" != "" ]]; then 
                                                        apt-get install {{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }} -y
                                                    fi

                                                    # Install package
                                                    {{ ".artifacts::apt_package::env" | eval }} apt-get install {{ ".artifacts::apt_package::file" | eval }} -y

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    PORT="{{ SELF.application_port }}"
                                                    DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                                    DB_NAME="{{ SELF.DB_NAME }}"
                                                    DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                                    DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                                    DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                                    DB_PORT="{{ SELF.DB_PORT }}"
                                                    FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                                    FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                                    EOF>>

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Uninstall package
                                                    apt-get uninstall {{ ".artifacts::apt_package::file" | eval }} -y
                                                destination: /tmp/delete-shop.component.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~software.application#tar.archive::ansible@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              PORT="{{ SELF.application_port }}"
                                              DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                              DB_NAME="{{ SELF.DB_NAME }}"
                                              DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                              DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                              DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                              DB_PORT="{{ SELF.DB_PORT }}"
                                              FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                              FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
    shop.component~software.application#tar.archive::terraform@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            local_file:
                                tmp_artifact:
                                    source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                    filename: /tmp/artifact-shop.component
                                    count: '{{ (not (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                tmp_create:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Create application directory
                                        mkdir -p {{ SELF.application_directory }}

                                        # Create application environment
                                        cat <<EOF > {{ SELF.application_directory }}/.env
                                        PORT="{{ SELF.application_port }}"
                                        DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                        DB_NAME="{{ SELF.DB_NAME }}"
                                        DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                        DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                        DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                        DB_PORT="{{ SELF.DB_PORT }}"
                                        FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                        FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                        EOF>>

                                        # Download deployment artifact if required
                                        if [[ "{{ ".artifacts::*::[.type=tar.archive::file" | eval }}" == http* ]]; then 
                                            wget -O /tmp/artifact-shop.component {{ ".artifacts::*::[.type=tar.archive::file" | eval }} 
                                        fi

                                        # Extract deployment artifact
                                        tar -xzf /tmp/artifact-shop.component -C {{ SELF.application_directory }} {{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}

                                        # Create vintner directory
                                        mkdir -p {{ SELF.application_directory }}/.vintner

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/create.sh
                                    filename: /tmp/create-shop.component.sh
                                tmp_configure:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/configure.sh
                                    filename: /tmp/configure-shop.component.sh
                                tmp_start:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Assert operation
                                        if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                            echo 'Management operation "start" missing'
                                            exit 1 
                                        fi

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/start.sh
                                    filename: /tmp/start-shop.component.sh
                                tmp_stop:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Assert operation
                                        if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                            echo 'Management operation "stop" missing'
                                            exit 1 
                                        fi

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/stop.sh
                                    filename: /tmp/stop-shop.component.sh
                                tmp_delete:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/delete.sh

                                        # Delete application directory
                                        rm -rf "{{ SELF.application_directory }}"
                                    filename: /tmp/delete-shop.component.sh
                            terraform_data:
                                local:
                                    - depends_on:
                                          - local_file.tmp_artifact
                                          - local_file.tmp_create
                                          - local_file.tmp_configure
                                          - local_file.tmp_start
                                          - local_file.tmp_stop
                                          - local_file.tmp_delete
                                      provisioner:
                                          local-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~software.application#tar.archive::ansible@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              PORT="{{ SELF.application_port }}"
                                              DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                              DB_NAME="{{ SELF.DB_NAME }}"
                                              DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                              DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                              DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                              DB_PORT="{{ SELF.DB_PORT }}"
                                              FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                              FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    shop.component~software.application#tar.archive::terraform@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=tar.archive::file" | eval }}'
                                                destination: /tmp/artifact-shop.component
                                                count: '{{ (not (".artifacts::*::[.type=tar.archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    PORT="{{ SELF.application_port }}"
                                                    DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                                    DB_NAME="{{ SELF.DB_NAME }}"
                                                    DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                                    DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                                    DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                                    DB_PORT="{{ SELF.DB_PORT }}"
                                                    FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                                    FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::*::[.type=tar.archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-shop.component {{ ".artifacts::*::[.type=tar.archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    tar -xzf /tmp/artifact-shop.component -C {{ SELF.application_directory }} {{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-shop.component.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~software.application#zip.archive::ansible@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::*::[.type=zip.archive]::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::*::[.type=zip.archive]::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              PORT="{{ SELF.application_port }}"
                                              DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                              DB_NAME="{{ SELF.DB_NAME }}"
                                              DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                              DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                              DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                              DB_PORT="{{ SELF.DB_PORT }}"
                                              FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                              FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
    shop.component~software.application#zip.archive::terraform@*->local.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            local_file:
                                tmp_artifact:
                                    source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                    filename: /tmp/artifact-shop.component
                                    count: '{{ (not (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                tmp_create:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Create application directory
                                        mkdir -p {{ SELF.application_directory }}

                                        # Create application environment
                                        cat <<EOF > {{ SELF.application_directory }}/.env
                                        PORT="{{ SELF.application_port }}"
                                        DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                        DB_NAME="{{ SELF.DB_NAME }}"
                                        DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                        DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                        DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                        DB_PORT="{{ SELF.DB_PORT }}"
                                        FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                        FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                        EOF>>

                                        # Download deployment artifact if required
                                        if [[ "{{ ".artifacts::*::[.type=zip.archive::file" | eval }}" == http* ]]; then 
                                            wget -O /tmp/artifact-shop.component {{ ".artifacts::*::[.type=zip.archive::file" | eval }} 
                                        fi

                                        # Extract deployment artifact
                                        unzip /tmp/artifact-shop.component -d {{ SELF.application_directory }} {{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}

                                        # Create vintner directory
                                        mkdir -p {{ SELF.application_directory }}/.vintner

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/create.sh
                                    filename: /tmp/create-shop.component.sh
                                tmp_configure:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/configure.sh
                                    filename: /tmp/configure-shop.component.sh
                                tmp_start:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Assert operation
                                        if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                            echo 'Management operation "start" missing'
                                            exit 1 
                                        fi

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/start.sh
                                    filename: /tmp/start-shop.component.sh
                                tmp_stop:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Assert operation
                                        if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                            echo 'Management operation "stop" missing'
                                            exit 1 
                                        fi

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/stop.sh
                                    filename: /tmp/stop-shop.component.sh
                                tmp_delete:
                                    content: |
                                        #!/usr/bin/bash
                                        set -e

                                        # Copy operation
                                        cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                        #!/usr/bin/bash
                                        set -e

                                        {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                        EOF>>
                                        chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                        # Execute operation
                                        cd {{ SELF.application_directory }}
                                        . .env
                                        . .vintner/delete.sh

                                        # Delete application directory
                                        rm -rf "{{ SELF.application_directory }}"
                                    filename: /tmp/delete-shop.component.sh
                            terraform_data:
                                local:
                                    - depends_on:
                                          - local_file.tmp_artifact
                                          - local_file.tmp_create
                                          - local_file.tmp_configure
                                          - local_file.tmp_start
                                          - local_file.tmp_stop
                                          - local_file.tmp_delete
                                      provisioner:
                                          local-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
    shop.component~software.application#zip.archive::ansible@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::*::[.type=zip.archive]::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::*::[.type=zip.archive]::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              PORT="{{ SELF.application_port }}"
                                              DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                              DB_NAME="{{ SELF.DB_NAME }}"
                                              DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                              DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                              DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                              DB_PORT="{{ SELF.DB_PORT }}"
                                              FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                              FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    shop.component~software.application#zip.archive::terraform@*->remote.machine:
        derived_from: shop.component
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{ ".artifacts::*::[.type=zip.archive::file" | eval }}'
                                                destination: /tmp/artifact-shop.component
                                                count: '{{ (not (".artifacts::*::[.type=zip.archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    PORT="{{ SELF.application_port }}"
                                                    DB_DIALECT="{{ SELF.DB_DIALECT }}"
                                                    DB_NAME="{{ SELF.DB_NAME }}"
                                                    DB_USERNAME="{{ SELF.DB_USERNAME }}"
                                                    DB_PASSWORD="{{ SELF.DB_PASSWORD }}"
                                                    DB_ADDRESS="{{ SELF.DB_ADDRESS }}"
                                                    DB_PORT="{{ SELF.DB_PORT }}"
                                                    FEATURE_OPTIONAL="{{ SELF.optional_feature }}"
                                                    FEATURE_PREMIUM="{{ SELF.premium_feature }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::*::[.type=zip.archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-shop.component {{ ".artifacts::*::[.type=zip.archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    unzip /tmp/artifact-shop.component -d {{ SELF.application_directory }} {{ ".artifacts::*::[.type=tar.archive]::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_create) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_configure) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_start) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_stop) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-shop.component.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", SELF._management_delete) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-shop.component.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-shop.component.sh
                                                    - sudo bash /tmp/configure-shop.component.sh
                                                    - sudo bash /tmp/start-shop.component.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-shop.component.sh
                                                    - sudo bash /tmp/delete-shop.component.sh
                                                when: destroy
