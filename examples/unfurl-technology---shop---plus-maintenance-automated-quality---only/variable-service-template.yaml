tosca_definitions_version: tosca_variability_1_0_rc_3

imports:
    - lib/types.yaml

topology_template:
    inputs:
        database_password:
            type: string

        dbms_password:
            type: string

        os_network:
            type: string

        os_ssh_key_name:
            type: string

        os_ssh_user:
            type: string

        os_ssh_key_file:
            type: string

        os_region_name:
            type: string

        os_auth_type:
            type: string

        os_auth_url:
            type: string

        os_identity_api_version:
            type: string

        os_interface:
            type: string

        os_application_credential_id:
            type: string

        os_application_credential_secret:
            type: string

        gcp_region:
            type: string

        gcp_service_account_file:
            type: string

        gcp_project:
            type: string

        k8s_host:
            type: string

        k8s_ca_cert_file:
            type: string

        k8s_client_cert_file:
            type: string

        k8s_client_key_file:
            type: string

    variability:
        inputs:
            env:
                type: string
            tier:
                type: string
            premium_feature:
                type: boolean
            optional_feature:
                type: boolean

    node_templates:
        ###################################################
        #
        # Shop
        #
        ###################################################

        shop:
            type:
                - shop.component: {}
            persistent: true
            properties:
                - application_name: unfurl-technology-shop
                - DB_NAME: unfurl-technology-shop
                - DB_USERNAME: root
                - DB_PASSWORD: {get_input: database_password}
                - DB_DIALECT: mysql
                - DB_ADDRESS: {eval: '.::.requirements[.name=database]::.target::application_address'}
                - DB_PORT: {eval: '.::.requirements[.name=database]::.target::application_port'}
                - premium_feature:
                      value: true
                      conditions: {equal: [{variability_input: premium_feature}, true]}
                - premium_feature:
                      value: false
                      conditions: {not: {equal: [{variability_input: premium_feature}, true]}}
                - optional_feature:
                      value: true
                      conditions: {equal: [{variability_input: optional_feature}, true]}
                - optional_feature:
                      value: false
                      conditions: {not: {equal: [{variability_input: optional_feature}, true]}}
            requirements:
                - database: database
                - host: node_runtime
                - host: gcp_appengine
                - host: kubernetes
            artifacts:
                - container_image:
                      type: container.image
                      file: ghcr.io/opentosca/opentosca-shop-demo@sha256:25ce63b1d399b7d311edc13195abc12d98be859fd32f36f3e96056b32c622b8d
                      conditions: {node_presence: kubernetes}

                - source_archive:
                      type: source.archive
                      file: files/shop.source.zip
                      # TODO: here would be default_alternative with scope by container and not just by name good!
                      conditions: {not: {node_presence: kubernetes}}

        shop_ingress:
            type: ingress
            requirements:
                - application: shop
                - host: kubernetes
                - host: virtual_machine

        ###################################################
        #
        # Database
        #
        ###################################################

        database:
            type: mysql.database
            properties:
                - database_name: unfurl-technology-shop-database
                - database_user: unfurl-technology-shop-user
                - database_password: {get_input: database_password}
            requirements:
                - host: mysql_dbms

        mysql_dbms:
            type: mysql.dbms
            properties:
                - dbms_name: unfurl-technology-shop-dbms
                - dbms_password: {get_input: dbms_password}
            requirements:
                - host: virtual_machine
                - host: kubernetes
                - host: gcp_cloudsql

        ###################################################
        #
        # Virtual Machine
        #
        ###################################################

        node_runtime:
            type: node.runtime
            requirements:
                - host: virtual_machine

        virtual_machine:
            type: virtual.machine
            properties:
                - machine_name: unfurl-technology-shop-vm
                - image: Ubuntu 22.04
                - ports: [80]
                - flavor:
                      value: m1.medium
                      conditions: {equal: [{variability_input: tier}, MEDIUM]}
                - flavor:
                      value: m1.large
                      conditions: {equal: [{variability_input: tier}, LARGE]}
                - network: {get_input: os_network}
                - ssh_user: {get_input: os_ssh_user}
                - ssh_key_name: {get_input: os_ssh_key_name}
                - ssh_key_file: {get_input: os_ssh_key_file}
            requirements:
                - host: openstack

        openstack:
            type: openstack.provider
            conditions: {equal: [{variability_input: env}, STATIC]}
            properties:
                - os_region_name: {get_input: os_region_name}
                - os_auth_type: {get_input: os_auth_type}
                - os_auth_url: {get_input: os_auth_url}
                - os_identity_api_version: {get_input: os_identity_api_version}
                - os_interface: {get_input: os_interface}
                - os_application_credential_id: {get_input: os_application_credential_id}
                - os_application_credential_secret: {get_input: os_application_credential_secret}

        ###################################################
        #
        # GCP
        #
        ###################################################

        gcp_appengine:
            type: gcp.appengine
            requirements:
                - host: gcp_provider
                - build: gcp_cloudbuild
                - reporting: gcp_appenginereporting

        gcp_appenginereporting:
            type: gcp.appenginereporting

        gcp_cloudbuild:
            type: gcp.cloudbuild
            requirements:
                - host: gcp_provider

        gcp_cloudsql:
            type: gcp.cloudsql
            requirements:
                - host: gcp_provider

        gcp_provider:
            type: gcp.provider
            conditions: {equal: [{variability_input: env}, ELASTIC]}
            properties:
                - gcp_region: {get_input: gcp_region}
                - gcp_service_account_file: {get_input: gcp_service_account_file}
                - gcp_project: {get_input: gcp_project}

        ###################################################
        #
        # Kubernetes
        #
        ###################################################

        kubernetes:
            type: kubernetes
            conditions: {equal: [{variability_input: env}, KUBERNETES]}
            properties:
                - k8s_host: {get_input: k8s_host}
                - k8s_ca_cert_file: {get_input: k8s_ca_cert_file}
                - k8s_client_cert_file: {get_input: k8s_client_cert_file}
                - k8s_client_key_file: {get_input: k8s_client_key_file}
