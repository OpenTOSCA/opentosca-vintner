###################################################
#
# WARNING: Do not edit! This file is autogenerated!
#
###################################################

tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - base.yaml

node_types:
    ###################################################
    #
    # Node Runtime
    #
    ###################################################

    node.runtime:
        derived_from: software.runtime
        artifacts:
            software_package:
                type: software.package
                file: nodejs
                properties:
                    setup: https://deb.nodesource.com/setup_18.x

    ###################################################
    #
    # Node Application
    #
    ###################################################

    # expects a source.archive
    node.service.application:
        derived_from: service.application
        metadata:
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
                default: node18
        interfaces:
            management:
                type: Management
                operations:
                    start: npm start
                    configure: npm ci

    ###################################################
    #
    # Python Runtime
    #
    ###################################################

    python.runtime:
        derived_from: software.runtime
        artifacts:
            software_package:
                type: software.package
                file: python-is-python3
                properties:
                    dependencies:
                        type: string
                        default: python3 python3-pip python3-venv

    ###################################################
    #
    # Python Application
    #
    ###################################################

    # expects a source.archive
    python.service.application:
        derived_from: service.application
        metadata:
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
                default: python3
        interfaces:
            management:
                type: Management
                operations:
                    start: python main.py
                    configure: pip install -r requirements.txt

    ###################################################
    #
    # Binary Application
    #
    ###################################################

    binary.service.application:
        derived_from: service.application
        metadata:
            vintner_abstract: 'true'
        interfaces:
            management:
                type: Management
                operations:
                    start: '{{ SELF.application_name }}'

    ###################################################
    #
    # GCP Provider
    #
    ###################################################

    gcp.provider:
        derived_from: cloud.provider
        metadata:
            vintner_abstract: 'true'
        properties:
            _hosting:
                type: string
                default: gcp

            gcp_region:
                type: string

            gcp_service_account_file:
                type: string

            gcp_project:
                type: string

        interfaces:
            Standard:
                operations:
                    create: exit 0
                    delete: exit 0

    ###################################################
    #
    # GCP Service
    #
    ###################################################

    gcp.service:
        derived_from: cloud.service
        metadata:
            vintner_abstract: 'true'
        properties:
            _hosting:
                type: string
                default: gcp

            gcp_service:
                type: string
                # Unfurl does not accept if there is a default only at the child
                default: 'must-be-overridden'

    gcp.cloudrun:
        derived_from: gcp.service
        properties:
            gcp_service:
                type: string
                default: 'run.googleapis.com'

    gcp.cloudsql:
        derived_from: gcp.service
        properties:
            gcp_service:
                type: string
                default: 'sqladmin.googleapis.com'

    gcp.appengine:
        derived_from: gcp.service
        properties:
            gcp_service:
                type: string
                default: 'appengine.googleapis.com'
        requirements:
            - build:
                  capability: tosca.capabilities.Root
                  relationship: tosca.relationships.DependsOn
            - reporting:
                  capability: tosca.capabilities.Root
                  relationship: tosca.relationships.DependsOn

    gcp.appenginereporting:
        derived_from: gcp.service
        properties:
            gcp_service:
                type: string
                default: 'appenginereporting.googleapis.com'

    gcp.cloudbuild:
        derived_from: gcp.service
        properties:
            gcp_service:
                type: string
                default: 'cloudbuild.googleapis.com'

    ###################################################
    #
    # Docker Engine
    #
    ###################################################

    docker.engine:
        derived_from: container.runtime

        properties:
            application_name:
                type: string
                default: docker

            _hosting:
                type: string
                default: docker

        attributes:
            management_address:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::management_address'}

        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host: {eval: '.parent::management_address'}

    ###################################################
    #
    # Kubernetes
    #
    ###################################################

    kubernetes:
        derived_from: cloud.service
        metadata:
            vintner_abstract: 'true'

        properties:
            _hosting:
                type: string
                default: kubernetes

            k8s_host:
                type: string

            k8s_ca_cert_file:
                type: string

            k8s_client_cert_file:
                type: string

            k8s_client_key_file:
                type: string

        capabilities:
            host:
                type: tosca.capabilities.Compute

        interfaces:
            Standard:
                operations:
                    create: exit 0
                    delete: exit 0

    ###################################################
    #
    # Openstack Provider
    #
    ###################################################

    openstack.provider:
        derived_from: cloud.provider
        metadata:
            vintner_abstract: 'true'

        properties:
            _hosting:
                type: string
                default: openstack

            os_region_name:
                type: string

            os_auth_type:
                type: string

            os_auth_url:
                type: string

            os_identity_api_version:
                type: string

            os_interface:
                type: string

            os_application_credential_id:
                type: string

            os_application_credential_secret:
                type: string

        interfaces:
            Standard:
                operations:
                    create: exit 0
                    delete: exit 0

    ###################################################
    #
    # MySQL DBMS
    #
    ###################################################

    mysql.dbms:
        derived_from: relational.dbms

        properties:
            dbms_name:
                type: string

            dbms_image:
                type: string
                default: mysql:5.6

            dbms_password:
                type: string

            dbms_ssl_mode:
                type: string
                default: None

        attributes:
            application_address:
                type: string

            application_port:
                type: integer

            management_address:
                type: string

            management_port:
                type: integer

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    ###################################################
    #
    # MySQL Database
    #
    ###################################################

    mysql.database:
        derived_from: relational.database

        properties:
            database_name:
                type: string

            database_user:
                type: string

            database_password:
                type: string

        attributes:
            application_address:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::application_address'}

            application_port:
                type: integer
                default: {eval: '.::.requirements::[.name=host]::.target::application_port'}

        capabilities:
            database:
                type: tosca.capabilities.Endpoint.Database

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    # [OPENTOSCA_VINTNER_GENERATION_MARK]

    ################################################################
    #
    # WARNING: Do not edit! This following content is autogenerated!
    #
    ################################################################

    node.runtime#source.archive::ansible@virtual.machine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      unarchive:
                                          src: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: []
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_create }}
                                          mode: '0755'
                                      when: SELF._management_create != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_create != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_configure }}
                                          mode: '0755'
                                      when: SELF._management_configure != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_configure != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start is None
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_start }}
                                          mode: '0755'
                                      when: SELF._management_start != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_start != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop is None
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_stop }}
                                          mode: '0755'
                                      when: SELF._management_stop != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_stop != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_delete }}
                                          mode: '0755'
                                      when: SELF._management_delete != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_delete != None
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    node.runtime#software.package::ansible@virtual.machine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::software_package::script" | eval }} | sudo -E bash -
                                      when: '".artifacts::software_package::script" | eval != None'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::software_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::software_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::software_package::key" | eval != None'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::software_package::repository" | eval }}.gpg] {{ ".artifacts::software_package::source" | eval }}
                                          filename: '{{ ".artifacts::software_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::software_package::source" | eval != None'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::software_package::dependencies" | eval != None'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::software_package::file" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_create }}
                                          mode: '0755'
                                      when: SELF._management_create != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_create != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_configure }}
                                          mode: '0755'
                                      when: SELF._management_configure != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_configure != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_start }}
                                          mode: '0755'
                                      when: SELF._management_start != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_start != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_stop }}
                                          mode: '0755'
                                      when: SELF._management_stop != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_stop != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_delete }}
                                          mode: '0755'
                                      when: SELF._management_delete != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_delete != None
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::file | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    node.runtime#container.image::ansible@docker.engine->virtual.machine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: start container
                                      community.docker.docker_container:
                                          name: '{{ SELF.application_name }}'
                                          image: '{{ ".artifacts::container_image::file" | eval }}'
                                          network_mode: host
                                          env: {}
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    node.runtime#container.image::ansible@kubernetes:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST:
                                    eval: .::k8s_host
                                K8S_AUTH_SSL_CA_CERT:
                                    eval: .::k8s_ca_cert_file
                                K8S_AUTH_CERT_FILE:
                                    eval: .::k8s_client_cert_file
                                K8S_AUTH_KEY_FILE:
                                    eval: .::k8s_client_key_file
                        inputs:
                            playbook:
                                q:
                                    - name: create deployment
                                      kubernetes.core.k8s:
                                          wait: true
                                          definition:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env: []
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                    - name: create service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                    delete: exit 0
    node.runtime#container.image::ansible@gcp.cloudrun:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: touch service
                                      register: service
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.service.yaml'
                                    - name: create service
                                      ansible.builtin.copy:
                                          dest: '{{ service.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              apiVersion: serving.knative.dev/v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  labels:
                                                      cloud.googleapis.com/location: '{{ SELF.gcp_region }}'
                                                  annotations:
                                                      run.googleapis.com/ingress: all
                                              spec:
                                                  template:
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                ports:
                                                                    - name: http1
                                                                      containerPort: '{{ SELF.application_port }}'
                                                                env: []
                                    - name: apply service
                                      ansible.builtin.shell: gcloud run services replace {{ service.path }} --quiet
                                    - name: touch policy
                                      register: policy
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.policy.yaml'
                                    - name: fill policy
                                      ansible.builtin.copy:
                                          dest: '{{ policy.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              bindings:
                                                  - members:
                                                        - allUsers
                                                    role: roles/run.invoker
                                    - name: apply policy
                                      ansible.builtin.shell: gcloud run services set-iam-policy {{ SELF.application_name }} {{ policy.path }} --region {{ SELF.gcp_region }} --quiet
                                    - name: describe service
                                      register: service_description
                                      ansible.builtin.shell: gcloud run services describe {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet --format=json
                                    - name: set attributes
                                      set_fact:
                                          application_address: '{{ (service_description.stdout | from_json ).status.url[8:] | trim }}'
                                          application_endpoint: '{{ SELF.application_protocol }}://{{ (service_description.stdout | from_json ).status.url[8:] | trim }}:443'
                            resultTemplate: |
                                name: SELF
                                attributes:
                                    application_address: '{{ outputs.application_address | trim }}'
                                    application_endpoint: '{{ outputs.application_endpoint | trim }}'
                        outputs:
                            application_address:
                            application_endpoint:
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: delete app
                                      ansible.builtin.shell: gcloud run services delete {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet
    node.runtime#source.archive::ansible@gcp.appengine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: enable GCP AppEngine
                                      shell: gcloud app create --region {{ SELF.gcp_region }}
                                      register: app_create_command
                                      failed_when:
                                          - "'Created' not in app_create_command.stderr"
                                          - "'already contains' not in app_create_command.stderr"
                                    - name: create working directory
                                      register: directory
                                      tempfile:
                                          state: directory
                                    - name: extract deployment artifact in working directory
                                      unarchive:
                                          src: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
                                          dest: '{{ directory.path }}'
                                    - name: touch specification
                                      register: specification
                                      ansible.builtin.tempfile:
                                          suffix: '{{ directory.path }}/app.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ specification.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              runtime: '{{ SELF.application_language }}'
                                              service: '{{ SELF.application_name }}'
                                              instance_class: F1
                                              env_variables: {}
                                    - name: create app
                                      shell: gcloud app deploy {{ tempdir_info.path }} --quiet
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: delete app
                                      ansible.builtin.shell: gcloud app services delete {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet
    node.runtime#software.package::terraform@virtual.machine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
        properties: {}
    node.runtime#source.archive::terraform@virtual.machine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
    node.runtime#container.image::terraform@docker.engine->virtual.machine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - docker:
                                        source: kreuzwerker/docker
                                        version: 3.0.2
                        provider:
                            docker:
                                - host: ssh://{{ SELF.os_ssh_user }}@{{ SELF.os_ssh_host }}:22
                                  ssh_opts:
                                      - '-i'
                                      - '{{ SELF.os_ssh_key_file }}'
                                      - '-o'
                                      - IdentitiesOnly=yes
                                      - '-o'
                                      - BatchMode=yes
                                      - '-o'
                                      - UserKnownHostsFile=/dev/null
                                      - '-o'
                                      - StrictHostKeyChecking=no
                        resource:
                            docker_container:
                                application:
                                    - env: []
                                      image: ${docker_image.image.image_id}
                                      name: '{{ SELF.application_name }}'
                                      network_mode: host
                            docker_image:
                                image:
                                    - name: '{{ ".artifacts::container_image::file" | eval }}'
    node.runtime#container.image::terraform@kubernetes:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: ${file("{{ SELF.k8s_client_cert_file }}")}
                                  client_key: ${file("{{ SELF.k8s_client_key_file }}")}
                                  cluster_ca_certificate: ${file("{{ SELF.k8s_ca_cert_file }}")}
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_deployment_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}'
                                      spec:
                                          - selector:
                                                - match_labels:
                                                      app: '{{ SELF.application_name }}'
                                            template:
                                                - metadata:
                                                      - labels:
                                                            app: '{{ SELF.application_name }}'
                                                  spec:
                                                      - container:
                                                            - env: []
                                                              image: '{{ ".artifacts::container_image::file" | eval }}'
                                                              name: '{{ SELF.application_name }}'
                                                              port:
                                                                  - container_port: '{{ SELF.application_port }}'
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}'
                                      spec:
                                          - port:
                                                - name: '{{ SELF.application_protocol }}'
                                                  port: '{{ SELF.application_port }}'
                                                  target_port: '{{ SELF.application_port }}'
                                            selector:
                                                app: '{{ SELF.application_name }}'
                                            type: ClusterIP
    node.runtime#container.image::terraform@gcp.cloudrun:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                    application_endpoint: application_endpoint
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        output:
                            application_address:
                                - value: ${substr(google_cloud_run_v2_service.application.uri, 8, -1)}
                            application_endpoint:
                                - value: '{{ SELF.application_protocol }}://${substr(google_cloud_run_v2_service.application.uri, 8, -1)}:443'
                        resource:
                            google_cloud_run_v2_service:
                                application:
                                    - ingress: INGRESS_TRAFFIC_ALL
                                      location: '{{ SELF.gcp_region }}'
                                      name: '{{ SELF.application_name }}'
                                      template:
                                          - containers:
                                                - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                  ports:
                                                      - name: http1
                                                        container_port: '{{ SELF.application_port }}'
                                                  env: []
                            google_cloud_run_service_iam_binding:
                                application:
                                    - location: '{{ SELF.gcp_region }}'
                                      members:
                                          - allUsers
                                      role: roles/run.invoker
                                      service: '{{ SELF.application_name }}'
    node.runtime#source.archive::terraform@gcp.appengine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                    application_endpoint: application_endpoint
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_app_engine_standard_app_version:
                                app:
                                    - delete_service_on_destroy: true
                                      deployment:
                                          - zip:
                                                - source_url: https://storage.googleapis.com/${google_storage_bucket.bucket.name}/${google_storage_bucket_object.object.name}
                                      entrypoint:
                                          - shell: '{{ SELF._management_start }}'
                                      env_variable: {}
                                      runtime: '{{ SELF.application_language }}'
                                      service: '{{ SELF.application_name }}'
                                      service_account: ${google_service_account.custom_service_account.email}
                                      version_id: v1
                            google_project_iam_member:
                                gae_api:
                                    - member: serviceAccount:${google_service_account.custom_service_account.email}
                                      project: ${google_service_account.custom_service_account.project}
                                      role: roles/compute.networkUser
                                storage_viewer:
                                    - member: serviceAccount:${google_service_account.custom_service_account.email}
                                      project: ${google_service_account.custom_service_account.project}
                                      role: roles/storage.objectViewer
                            google_service_account:
                                custom_service_account:
                                    - account_id: '{{ SELF.application_name }}-account'
                                      display_name: Custom Service Account
                            google_storage_bucket:
                                bucket:
                                    - location: EU
                                      name: '{{ SELF.gcp_project }}-{{ SELF.application_name }}'
                            google_storage_bucket_object:
                                object:
                                    - bucket: ${google_storage_bucket.bucket.name}
                                      name: object.zip
                                      source: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
    node.runtime#container.image::kubernetes@kubernetes:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.application.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: |
                                              {{ deployment | to_yaml }}
                                              ---
                                              {{ service | to_yaml }}
                                      vars:
                                          deployment:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env: []
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: wait for deployment
                                      ansible.builtin.shell: kubectl rollout status deployment/{{ SELF.application_name }} --timeout 60s
                                      args:
                                          executable: /usr/bin/bash
                    delete: exit 0
    node.runtime#container.image::docker@docker.engine->virtual.machine:
        derived_from: node.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.application_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.application_name }}'
                                                      image: '{{ ".artifacts::container_image::file" | eval }}'
                                                      network_mode: host
                                                      environment: {}
                                    - name: apply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    python.runtime#source.archive::ansible@virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      unarchive:
                                          src: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: []
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_create }}
                                          mode: '0755'
                                      when: SELF._management_create != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_create != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_configure }}
                                          mode: '0755'
                                      when: SELF._management_configure != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_configure != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start is None
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_start }}
                                          mode: '0755'
                                      when: SELF._management_start != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_start != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop is None
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_stop }}
                                          mode: '0755'
                                      when: SELF._management_stop != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_stop != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_delete }}
                                          mode: '0755'
                                      when: SELF._management_delete != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_delete != None
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    python.runtime#software.package::ansible@virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::software_package::script" | eval }} | sudo -E bash -
                                      when: '".artifacts::software_package::script" | eval != None'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::software_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::software_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::software_package::key" | eval != None'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::software_package::repository" | eval }}.gpg] {{ ".artifacts::software_package::source" | eval }}
                                          filename: '{{ ".artifacts::software_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::software_package::source" | eval != None'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::software_package::dependencies" | eval != None'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::software_package::file" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_create }}
                                          mode: '0755'
                                      when: SELF._management_create != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_create != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_configure }}
                                          mode: '0755'
                                      when: SELF._management_configure != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_configure != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_start }}
                                          mode: '0755'
                                      when: SELF._management_start != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_start != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_stop }}
                                          mode: '0755'
                                      when: SELF._management_stop != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_stop != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_delete }}
                                          mode: '0755'
                                      when: SELF._management_delete != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_delete != None
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::file | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    python.runtime#container.image::ansible@docker.engine->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: start container
                                      community.docker.docker_container:
                                          name: '{{ SELF.application_name }}'
                                          image: '{{ ".artifacts::container_image::file" | eval }}'
                                          network_mode: host
                                          env: {}
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    python.runtime#container.image::ansible@kubernetes:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST:
                                    eval: .::k8s_host
                                K8S_AUTH_SSL_CA_CERT:
                                    eval: .::k8s_ca_cert_file
                                K8S_AUTH_CERT_FILE:
                                    eval: .::k8s_client_cert_file
                                K8S_AUTH_KEY_FILE:
                                    eval: .::k8s_client_key_file
                        inputs:
                            playbook:
                                q:
                                    - name: create deployment
                                      kubernetes.core.k8s:
                                          wait: true
                                          definition:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env: []
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                    - name: create service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                    delete: exit 0
    python.runtime#container.image::ansible@gcp.cloudrun:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: touch service
                                      register: service
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.service.yaml'
                                    - name: create service
                                      ansible.builtin.copy:
                                          dest: '{{ service.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              apiVersion: serving.knative.dev/v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  labels:
                                                      cloud.googleapis.com/location: '{{ SELF.gcp_region }}'
                                                  annotations:
                                                      run.googleapis.com/ingress: all
                                              spec:
                                                  template:
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                ports:
                                                                    - name: http1
                                                                      containerPort: '{{ SELF.application_port }}'
                                                                env: []
                                    - name: apply service
                                      ansible.builtin.shell: gcloud run services replace {{ service.path }} --quiet
                                    - name: touch policy
                                      register: policy
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.policy.yaml'
                                    - name: fill policy
                                      ansible.builtin.copy:
                                          dest: '{{ policy.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              bindings:
                                                  - members:
                                                        - allUsers
                                                    role: roles/run.invoker
                                    - name: apply policy
                                      ansible.builtin.shell: gcloud run services set-iam-policy {{ SELF.application_name }} {{ policy.path }} --region {{ SELF.gcp_region }} --quiet
                                    - name: describe service
                                      register: service_description
                                      ansible.builtin.shell: gcloud run services describe {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet --format=json
                                    - name: set attributes
                                      set_fact:
                                          application_address: '{{ (service_description.stdout | from_json ).status.url[8:] | trim }}'
                                          application_endpoint: '{{ SELF.application_protocol }}://{{ (service_description.stdout | from_json ).status.url[8:] | trim }}:443'
                            resultTemplate: |
                                name: SELF
                                attributes:
                                    application_address: '{{ outputs.application_address | trim }}'
                                    application_endpoint: '{{ outputs.application_endpoint | trim }}'
                        outputs:
                            application_address:
                            application_endpoint:
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: delete app
                                      ansible.builtin.shell: gcloud run services delete {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet
    python.runtime#source.archive::ansible@gcp.appengine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: enable GCP AppEngine
                                      shell: gcloud app create --region {{ SELF.gcp_region }}
                                      register: app_create_command
                                      failed_when:
                                          - "'Created' not in app_create_command.stderr"
                                          - "'already contains' not in app_create_command.stderr"
                                    - name: create working directory
                                      register: directory
                                      tempfile:
                                          state: directory
                                    - name: extract deployment artifact in working directory
                                      unarchive:
                                          src: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
                                          dest: '{{ directory.path }}'
                                    - name: touch specification
                                      register: specification
                                      ansible.builtin.tempfile:
                                          suffix: '{{ directory.path }}/app.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ specification.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              runtime: '{{ SELF.application_language }}'
                                              service: '{{ SELF.application_name }}'
                                              instance_class: F1
                                              env_variables: {}
                                    - name: create app
                                      shell: gcloud app deploy {{ tempdir_info.path }} --quiet
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: delete app
                                      ansible.builtin.shell: gcloud app services delete {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet
    python.runtime#software.package::terraform@virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
        properties: {}
    python.runtime#source.archive::terraform@virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
    python.runtime#container.image::terraform@docker.engine->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - docker:
                                        source: kreuzwerker/docker
                                        version: 3.0.2
                        provider:
                            docker:
                                - host: ssh://{{ SELF.os_ssh_user }}@{{ SELF.os_ssh_host }}:22
                                  ssh_opts:
                                      - '-i'
                                      - '{{ SELF.os_ssh_key_file }}'
                                      - '-o'
                                      - IdentitiesOnly=yes
                                      - '-o'
                                      - BatchMode=yes
                                      - '-o'
                                      - UserKnownHostsFile=/dev/null
                                      - '-o'
                                      - StrictHostKeyChecking=no
                        resource:
                            docker_container:
                                application:
                                    - env: []
                                      image: ${docker_image.image.image_id}
                                      name: '{{ SELF.application_name }}'
                                      network_mode: host
                            docker_image:
                                image:
                                    - name: '{{ ".artifacts::container_image::file" | eval }}'
    python.runtime#container.image::terraform@kubernetes:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: ${file("{{ SELF.k8s_client_cert_file }}")}
                                  client_key: ${file("{{ SELF.k8s_client_key_file }}")}
                                  cluster_ca_certificate: ${file("{{ SELF.k8s_ca_cert_file }}")}
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_deployment_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}'
                                      spec:
                                          - selector:
                                                - match_labels:
                                                      app: '{{ SELF.application_name }}'
                                            template:
                                                - metadata:
                                                      - labels:
                                                            app: '{{ SELF.application_name }}'
                                                  spec:
                                                      - container:
                                                            - env: []
                                                              image: '{{ ".artifacts::container_image::file" | eval }}'
                                                              name: '{{ SELF.application_name }}'
                                                              port:
                                                                  - container_port: '{{ SELF.application_port }}'
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}'
                                      spec:
                                          - port:
                                                - name: '{{ SELF.application_protocol }}'
                                                  port: '{{ SELF.application_port }}'
                                                  target_port: '{{ SELF.application_port }}'
                                            selector:
                                                app: '{{ SELF.application_name }}'
                                            type: ClusterIP
    python.runtime#container.image::terraform@gcp.cloudrun:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                    application_endpoint: application_endpoint
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        output:
                            application_address:
                                - value: ${substr(google_cloud_run_v2_service.application.uri, 8, -1)}
                            application_endpoint:
                                - value: '{{ SELF.application_protocol }}://${substr(google_cloud_run_v2_service.application.uri, 8, -1)}:443'
                        resource:
                            google_cloud_run_v2_service:
                                application:
                                    - ingress: INGRESS_TRAFFIC_ALL
                                      location: '{{ SELF.gcp_region }}'
                                      name: '{{ SELF.application_name }}'
                                      template:
                                          - containers:
                                                - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                  ports:
                                                      - name: http1
                                                        container_port: '{{ SELF.application_port }}'
                                                  env: []
                            google_cloud_run_service_iam_binding:
                                application:
                                    - location: '{{ SELF.gcp_region }}'
                                      members:
                                          - allUsers
                                      role: roles/run.invoker
                                      service: '{{ SELF.application_name }}'
    python.runtime#source.archive::terraform@gcp.appengine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                    application_endpoint: application_endpoint
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_app_engine_standard_app_version:
                                app:
                                    - delete_service_on_destroy: true
                                      deployment:
                                          - zip:
                                                - source_url: https://storage.googleapis.com/${google_storage_bucket.bucket.name}/${google_storage_bucket_object.object.name}
                                      entrypoint:
                                          - shell: '{{ SELF._management_start }}'
                                      env_variable: {}
                                      runtime: '{{ SELF.application_language }}'
                                      service: '{{ SELF.application_name }}'
                                      service_account: ${google_service_account.custom_service_account.email}
                                      version_id: v1
                            google_project_iam_member:
                                gae_api:
                                    - member: serviceAccount:${google_service_account.custom_service_account.email}
                                      project: ${google_service_account.custom_service_account.project}
                                      role: roles/compute.networkUser
                                storage_viewer:
                                    - member: serviceAccount:${google_service_account.custom_service_account.email}
                                      project: ${google_service_account.custom_service_account.project}
                                      role: roles/storage.objectViewer
                            google_service_account:
                                custom_service_account:
                                    - account_id: '{{ SELF.application_name }}-account'
                                      display_name: Custom Service Account
                            google_storage_bucket:
                                bucket:
                                    - location: EU
                                      name: '{{ SELF.gcp_project }}-{{ SELF.application_name }}'
                            google_storage_bucket_object:
                                object:
                                    - bucket: ${google_storage_bucket.bucket.name}
                                      name: object.zip
                                      source: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
    python.runtime#container.image::kubernetes@kubernetes:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.application.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: |
                                              {{ deployment | to_yaml }}
                                              ---
                                              {{ service | to_yaml }}
                                      vars:
                                          deployment:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env: []
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: wait for deployment
                                      ansible.builtin.shell: kubectl rollout status deployment/{{ SELF.application_name }} --timeout 60s
                                      args:
                                          executable: /usr/bin/bash
                    delete: exit 0
    python.runtime#container.image::docker@docker.engine->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.application_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.application_name }}'
                                                      image: '{{ ".artifacts::container_image::file" | eval }}'
                                                      network_mode: host
                                                      environment: {}
                                    - name: apply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    gcp.cloudrun::ansible:
        derived_from: gcp.cloudrun
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                    delete: exit 0
    gcp.cloudrun::terraform:
        derived_from: gcp.cloudrun
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    gcp.cloudsql::ansible:
        derived_from: gcp.cloudsql
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                    delete: exit 0
    gcp.cloudsql::terraform:
        derived_from: gcp.cloudsql
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    gcp.appengine::ansible:
        derived_from: gcp.appengine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                    delete: exit 0
    gcp.appengine::terraform:
        derived_from: gcp.appengine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    gcp.appenginereporting::ansible:
        derived_from: gcp.appenginereporting
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                    delete: exit 0
    gcp.appenginereporting::terraform:
        derived_from: gcp.appenginereporting
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    gcp.cloudbuild::ansible:
        derived_from: gcp.cloudbuild
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                    delete: exit 0
    gcp.cloudbuild::terraform:
        derived_from: gcp.cloudbuild
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    docker.engine#source.archive::ansible@virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      unarchive:
                                          src: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content:
                                              - APPLICATION_NAME="{{ SELF.application_name }}"
                                              - _HOSTING="{{ SELF._hosting }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_create }}
                                          mode: '0755'
                                      when: SELF._management_create != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_create != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_configure }}
                                          mode: '0755'
                                      when: SELF._management_configure != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_configure != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start is None
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_start }}
                                          mode: '0755'
                                      when: SELF._management_start != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_start != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop is None
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_stop }}
                                          mode: '0755'
                                      when: SELF._management_stop != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_stop != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_delete }}
                                          mode: '0755'
                                      when: SELF._management_delete != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_delete != None
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    docker.engine#software.package::ansible@virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::software_package::script" | eval }} | sudo -E bash -
                                      when: '".artifacts::software_package::script" | eval != None'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::software_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::software_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::software_package::key" | eval != None'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::software_package::repository" | eval }}.gpg] {{ ".artifacts::software_package::source" | eval }}
                                          filename: '{{ ".artifacts::software_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::software_package::source" | eval != None'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::software_package::dependencies" | eval != None'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::software_package::file" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_create }}
                                          mode: '0755'
                                      when: SELF._management_create != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_create != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_configure }}
                                          mode: '0755'
                                      when: SELF._management_configure != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_configure != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_start }}
                                          mode: '0755'
                                      when: SELF._management_start != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_start != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_stop }}
                                          mode: '0755'
                                      when: SELF._management_stop != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_stop != None
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |
                                              #! /usr/bin/bash
                                              set -e
    
                                              {{ SELF._management_delete }}
                                          mode: '0755'
                                      when: SELF._management_delete != None
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                      when: SELF._management_delete != None
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::software_package::file | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    docker.engine#container.image::ansible@docker.engine->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: start container
                                      community.docker.docker_container:
                                          name: '{{ SELF.application_name }}'
                                          image: '{{ ".artifacts::container_image::file" | eval }}'
                                          network_mode: host
                                          env:
                                              APPLICATION_NAME: '"{{ SELF.application_name }}"'
                                              _HOSTING: '"{{ SELF._hosting }}"'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    docker.engine#container.image::ansible@kubernetes:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST:
                                    eval: .::k8s_host
                                K8S_AUTH_SSL_CA_CERT:
                                    eval: .::k8s_ca_cert_file
                                K8S_AUTH_CERT_FILE:
                                    eval: .::k8s_client_cert_file
                                K8S_AUTH_KEY_FILE:
                                    eval: .::k8s_client_key_file
                        inputs:
                            playbook:
                                q:
                                    - name: create deployment
                                      kubernetes.core.k8s:
                                          wait: true
                                          definition:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env:
                                                                    - name: APPLICATION_NAME
                                                                      value: '"{{ SELF.application_name }}"'
                                                                    - name: _HOSTING
                                                                      value: '"{{ SELF._hosting }}"'
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                    - name: create service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                    delete: exit 0
    docker.engine#container.image::ansible@gcp.cloudrun:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: touch service
                                      register: service
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.service.yaml'
                                    - name: create service
                                      ansible.builtin.copy:
                                          dest: '{{ service.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              apiVersion: serving.knative.dev/v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  labels:
                                                      cloud.googleapis.com/location: '{{ SELF.gcp_region }}'
                                                  annotations:
                                                      run.googleapis.com/ingress: all
                                              spec:
                                                  template:
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                ports:
                                                                    - name: http1
                                                                      containerPort: '{{ SELF.application_port }}'
                                                                env:
                                                                    - name: APPLICATION_NAME
                                                                      value: '"{{ SELF.application_name }}"'
                                                                    - name: _HOSTING
                                                                      value: '"{{ SELF._hosting }}"'
                                    - name: apply service
                                      ansible.builtin.shell: gcloud run services replace {{ service.path }} --quiet
                                    - name: touch policy
                                      register: policy
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.policy.yaml'
                                    - name: fill policy
                                      ansible.builtin.copy:
                                          dest: '{{ policy.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              bindings:
                                                  - members:
                                                        - allUsers
                                                    role: roles/run.invoker
                                    - name: apply policy
                                      ansible.builtin.shell: gcloud run services set-iam-policy {{ SELF.application_name }} {{ policy.path }} --region {{ SELF.gcp_region }} --quiet
                                    - name: describe service
                                      register: service_description
                                      ansible.builtin.shell: gcloud run services describe {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet --format=json
                                    - name: set attributes
                                      set_fact:
                                          application_address: '{{ (service_description.stdout | from_json ).status.url[8:] | trim }}'
                                          application_endpoint: '{{ SELF.application_protocol }}://{{ (service_description.stdout | from_json ).status.url[8:] | trim }}:443'
                            resultTemplate: |
                                name: SELF
                                attributes:
                                    application_address: '{{ outputs.application_address | trim }}'
                                    application_endpoint: '{{ outputs.application_endpoint | trim }}'
                        outputs:
                            application_address:
                            application_endpoint:
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: delete app
                                      ansible.builtin.shell: gcloud run services delete {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet
    docker.engine#source.archive::ansible@gcp.appengine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: enable GCP AppEngine
                                      shell: gcloud app create --region {{ SELF.gcp_region }}
                                      register: app_create_command
                                      failed_when:
                                          - "'Created' not in app_create_command.stderr"
                                          - "'already contains' not in app_create_command.stderr"
                                    - name: create working directory
                                      register: directory
                                      tempfile:
                                          state: directory
                                    - name: extract deployment artifact in working directory
                                      unarchive:
                                          src: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
                                          dest: '{{ directory.path }}'
                                    - name: touch specification
                                      register: specification
                                      ansible.builtin.tempfile:
                                          suffix: '{{ directory.path }}/app.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ specification.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              runtime: '{{ SELF.application_language }}'
                                              service: '{{ SELF.application_name }}'
                                              instance_class: F1
                                              env_variables:
                                                  APPLICATION_NAME: '"{{ SELF.application_name }}"'
                                                  _HOSTING: '"{{ SELF._hosting }}"'
                                    - name: create app
                                      shell: gcloud app deploy {{ tempdir_info.path }} --quiet
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: delete app
                                      ansible.builtin.shell: gcloud app services delete {{ SELF.application_name }} --region {{ SELF.gcp_region }} --quiet
    docker.engine::ansible@virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install docker
                                      ansible.builtin.shell: curl -sSL https://get.docker.com | sh
                                      args:
                                          executable: /usr/bin/bash
                                    - name: add docker group
                                      ansible.builtin.shell: groupadd -f docker
                                      args:
                                          executable: /usr/bin/bash
                                    - name: add user to docker group
                                      ansible.builtin.shell: usermod -aG docker {{ SELF.os_ssh_user }}
                                      args:
                                          executable: /usr/bin/bash
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    docker.engine#software.package::terraform@virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
        properties: {}
    docker.engine#source.archive::terraform@virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
    docker.engine#container.image::terraform@docker.engine->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - docker:
                                        source: kreuzwerker/docker
                                        version: 3.0.2
                        provider:
                            docker:
                                - host: ssh://{{ SELF.os_ssh_user }}@{{ SELF.os_ssh_host }}:22
                                  ssh_opts:
                                      - '-i'
                                      - '{{ SELF.os_ssh_key_file }}'
                                      - '-o'
                                      - IdentitiesOnly=yes
                                      - '-o'
                                      - BatchMode=yes
                                      - '-o'
                                      - UserKnownHostsFile=/dev/null
                                      - '-o'
                                      - StrictHostKeyChecking=no
                        resource:
                            docker_container:
                                application:
                                    - env:
                                          - APPLICATION_NAME={{ SELF.application_name }}
                                          - _HOSTING={{ SELF._hosting }}
                                      image: ${docker_image.image.image_id}
                                      name: '{{ SELF.application_name }}'
                                      network_mode: host
                            docker_image:
                                image:
                                    - name: '{{ ".artifacts::container_image::file" | eval }}'
    docker.engine#container.image::terraform@kubernetes:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: ${file("{{ SELF.k8s_client_cert_file }}")}
                                  client_key: ${file("{{ SELF.k8s_client_key_file }}")}
                                  cluster_ca_certificate: ${file("{{ SELF.k8s_ca_cert_file }}")}
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_deployment_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}'
                                      spec:
                                          - selector:
                                                - match_labels:
                                                      app: '{{ SELF.application_name }}'
                                            template:
                                                - metadata:
                                                      - labels:
                                                            app: '{{ SELF.application_name }}'
                                                  spec:
                                                      - container:
                                                            - env:
                                                                  - name: APPLICATION_NAME
                                                                    value: '"{{ SELF.application_name }}"'
                                                                  - name: _HOSTING
                                                                    value: '"{{ SELF._hosting }}"'
                                                              image: '{{ ".artifacts::container_image::file" | eval }}'
                                                              name: '{{ SELF.application_name }}'
                                                              port:
                                                                  - container_port: '{{ SELF.application_port }}'
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.application_name }}'
                                      spec:
                                          - port:
                                                - name: '{{ SELF.application_protocol }}'
                                                  port: '{{ SELF.application_port }}'
                                                  target_port: '{{ SELF.application_port }}'
                                            selector:
                                                app: '{{ SELF.application_name }}'
                                            type: ClusterIP
    docker.engine#container.image::terraform@gcp.cloudrun:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                    application_endpoint: application_endpoint
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        output:
                            application_address:
                                - value: ${substr(google_cloud_run_v2_service.application.uri, 8, -1)}
                            application_endpoint:
                                - value: '{{ SELF.application_protocol }}://${substr(google_cloud_run_v2_service.application.uri, 8, -1)}:443'
                        resource:
                            google_cloud_run_v2_service:
                                application:
                                    - ingress: INGRESS_TRAFFIC_ALL
                                      location: '{{ SELF.gcp_region }}'
                                      name: '{{ SELF.application_name }}'
                                      template:
                                          - containers:
                                                - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                  ports:
                                                      - name: http1
                                                        container_port: '{{ SELF.application_port }}'
                                                  env:
                                                      - name: APPLICATION_NAME
                                                        value: '"{{ SELF.application_name }}"'
                                                      - name: _HOSTING
                                                        value: '"{{ SELF._hosting }}"'
                            google_cloud_run_service_iam_binding:
                                application:
                                    - location: '{{ SELF.gcp_region }}'
                                      members:
                                          - allUsers
                                      role: roles/run.invoker
                                      service: '{{ SELF.application_name }}'
    docker.engine#source.archive::terraform@gcp.appengine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                    application_endpoint: application_endpoint
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_app_engine_standard_app_version:
                                app:
                                    - delete_service_on_destroy: true
                                      deployment:
                                          - zip:
                                                - source_url: https://storage.googleapis.com/${google_storage_bucket.bucket.name}/${google_storage_bucket_object.object.name}
                                      entrypoint:
                                          - shell: '{{ SELF._management_start }}'
                                      env_variable:
                                          APPLICATION_NAME: '"{{ SELF.application_name }}"'
                                          _HOSTING: '"{{ SELF._hosting }}"'
                                      runtime: '{{ SELF.application_language }}'
                                      service: '{{ SELF.application_name }}'
                                      service_account: ${google_service_account.custom_service_account.email}
                                      version_id: v1
                            google_project_iam_member:
                                gae_api:
                                    - member: serviceAccount:${google_service_account.custom_service_account.email}
                                      project: ${google_service_account.custom_service_account.project}
                                      role: roles/compute.networkUser
                                storage_viewer:
                                    - member: serviceAccount:${google_service_account.custom_service_account.email}
                                      project: ${google_service_account.custom_service_account.project}
                                      role: roles/storage.objectViewer
                            google_service_account:
                                custom_service_account:
                                    - account_id: '{{ SELF.application_name }}-account'
                                      display_name: Custom Service Account
                            google_storage_bucket:
                                bucket:
                                    - location: EU
                                      name: '{{ SELF.gcp_project }}-{{ SELF.application_name }}'
                            google_storage_bucket_object:
                                object:
                                    - bucket: ${google_storage_bucket.bucket.name}
                                      name: object.zip
                                      source: '{{ ''project'' | get_dir }}/ensemble/{{  ".artifacts::source_archive::file | eval }}'
    docker.engine::terraform@virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                docker:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          remote-exec:
                                              - inline:
                                                    - curl -sSL https://get.docker.com | sudo sh
                                                    - sudo groupadd -f docker
                                                    - sudo usermod -aG docker {{ SELF.os_ssh_user }}
    docker.engine#container.image::kubernetes@kubernetes:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        attributes:
            application_address:
                type: string
                default:
                    eval: .::application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.application.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: |
                                              {{ deployment | to_yaml }}
                                              ---
                                              {{ service | to_yaml }}
                                      vars:
                                          deployment:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.application_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.application_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ ".artifacts::container_image::file" | eval }}'
                                                                name: '{{ SELF.application_name }}'
                                                                env:
                                                                    - name: APPLICATION_NAME
                                                                      value: '"{{ SELF.application_name }}"'
                                                                    - name: _HOSTING
                                                                      value: '"{{ SELF._hosting }}"'
                                                                ports:
                                                                    - containerPort: '{{ SELF.application_port }}'
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.application_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: '{{ SELF.application_protocol }}'
                                                        port: '{{ SELF.application_port }}'
                                                        targetPort: '{{ SELF.application_port }}'
                                                  selector:
                                                      app: '{{ SELF.application_name }}'
                                                  type: ClusterIP
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: wait for deployment
                                      ansible.builtin.shell: kubectl rollout status deployment/{{ SELF.application_name }} --timeout 60s
                                      args:
                                          executable: /usr/bin/bash
                    delete: exit 0
    docker.engine#container.image::docker@docker.engine->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.application_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.application_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.application_name }}'
                                                      image: '{{ ".artifacts::container_image::file" | eval }}'
                                                      network_mode: host
                                                      environment:
                                                          APPLICATION_NAME: '"{{ SELF.application_name }}"'
                                                          _HOSTING: '"{{ SELF._hosting }}"'
                                    - name: apply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.dbms::ansible@docker.engine->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
            application_port:
                type: string
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default: 3306
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: start container
                                      community.docker.docker_container:
                                          name: '{{ SELF.dbms_name }}'
                                          image: '{{ SELF.dbms_image }}'
                                          network_mode: host
                                          env:
                                              MYSQL_ROOT_PASSWORD: '{{ SELF.dbms_password | string }}'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.dbms::ansible@kubernetes:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::dbms_name
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST:
                                    eval: .::k8s_host
                                K8S_AUTH_SSL_CA_CERT:
                                    eval: .::k8s_ca_cert_file
                                K8S_AUTH_CERT_FILE:
                                    eval: .::k8s_client_cert_file
                                K8S_AUTH_KEY_FILE:
                                    eval: .::k8s_client_key_file
                        inputs:
                            playbook:
                                q:
                                    - name: create deployment
                                      kubernetes.core.k8s:
                                          wait: true
                                          definition:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.dbms_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.dbms_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ SELF.dbms_image }}'
                                                                name: '{{ SELF.dbms_name }}'
                                                                env:
                                                                    - name: MYSQL_ROOT_PASSWORD
                                                                      value: '{{ SELF.dbms_password }}'
                                                                ports:
                                                                    - containerPort: 3306
                                                                      name: mysql
                                    - name: create service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: mysql
                                                        port: 3306
                                                        targetPort: 3306
                                                  selector:
                                                      app: '{{ SELF.dbms_name }}'
                                                  type: ClusterIP
                    delete: exit 0
    mysql.dbms::ansible@gcp.cloudsql:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
            dbms_ssl_mode:
                type: string
                default: Preferred
        attributes:
            application_port:
                type: string
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: create a instance
                                      register: instance_info
                                      google.cloud.gcp_sql_instance:
                                          name: '{{  SELF.dbms_name }}'
                                          database_version: MYSQL_5_7
                                          settings:
                                              tier: db-f1-micro
                                              availability_type: REGIONAL
                                              backup_configuration:
                                                  binary_log_enabled: true
                                                  enabled: true
                                              ip_configuration:
                                                  authorized_networks:
                                                      - value: 0.0.0.0/0
                                          region: '{{ SELF.gcp_region }}'
                                          project: '{{ SELF.gcp_project }}'
                                    - name: set root password
                                      google.cloud.gcp_sql_user:
                                          name: root
                                          host: '%'
                                          password: '{{ SELF.dbms_password }}'
                                          instance: '{{ instance_info }}'
                                          project: '{{ SELF.gcp_project }}'
                                    - name: aet attributes
                                      set_fact:
                                          application_address: '{{ instance_info.ipAddresses[0].ipAddress | trim }}'
                            resultTemplate: |
                                name: SELF
                                attributes:
                                    application_address: '{{ outputs.application_address }}'
                        outputs:
                            application_address:
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: Activate service account
                                      shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                    - name: Delete Instance
                                      shell: gcloud sql instances delete {{ SELF.dbms_name }} --quiet
    mysql.dbms::ansible@virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
            application_port:
                type: string
                default: 3000
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default: 3000
        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: Installing mysql
                                      package:
                                          name: '{{item}}'
                                          state: present
                                          update_cache: 'yes'
                                      loop:
                                          - mysql-server
                                          - mysql-client
                                          - python3-mysqldb
                                          - libmysqlclient-dev
                                    - name: Start and enable mysql service
                                      service:
                                          name: mysql
                                          state: started
                                          enabled: 'yes'
                                    - name: Create mysql user
                                      community.mysql.mysql_user:
                                          name: root
                                          password: '{{ SELF.root_password }}'
                                          priv: '*.*:ALL'
                                          host: '%'
                                          state: present
                                    - name: Delete localhost root
                                      community.mysql.mysql_user:
                                          name: root
                                          host: localhost
                                          state: absent
                                    - name: Enable passwordless login
                                      copy:
                                          dest: /root/.my.cnf
                                          content: |
                                              [client]
                                              user=root
                                              password={{ SELF.root_password }}
                                    - name: Enable remote login
                                      lineinfile:
                                          path: /etc/mysql/mysql.conf.d/mysqld.cnf
                                          regexp: ^bind-address
                                          line: bind-address = 0.0.0.0
                                          backup: 'yes'
                                    - name: Configure port (e.g., since 3306 is blocked by the provider)
                                      lineinfile:
                                          path: /etc/mysql/mysql.conf.d/mysqld.cnf
                                          regexp: ^# port
                                          line: port = 3000
                                          backup: 'yes'
                                    - name: Restart mysql
                                      service:
                                          name: mysql
                                          state: restarted
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.dbms::terraform@docker.engine->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default: 3306
        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - docker:
                                        source: kreuzwerker/docker
                                        version: 3.0.2
                        provider:
                            docker:
                                - host: ssh://{{ SELF.os_ssh_user }}@{{ SELF.os_ssh_host }}:22
                                  ssh_opts:
                                      - '-i'
                                      - '{{ SELF.os_ssh_key_file }}'
                                      - '-o'
                                      - IdentitiesOnly=yes
                                      - '-o'
                                      - BatchMode=yes
                                      - '-o'
                                      - UserKnownHostsFile=/dev/null
                                      - '-o'
                                      - StrictHostKeyChecking=no
                        resource:
                            docker_container:
                                application:
                                    - name: '{{ SELF.dbms_name }}'
                                      image: ${docker_image.image.image_id}
                                      network_mode: host
                                      env:
                                          - MYSQL_ROOT_PASSWORD={{ SELF.dbms_password }}
                            docker_image:
                                image:
                                    - name: '{{ SELF.dbms_image }}'
    mysql.dbms::terraform@kubernetes:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::dbms_name
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: ${file("{{ SELF.k8s_client_cert_file }}")}
                                  client_key: ${file("{{ SELF.k8s_client_key_file }}")}
                                  cluster_ca_certificate: ${file("{{ SELF.k8s_ca_cert_file }}")}
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_deployment_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.dbms_name }}'
                                      spec:
                                          - selector:
                                                - match_labels:
                                                      app: '{{ SELF.dbms_name }}'
                                            template:
                                                - metadata:
                                                      - labels:
                                                            app: '{{ SELF.dbms_name }}'
                                                  spec:
                                                      - container:
                                                            - name: '{{ SELF.dbms_name }}'
                                                              image: '{{ SELF.dbms_image }}'
                                                              env:
                                                                  - name: MYSQL_ROOT_PASSWORD
                                                                    value: '{{ SELF.dbms_password }}'
                                                              port:
                                                                  - container_port: 3306
                                                                    name: mysql
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.dbms_name }}'
                                      spec:
                                          - port:
                                                - name: mysql
                                                  port: 3306
                                                  target_port: 3306
                                            selector:
                                                app: '{{ SELF.dbms_name }}'
                                            type: ClusterIP
    mysql.dbms::terraform@gcp.cloudsql:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
            dbms_ssl_mode:
                type: string
                default: Preferred
        attributes:
            application_port:
                type: string
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        output:
                            application_address:
                                - value: ${google_sql_database_instance.dbms.public_ip_address}
                        resource:
                            google_sql_database_instance:
                                dbms:
                                    - database_version: MYSQL_5_7
                                      deletion_protection: false
                                      name: '{{ SELF.dbms_name }}'
                                      root_password: '{{ SELF.dbms_password }}'
                                      settings:
                                          - availability_type: REGIONAL
                                            backup_configuration:
                                                - binary_log_enabled: true
                                                  enabled: true
                                            ip_configuration:
                                                - authorized_networks:
                                                      - name: public
                                                        value: 0.0.0.0/0
                                                  ipv4_enabled: true
                                            tier: db-f1-micro
                            google_sql_user:
                                user:
                                    - host: '%'
                                      instance: ${google_sql_database_instance.dbms.name}
                                      name: root
                                      password: ${google_sql_database_instance.dbms.root_password}
    mysql.dbms::terraform@virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
            application_port:
                type: integer
                default: 3000
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default: 3000
        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
    
                                                    #!/usr/bin/env bash
                                                    set -e
                                                    export DEBIAN_FRONTEND="noninteractive"
    
                                                    DBMS_PASSWORD=$1
                                                    DBMS_PORT=$2
    
                                                    # Set password
                                                    debconf-set-selections <<< "mysql-server mysql-server/root_password password ${DBMS_PASSWORD}"
                                                    debconf-set-selections <<< "mysql-server mysql-server/root_password_again password ${DBMS_PASSWORD}"
    
                                                    # Install mysql
                                                    apt-get update -y
                                                    apt-get -y install mysql-server
    
                                                    # Passwordless auth
                                                    cat <<EOF > /root/.my.cnf
                                                    [client]
                                                    user=root
                                                    password=${DBMS_PASSWORD}
                                                    EOF
    
                                                    # Listen on all interfaces
                                                    sed -i "s/127\.0\.0\.1/0\.0\.0\.0/g" /etc/mysql/mysql.conf.d/mysqld.cnf
    
                                                    # Listen on custom port
                                                    sed -i "s/# port.*/port = ${DBMS_PORT}/g" /etc/mysql/mysql.conf.d/mysqld.cnf
    
                                                    # Configure any host for root
                                                    mysql -u root -e 'USE mysql; UPDATE user SET host = "%" WHERE user = "root"; FLUSH PRIVILEGES;'
                                                    mysql -u root -e 'USE mysql; DELETE FROM user WHERE user = "root" and host = "localhost"; FLUSH PRIVILEGES;'
    
                                                    # Enable service
                                                    systemctl enable mysql
    
                                                    # Restart service
                                                    systemctl restart mysql
                                                destination: /tmp/install-mysql-dbms.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/install-mysql-dbms.sh {{ SELF.dbms_password }} 3000
    mysql.dbms::kubernetes@kubernetes:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::dbms_name
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.dbms_name }}.dbms.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: |
                                              {{ deployment | to_yaml }}
                                              ---
                                              {{ service | to_yaml }}
                                      vars:
                                          deployment:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.dbms_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.dbms_name }}'
                                                      spec:
                                                          containers:
                                                              - image: '{{ SELF.dbms_image }}'
                                                                name: '{{ SELF.dbms_name }}'
                                                                env:
                                                                    - name: MYSQL_ROOT_PASSWORD
                                                                      value: '{{ SELF.dbms_password }}'
                                                                ports:
                                                                    - containerPort: 3306
                                                                      name: mysql
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                              spec:
                                                  ports:
                                                      - name: mysql
                                                        port: 3306
                                                        targetPort: 3306
                                                  selector:
                                                      app: '{{ SELF.dbms_name }}'
                                                  type: ClusterIP
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: wait for deployment
                                      ansible.builtin.shell: kubectl rollout status deployment/{{ SELF.dbms_name }} --timeout 60s
                                      args:
                                          executable: /usr/bin/bash
                                    - name: give DBMS some time
                                      ansible.builtin.pause:
                                          seconds: 10
                    delete: exit 0
    mysql.dbms::docker@docker.engine->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default: 3306
        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.dbms_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.dbms_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.dbms_name }}'
                                                      image: '{{ SELF.dbms_image }}'
                                                      network_mode: host
                                                      environment:
                                                          MYSQL_ROOT_PASSWORD: '{{ SELF.dbms_password }}'
                                    - name: apply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash
                                    - name: give DBMS some time
                                      ansible.builtin.pause:
                                          seconds: 10
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.database::ansible@mysql.dbms->docker.engine->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install pip
                                      apt:
                                          name: python3-pip
                                          state: present
                                    - name: install pymysql
                                      pip:
                                          name: pymysql
                                          state: present
                                    - name: create database
                                      community.mysql.mysql_db:
                                          name: '{{ SELF.database_name }}'
                                          login_host: '{{ HOST.application_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: '{{ HOST.application_port }}'
                                          login_user: root
                                    - name: create user (with privileges)
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: '{{ HOST.application_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: '{{ HOST.application_port }}'
                                          login_user: root
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.database::ansible@mysql.dbms->kubernetes:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: create database
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }} -- mysql --password={{ HOST.dbms_password }} -e "CREATE DATABASE IF NOT EXISTS {{ SELF.database_name }}";
                                      args:
                                          executable: /usr/bin/bash
                                    - name: create user
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }}  -- mysql --password={{ HOST.dbms_password }} -e "CREATE USER IF NOT EXISTS '{{ SELF.database_user }}'@'%' IDENTIFIED BY '{{ SELF.database_password }}'";
                                      args:
                                          executable: /usr/bin/bash
                                    - name: grant privileges
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }}  -- mysql --password={{ HOST.dbms_password }} -e "GRANT ALL PRIVILEGES ON *.* TO '{{ SELF.database_user }}'@'%'";
                                      args:
                                          executable: /usr/bin/bash
    mysql.database::ansible@mysql.dbms->gcp.cloudsql:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: create a database
                                      google.cloud.gcp_sql_database:
                                          name: '{{ SELF.database_name }}'
                                          charset: utf8
                                          instance: '{{ HOST.dbms_name }}'
                                          project: '{{ SELF.gcp_project }}'
                                    - name: create user (with privileges)
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: '{{ HOST.management_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: 3306
                                          login_user: root
    mysql.database::ansible@mysql.dbms->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install pip
                                      apt:
                                          name: python3-pip
                                          state: present
                                    - name: install pymysql
                                      pip:
                                          name: pymysql
                                          state: present
                                    - name: create database
                                      community.mysql.mysql_db:
                                          name: '{{ SELF.database_name }}'
                                          login_host: '{{ HOST.application_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: '{{ HOST.application_port }}'
                                          login_user: root
                                    - name: create user (with privileges)
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: '{{ HOST.application_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: '{{ HOST.application_port }}'
                                          login_user: root
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.database::terraform@mysql.dbms->docker.engine->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                                    ssh:
                                        source: AndrewChubatiuk/ssh
                                        version: 0.2.3
                        data:
                            ssh_tunnel:
                                mysql:
                                    - remote:
                                          host: '{{ HOST.application_address }}'
                                          port: '{{ HOST.application_port }}'
                        provider:
                            mysql:
                                - endpoint: ${data.ssh_tunnel.mysql.local.address}
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                            ssh:
                                - auth:
                                      private_key:
                                          content: ${file(pathexpand("{{ SELF.os_ssh_key_file }}"))}
                                  server:
                                      host: '{{ HOST.management_address }}'
                                      port: 22
                                  user: '{{ SELF.os_ssh_user }}'
                        resource:
                            mysql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                            mysql_user:
                                user:
                                    - host: '%'
                                      plaintext_password: '{{ SELF.database_password }}'
                                      user: '{{ SELF.database_user }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - ALL
                                      user: ${mysql_user.user.user}
    mysql.database::terraform@mysql.dbms->kubernetes:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
    mysql.database::terraform@mysql.dbms->gcp.cloudsql:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                                    mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                            mysql:
                                - endpoint: '{{ HOST.management_address }}'
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                        resource:
                            google_sql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                                      instance: '{{ HOST.dbms_name }}'
                            google_sql_user:
                                user:
                                    - host: '%'
                                      instance: '{{ HOST.dbms_name }}'
                                      name: '{{ SELF.database_name }}'
                                      password: '{{ SELF.database_password }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - ALL
                                      user: ${google_sql_user.user.name}
    mysql.database::terraform@mysql.dbms->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                                    ssh:
                                        source: AndrewChubatiuk/ssh
                                        version: 0.2.3
                        data:
                            ssh_tunnel:
                                mysql:
                                    - remote:
                                          host: '{{ HOST.application_address }}'
                                          port: '{{ HOST.application_port }}'
                        provider:
                            mysql:
                                - endpoint: ${data.ssh_tunnel.mysql.local.address}
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                            ssh:
                                - auth:
                                      private_key:
                                          content: ${file(pathexpand("{{ SELF.os_ssh_key_file }}"))}
                                  server:
                                      host: '{{ HOST.management_address }}'
                                      port: 22
                                  user: '{{ SELF.os_ssh_user }}'
                        resource:
                            mysql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                            mysql_user:
                                user:
                                    - host: '%'
                                      plaintext_password: '{{ SELF.database_password }}'
                                      user: '{{ SELF.database_user }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - ALL
                                      user: ${mysql_user.user.user}
    mysql.database::kubernetes@mysql.dbms->kubernetes:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.database_name }}-{{ HOST.dbms_name }}.database.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: '{{ job | to_yaml }}'
                                      vars:
                                          job:
                                              apiVersion: batch/v1
                                              kind: Job
                                              metadata:
                                                  name: '{{ SELF.database_name }}-{{ HOST.dbms_name }}'
                                              spec:
                                                  template:
                                                      spec:
                                                          restartPolicy: Never
                                                          initContainers:
                                                              - name: create-database
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - mysql
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - '-e'
                                                                    - CREATE DATABASE IF NOT EXISTS {{ SELF.database_name }}
                                                              - name: create-user
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - mysql
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - '-e'
                                                                    - CREATE USER IF NOT EXISTS '{{ SELF.database_user }}'@'%' IDENTIFIED BY '{{ SELF.database_password }}'
                                                              - name: grant-privileges
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - mysql
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - '-e'
                                                                    - GRANT ALL PRIVILEGES ON *.* TO '{{ SELF.database_user }}'@'%'
                                                          containers:
                                                              - name: none
                                                                image: busybox
                                                                command:
                                                                    - echo
                                                                    - "'done'"
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: wait for deployment
                                      ansible.builtin.shell: kubectl wait --for=condition=complete --timeout=30s job/{{ SELF.database_name }}-{{ HOST.dbms_name }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: cleanup
                                      ansible.builtin.shell: kubectl delete -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                    delete: exit 0
    mysql.database::docker@mysql.dbms->docker.engine->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
