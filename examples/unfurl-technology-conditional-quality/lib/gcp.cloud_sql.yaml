tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    gcp.cloud_sql:
        derived_from: tosca.nodes.Root
        properties:
            instance_name:
                type: string

            root_password:
                type: string

            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

            gcp_region:
                type: string
                default: {get_input: gcp_region}

        attributes:
            application_address:
                type: string

            application_port:
                type: integer
                default: 3306

        capabilities:
            host:
                type: tosca.capabilities.Compute

    ###################################################
    #
    # Terraform GCP
    #
    ###################################################

    gcp.cloud_sql.terraform.gcp:
        derived_from: gcp.cloud_sql
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                inputs:
                    tfvars: |
                        project = "{{ SELF.gcp_project }}"
                        region = "{{ SELF.gcp_region }}"
                        service_account_file = "{{ SELF.gcp_service_account_file }}"

                        name = "{{ SELF.instance_name}}"
                        password = "{{ SELF.root_password }}"
                    main: |
                        terraform {
                           required_providers {
                             google = {
                               source = "hashicorp/google"
                               version = "4.67.0"
                             }
                           }
                         }

                         provider "google" {
                           project = var.project
                           region = var.region
                           credentials = var.service_account_file
                         }

                         variable "service_account_file" {
                           type        = string
                         }

                         variable "project" {
                           type        = string
                         }

                         variable "region" {
                           type        = string
                         }

                         variable "name" {
                           type        = string
                         }

                         variable "password" {
                           type        = string
                         }                        

                         resource "google_project_service" "cloud_sql_admin" {
                           project  = var.project
                           service = "sqladmin.googleapis.com"
                           disable_on_destroy = false
                         }

                         # https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance
                         resource "google_sql_database_instance" "dbms" {
                           depends_on = [ google_project_service.cloud_sql_admin ]

                           name             = var.name
                           database_version = "MYSQL_5_7"
                           root_password = var.password
                           deletion_protection = false

                           settings {
                             tier = "db-f1-micro"

                             availability_type = "REGIONAL"

                             backup_configuration {
                               enabled = true
                               binary_log_enabled = true
                             }

                             ip_configuration {
                               ipv4_enabled = true

                               authorized_networks {
                                 name = "public"
                                 value = "0.0.0.0/0"
                               }

                             }
                           }
                         }

                         resource "google_sql_user" "users" {
                           name     = "root"
                           instance = google_sql_database_instance.dbms.name
                           host     = "%"
                           password = var.password
                         }

                         output "application_address" {
                           value = google_sql_database_instance.dbms.public_ip_address
                         }

    ###################################################
    #
    # Ansible GCP
    #
    ###################################################

    gcp.cloud_sql.ansible.gcp:
        derived_from: gcp.cloud_sql
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: Activate service account
                                      shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                      args:
                                          executable: /usr/bin/bash

                                    # https://cloud.google.com/sql/docs/mysql/connect-instance-cloud-shell
                                    - name: Enable Cloud SQL Admin API
                                      shell: |
                                          GCP_SERVICE=sqladmin.googleapis.com

                                          GCP_SERVICE_ENABLED=$(gcloud services list --filter ${GCP_SERVICE} --format json --enabled | jq length)
                                          if [ ${GCP_SERVICE_ENABLED} = 0 ]; then
                                              gcloud services enable ${GCP_SERVICE}
                                          fi
                                      args:
                                          executable: /usr/bin/bash

                                    # https://cloud.google.com/sql/docs/mysql/create-instance
                                    # https://cloud.google.com/sdk/gcloud/reference/sql/instances/create
                                    - name: Create Instance
                                      shell: |
                                          gcloud sql instances create {{ SELF.instance_name }} \
                                              --tier db-f1-micro \
                                              --region {{ SELF.gcp_region }} \
                                              --database-version MYSQL_5_7 \
                                              --authorized-networks "0.0.0.0/0" \
                                              --availability-type REGIONAL \
                                              --backup --enable-bin-log \
                                              --timeout unlimited
                                      args:
                                          executable: /usr/bin/bash

                                    # https://cloud.google.com/sql/docs/mysql/create-instance
                                    - name: Set Root Password
                                      shell: gcloud sql users set-password root --host=% --instance {{ SELF.instance_name }} --password {{ SELF.root_password }}
                                      args:
                                          executable: /usr/bin/bash

                                    # https://cloud.google.com/sdk/gcloud/reference/sql/instances/describe
                                    - name: Get Instance Information
                                      shell: gcloud sql instances describe {{ SELF.instance_name }}
                                      register: instance_info
                                      args:
                                          executable: /usr/bin/bash

                                    - name: Set Attributes
                                      set_fact:
                                          application_address: '{{ (instance_info.stdout | from_yaml).ipAddresses[0].ipAddress }}'

                            resultTemplate: |
                                - name: SELF
                                  attributes:
                                    application_address: "{{ outputs.application_address | trim }}"

                        outputs:
                            application_address:

                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: Activate service account
                                      shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'

                                    - name: Delete Instance
                                      shell: 'gcloud sql instances delete {{ SELF.instance_name }} --quiet'
