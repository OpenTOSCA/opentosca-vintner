tosca_definitions_version: tosca_variability_1_0_rc_3

imports:
    - lib/types.yaml

topology_template:
    inputs:
        database_password:
            type: string

        dbms_password:
            type: string

        os_network:
            type: string

        os_ssh_key_name:
            type: string

        os_ssh_user:
            type: string

        os_ssh_key_file:
            type: string

        os_region_name:
            type: string

        os_auth_type:
            type: string

        os_auth_url:
            type: string

        os_identity_api_version:
            type: string

        os_interface:
            type: string

        os_application_credential_id:
            type: string

        os_application_credential_secret:
            type: string

        gcp_region:
            type: string

        gcp_service_account_file:
            type: string

        gcp_project:
            type: string

        k8s_host:
            type: string

        k8s_ca_cert_file:
            type: string

        k8s_client_cert_file:
            type: string

        k8s_client_key_file:
            type: string

    outputs:
        - shop_endpoint:
              value: "{{ '::shop_ansible::application_endpoint' | eval }}"
              conditions: {not: {or: [{node_presence: shop_ingress_ansible}, {node_presence: shop_ingress_kubernetes}]}}

        - shop_endpoint:
              value: "{{ '::shop_terraform::application_endpoint' | eval }}"
              conditions: {not: {or: [{node_presence: shop_ingress_ansible}, {node_presence: shop_ingress_kubernetes}]}}

        - shop_endpoint:
              value: "{{ '::shop_ingress_ansible::application_address' | eval }}"

        - shop_endpoint:
              value: "{{ '::shop_ingress_kubernetes::application_address' | eval }}"

    variability:
        inputs:
            env:
                type: string
            tier:
                type: boolean
            premium_feature:
                type: boolean
            optional_feature:
                type: boolean
        options:
            checks: false

    node_templates:
        ###################################################
        #
        # Shop
        #
        ###################################################

        shop_ansible:
            type: shop.component
            conditions: {equal: [{variability_input: env}, STATIC]}
            anchor: true
            technology: ansible
            properties:
                - application_name: unfurl-technology-shop
                - application_port: 3000
                - application_protocol: http
                - DB_NAME: shop
                - DB_USERNAME: shop
                - DB_PASSWORD: {get_input: database_password}
                - DB_DIALECT: mysql
                - DB_ADDRESS: {eval: '.::.requirements[.name=database]::.target::application_address'}
                - DB_PORT: {eval: '.::.requirements[.name=database]::.target::application_port'}
                - premium_feature:
                      value: 'true'
                      conditions: {equal: [{variability_input: premium_feature}, true]}
                - premium_feature:
                      value: 'false'
                      conditions: {not: {equal: [{variability_input: premium_feature}, true]}}
                - optional_feature:
                      value: 'true'
                      conditions: {equal: [{variability_input: optional_feature}, true]}
                - optional_feature:
                      value: 'false'
                      conditions: {not: {equal: [{variability_input: optional_feature}, true]}}
            requirements:
                - database: database_ansible
                - host: nodejs_runtime
            artifacts:
                - zip_archive:
                      type: zip.archive
                      file: files/shop.source.zip

        shop_terraform:
            type: shop.component
            anchor: true
            conditions: {equal: [{variability_input: env}, ELASTIC]}
            technology: terraform
            properties:
                - application_name: unfurl-technology-shop
                - application_port: 3000
                - application_protocol: http
                - DB_NAME: shop
                - DB_USERNAME: shop
                - DB_PASSWORD: {get_input: database_password}
                - DB_DIALECT: mysql
                - DB_ADDRESS: {eval: '.::.requirements[.name=database]::.target::application_address'}
                - DB_PORT: {eval: '.::.requirements[.name=database]::.target::application_port'}
                - premium_feature:
                      value: 'true'
                      conditions: {equal: [{variability_input: premium_feature}, true]}
                - premium_feature:
                      value: 'false'
                      conditions: {not: {equal: [{variability_input: premium_feature}, true]}}
                - optional_feature:
                      value: 'true'
                      conditions: {equal: [{variability_input: optional_feature}, true]}
                - optional_feature:
                      value: 'false'
                      conditions: {not: {equal: [{variability_input: optional_feature}, true]}}
            requirements:
                - database: database_terraform
                - host: gcp_appengine
            artifacts:
                - zip_archive:
                      type: zip.archive
                      file: files/shop.source.zip

        shop_kubernetes:
            type: shop.component
            anchor: true
            conditions: {equal: [{variability_input: env}, KUBERNETES]}
            technology: kubernetes
            properties:
                - application_name: unfurl-technology-shop
                - application_port: 3000
                - application_protocol: http
                - DB_NAME: shop
                - DB_USERNAME: shop
                - DB_PASSWORD: {get_input: database_password}
                - DB_DIALECT: mysql
                - DB_ADDRESS: {eval: '.::.requirements[.name=database]::.target::application_address'}
                - DB_PORT: {eval: '.::.requirements[.name=database]::.target::application_port'}
                - premium_feature:
                      value: 'true'
                      conditions: {equal: [{variability_input: premium_feature}, true]}
                - premium_feature:
                      value: 'false'
                      conditions: {not: {equal: [{variability_input: premium_feature}, true]}}
                - optional_feature:
                      value: 'true'
                      conditions: {equal: [{variability_input: optional_feature}, true]}
                - optional_feature:
                      value: 'false'
                      conditions: {not: {equal: [{variability_input: optional_feature}, true]}}
            requirements:
                - database: database_ansible
                - host: kubernetes_cluster
            artifacts:
                - docker_image:
                      type: docker.image
                      file: ghcr.io/opentosca/opentosca-vintner-shop-demo@sha256:a084405c9b494c7fb52012f7f8890bcbf960818c3df3cbcc030e96c9e8c52bf9

        shop_ingress_ansible:
            type: ingress
            technology: ansible
            requirements:
                - application: shop_ansible
                - host: virtual_machine

        shop_ingress_kubernetes:
            type: ingress
            technology: kubernetes
            requirements:
                - application: shop_kubernetes
                - host: kubernetes_cluster

        ###################################################
        #
        # Database
        #
        ###################################################

        database_ansible:
            type: mysql.database
            technology: ansible
            properties:
                - database_name: shop
                - database_user: shop
                - database_password: {get_input: database_password}
            requirements:
                - host: mysql_dbms_ansible
                - host: mysql_dbms_kubernetes

        database_terraform:
            type: mysql.database
            technology: terraform
            properties:
                - database_name: shop
                - database_user: shop
                - database_password: {get_input: database_password}
            requirements:
                - host: mysql_dbms_terraform

        mysql_dbms_ansible:
            type: mysql.dbms
            technology: ansible
            properties:
                - dbms_name: unfurl-technology-shop-dbms
                - dbms_password: {get_input: dbms_password}
            requirements:
                - host: virtual_machine
            artifacts:
                - dbms_image:
                      type: dbms.image
                      file: 5.7

        mysql_dbms_terraform:
            type: mysql.dbms
            technology: terraform
            properties:
                - dbms_name: unfurl-technology-shop-dbms
                - dbms_password: {get_input: dbms_password}
            requirements:
                - host: gcp_cloudsql
            artifacts:
                - dbms_image:
                      type: dbms.image
                      file: 5.7

        mysql_dbms_kubernetes:
            type: mysql.dbms
            technology: kubernetes
            properties:
                - dbms_name: unfurl-technology-shop-dbms
                - dbms_password: {get_input: dbms_password}
            requirements:
                - host: kubernetes_cluster
            artifacts:
                - dbms_image:
                      type: dbms.image
                      file: 5.7

        ###################################################
        #
        # Virtual Machine
        #
        ###################################################

        nodejs_runtime:
            type: nodejs.runtime
            technology: ansible
            requirements:
                - host: virtual_machine

        virtual_machine:
            type: virtual.machine
            technology: terraform
            properties:
                - machine_name: unfurl-technology-shop-vm
                - image: Ubuntu 22.04
                - ports: ['80']
                - flavor:
                      value: m1.medium
                      conditions: {equal: [{variability_input: tier}, MEDIUM]}
                - flavor:
                      value: m1.large
                      conditions: {equal: [{variability_input: tier}, LARGE]}
                - network: {get_input: os_network}
                - ssh_user: {get_input: os_ssh_user}
                - ssh_key_name: {get_input: os_ssh_key_name}
                - ssh_key_file: {get_input: os_ssh_key_file}
            requirements:
                - host: openstack_provider
            artifacts:
                - machine_image:
                      type: machine.image
                      file: Ubuntu 22.04

        openstack_provider:
            type: openstack.provider
            conditions: {equal: [{variability_input: env}, STATIC]}
            properties:
                - os_region_name: {get_input: os_region_name}
                - os_auth_type: {get_input: os_auth_type}
                - os_auth_url: {get_input: os_auth_url}
                - os_identity_api_version: {get_input: os_identity_api_version}
                - os_interface: {get_input: os_interface}
                - os_application_credential_id: {get_input: os_application_credential_id}
                - os_application_credential_secret: {get_input: os_application_credential_secret}

        ###################################################
        #
        # GCP
        #
        ###################################################

        gcp_appengine:
            type: gcp.appengine
            technology: terraform
            requirements:
                - host: gcp_provider
                - build: gcp_cloudbuild
                - reporting: gcp_appenginereporting

        gcp_appenginereporting:
            type: gcp.appenginereporting
            technology: terraform
            requirements:
                - host: gcp_provider

        gcp_cloudbuild:
            type: gcp.cloudbuild
            technology: terraform
            requirements:
                - host: gcp_provider

        gcp_cloudsql:
            type: gcp.cloudsql
            technology: terraform
            requirements:
                - host: gcp_provider

        gcp_provider:
            type: gcp.provider
            conditions: {equal: [{variability_input: env}, ELASTIC]}
            properties:
                - gcp_region: {get_input: gcp_region}
                - gcp_service_account_file: {get_input: gcp_service_account_file}
                - gcp_project: {get_input: gcp_project}

        ###################################################
        #
        # Kubernetes
        #
        ###################################################

        kubernetes_cluster:
            type: kubernetes.cluster
            conditions: {equal: [{variability_input: env}, KUBERNETES]}
            properties:
                - k8s_host: {get_input: k8s_host}
                - k8s_ca_cert_file: {get_input: k8s_ca_cert_file}
                - k8s_client_cert_file: {get_input: k8s_client_cert_file}
                - k8s_client_key_file: {get_input: k8s_client_key_file}
            requirements:
                - host: kubernetes_provider

        kubernetes_provider:
            type: cloud.provider
