# https://github.com/GoogleCloudPlatform/microservices-demo

tosca_definitions_version: tosca_variability_1_0_rc_3

imports:
    - lib/types.yaml

topology_template:
    inputs:
        database_password:
            type: string

        dbms_password:
            type: string

        os_network:
            type: string

        os_ssh_key_name:
            type: string

        os_ssh_user:
            type: string

        os_ssh_key_file:
            type: string

        os_region_name:
            type: string

        os_auth_type:
            type: string

        os_auth_url:
            type: string

        os_identity_api_version:
            type: string

        os_interface:
            type: string

        os_application_credential_id:
            type: string

        os_application_credential_secret:
            type: string

        gcp_region:
            type: string

        gcp_service_account_file:
            type: string

        gcp_project:
            type: string

    variability:
        expressions:
            is_gcp: {equal: [{variability_input: env}, GCP]}
            is_openstack: {equal: [{variability_input: env}, OPENSTACK]}
            has_optional_payment_feature: {equal: [{variability_input: optional_payment_feature}, true]}
            has_premium_payment_feature: {equal: [{variability_input: premium_payment_feature}, true]}
        inputs:
            env:
                type: string
                default: OPENSTACK

            tier:
                type: string
                default: MEDIUM

            optional_payment_feature:
                type: boolean
                default: false

            premium_payment_feature:
                type: boolean
                default: false
        options:
            # TODO: remove this
            required_technology_check: false

    node_templates:
        ###################################################
        #
        # Frontend
        #
        ###################################################

        frontend_service:
            type: frontend.service
            persistent: true
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - checkout: checkout_service
                - currency: currency_service
                - shipping: shipping_service
                - cart: cart_service
                - product: product_service
                - recommendation: recommendation_service
                - advertisement: advertisement_service
                - host: docker_runtime
                - host: gcp_cloudrun

        frontend_ingress:
            type: ingress
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
            requirements:
                - application: frontend_service
                - host: virtual_machine

        ###################################################
        #
        # Checkout
        #
        ###################################################

        checkout_service:
            type: checkout.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - email: email_service
                - payment: payment_service
                - currency: currency_service
                - shipping: shipping_service
                - cart: cart_service
                - product: product_service
                - host: docker_runtime
                - host: gcp_cloudrun

        ###################################################
        #
        # Email
        #
        ###################################################

        email_service:
            type: email.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: docker_runtime
                - host: gcp_cloudrun

        ###################################################
        #
        # Payment
        #
        ###################################################

        payment_service:
            type: payment.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            properties:
                - optional_payment_feature:
                      value: true
                      conditions: {logic_expression: has_optional_payment_feature}
                - optional_payment_feature:
                      value: false
                      conditions: {not: {logic_expression: has_optional_payment_feature}}
                - premium_payment_feature:
                      value: true
                      conditions: {logic_expression: has_premium_payment_feature}
                - premium_payment_feature:
                      value: false
                      conditions: {not: {logic_expression: has_premium_payment_feature}}
            requirements:
                - host: docker_runtime
                - host: gcp_cloudrun

        ###################################################
        #
        # Currency
        #
        ###################################################

        currency_service:
            type: currency.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: docker_runtime
                - host: gcp_cloudrun

        ###################################################
        #
        # Shipping
        #
        ###################################################

        shipping_service:
            type: shipping.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: docker_runtime
                - host: gcp_cloudrun

        ###################################################
        #
        # Cart
        #
        ###################################################

        cart_service:
            type: cart.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - database: mysql_database
                - host: docker_runtime
                - host: gcp_cloudrun

        mysql_database:
            type: mysql.database
            technology: terraform
            properties:
                - database_name: cart
                - database_user: cart
                - database_password: {get_input: database_password}
            requirements:
                - host: mysql_dbms

        mysql_dbms:
            type: mysql.dbms
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            properties:
                - dbms_name: cart
                - dbms_password: {get_input: dbms_password}
            requirements:
                - host: docker_runtime
                - host: gcp_cloudsql

        ###################################################
        #
        # Product
        #
        ###################################################

        product_service:
            type: product.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: docker_runtime
                - host: gcp_cloudrun

        ###################################################
        #
        # Recommendation
        #
        ###################################################

        recommendation_service:
            type: recommendation.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - product: product_service
                - host: docker_runtime
                - host: gcp_cloudrun

        ###################################################
        #
        # Advertisement
        #
        ###################################################

        advertisement_service:
            type: advertisement.service
            technology:
                - docker:
                      conditions: {logic_expression: is_openstack}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: docker_runtime
                - host: gcp_cloudrun

        ###################################################
        #
        # Virtual Machine
        #
        ###################################################

        docker_runtime:
            type: docker.engine
            technology: ansible
            requirements:
                - host: virtual_machine

        monitoring_agent:
            type: monitoring.agent
            technology: ansible
            requirements:
                - host: virtual_machine

        logging_agent:
            type: logging.agent
            technology: ansible
            requirements:
                - host: virtual_machine

        security_agent:
            type: security.agent
            technology: ansible
            requirements:
                - host: virtual_machine

        virtual_machine:
            type: openstack.machine
            technology: terraform
            properties:
                - machine: unfurl-technology-boutique
                - ports: [80, 3000, 8000]
                - flavor:
                      value: m1.medium
                      conditions: {equal: [{variability_input: tier}, MEDIUM]}
                - flavor:
                      value: m1.large
                      conditions: {equal: [{variability_input: tier}, LARGE]}

                - os_network: {get_input: os_network}
                - os_ssh_key_name: {get_input: os_ssh_key_name}
                - os_ssh_user: {get_input: os_ssh_user}
                - os_ssh_key_file: {get_input: os_ssh_key_file}
                - os_region_name: {get_input: os_region_name}

            requirements:
                - host: openstack

        openstack:
            type: openstack.provider
            conditions: {logic_expression: is_openstack}
            properties:
                - os_region_name: {get_input: os_region_name}
                - os_auth_type: {get_input: os_auth_type}
                - os_auth_url: {get_input: os_auth_url}
                - os_identity_api_version: {get_input: os_identity_api_version}
                - os_interface: {get_input: os_interface}
                - os_application_credential_id: {get_input: os_application_credential_id}
                - os_application_credential_secret: {get_input: os_application_credential_secret}

        ###################################################
        #
        # GCP
        #
        ###################################################

        gcp_cloudrun:
            type: gcp.cloudrun
            technology: terraform
            requirements:
                - host: gcp_provider

        gcp_cloudsql:
            type: gcp.cloudsql
            technology: terraform
            requirements:
                - host: gcp_provider

        gcp_provider:
            type: gcp.provider
            conditions: {logic_expression: is_gcp}
            properties:
                - gcp_region: {get_input: gcp_region}
                - gcp_service_account_file: {get_input: gcp_service_account_file}
                - gcp_project: {get_input: gcp_project}
