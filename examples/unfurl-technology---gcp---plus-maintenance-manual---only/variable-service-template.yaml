# https://github.com/GoogleCloudPlatform/microservices-demo

tosca_definitions_version: tosca_variability_1_0_rc_3

imports:
    - lib/types.yaml

topology_template:
    inputs:
        database_password:
            type: string

        docker_host:
            type: string
            default: 'unix://var/run/docker.sock'

        os_network:
            type: string

        os_ssh_key_name:
            type: string

        os_ssh_user:
            type: string

        os_ssh_key_file:
            type: string

        os_region_name:
            type: string

        os_auth_type:
            type: string

        os_auth_url:
            type: string

        os_identity_api_version:
            type: string

        os_interface:
            type: string

        os_application_credential_id:
            type: string

        os_application_credential_secret:
            type: string

        gcp_region:
            type: string

        gcp_service_account_file:
            type: string

        gcp_project:
            type: string

        k8s_api_address:
            type: string

        k8s_api_port:
            type: string

        k8s_ca_cert_file:
            type: string

        k8s_client_cert_file:
            type: string

        k8s_client_key_file:
            type: string

    variability:
        expressions:
            is_docker: {equal: [{variability_input: env}, DOCKER]}
            is_gcp: {equal: [{variability_input: env}, GCP]}
            is_kubernetes: {equal: [{variability_input: env}, KUBERNETES]}
            is_openstack: {equal: [{variability_input: env}, OPENSTACK]}
        inputs:
            env:
                type: string
                default: DOCKER

            tier:
                type: string
                default: MEDIUM

        options:
            # TODO: remove this
            required_technology_check: false

    node_templates:
        ###################################################
        #
        # Frontend
        #
        ###################################################

        frontend_service:
            type: frontend.service
            persistent: true
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - checkout: checkout_service
                - currency: currency_service
                - shipping: shipping_service
                - cart: cart_service
                - product: product_service
                - recommendation: recommendation_service
                - advertisement: advertisement_service

                - host: go_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        frontend_ingress:
            type: ingress
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
            requirements:
                - upstream: frontend_service

                - host: kubernetes_runtime
                - host: virtual_machine

        ###################################################
        #
        # Checkout
        #
        ###################################################

        checkout_service:
            type: checkout.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - email: email_service
                - payment: payment_service
                - currency: currency_service
                - shipping: shipping_service
                - cart: cart_service
                - product: product_service

                - host: go_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        ###################################################
        #
        # Email
        #
        ###################################################

        email_service:
            type: email.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: python_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        ###################################################
        #
        # Payment
        #
        ###################################################

        payment_service:
            type: payment.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: node_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        ###################################################
        #
        # Currency
        #
        ###################################################

        currency_service:
            type: currency.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: node_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        ###################################################
        #
        # Shipping
        #
        ###################################################

        shipping_service:
            type: shipping.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: go_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        ###################################################
        #
        # Cart
        #
        ###################################################

        cart_service:
            type: cart.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - database: postgresql_database

                - host: dotnet_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        postgresql_database:
            type: postgresql.database
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - ansible:
                      conditions: {logic_expression: is_kubernetes}
                - ansible:
                      conditions: {logic_expression: is_docker}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: postgresql_dbms

        postgresql_dbms:
            type: postgresql.dbms
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: virtual_machine
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_cloudsql

        ###################################################
        #
        # Product
        #
        ###################################################

        product_service:
            type: product.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: go_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        ###################################################
        #
        # Recommendation
        #
        ###################################################

        recommendation_service:
            type: recommendation.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - product: product_service

                - host: python_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        ###################################################
        #
        # Advertisement
        #
        ###################################################

        advertisement_service:
            type: advertisement.service
            technology:
                - ansible:
                      conditions: {logic_expression: is_openstack}
                - docker:
                      conditions: {logic_expression: is_docker}
                - kubernetes:
                      conditions: {logic_expression: is_kubernetes}
                - terraform:
                      conditions: {logic_expression: is_gcp}
            requirements:
                - host: java_runtime
                - host: docker_runtime
                - host: kubernetes_runtime
                - host: gcp_appengine

        ###################################################
        #
        # Virtual Machine
        #
        ###################################################

        go_runtime:
            type: go.runtime
            technology: ansible
            properties:
                - version: 1.22.5
            requirements:
                - host: virtual_machine

        dotnet_runtime:
            type: dotnet.runtime
            technology: ansible
            properties:
                - version: 8.0.7
            requirements:
                - host: virtual_machine

        node_runtime:
            type: node.runtime
            technology: ansible
            properties:
                - version: 20.15.1
            requirements:
                - host: virtual_machine

        python_runtime:
            type: python.runtime
            technology: ansible
            properties:
                - version: 3.12.4
            requirements:
                - host: virtual_machine

        java_runtime:
            type: java.runtime
            technology: ansible
            properties:
                - version: 21.0.3+9
            requirements:
                - host: virtual_machine

        virtual_machine:
            type: openstack.machine
            technology: terraform
            properties:
                - machine: unfurl-technology-gcp
                - ports: [80, 3000, 8000]
                - flavor:
                      value: m1.medium
                      conditions: {equal: [{variability_input: tier}, MEDIUM]}
                - flavor:
                      value: m1.large
                      conditions: {equal: [{variability_input: tier}, LARGE]}

                - os_network: {get_input: os_network}
                - os_ssh_key_name: {get_input: os_ssh_key_name}
                - os_ssh_user: {get_input: os_ssh_user}
                - os_ssh_key_file: {get_input: os_ssh_key_file}
                - os_region_name: {get_input: os_region_name}

            requirements:
                - host: openstack

        openstack:
            type: openstack.provider
            conditions: {logic_expression: is_openstack}
            properties:
                - os_region_name: {get_input: os_region_name}
                - os_auth_type: {get_input: os_auth_type}
                - os_auth_url: {get_input: os_auth_url}
                - os_identity_api_version: {get_input: os_identity_api_version}
                - os_interface: {get_input: os_interface}
                - os_application_credential_id: {get_input: os_application_credential_id}
                - os_application_credential_secret: {get_input: os_application_credential_secret}

        ###################################################
        #
        # Docker
        #
        ###################################################

        docker_runtime:
            type: docker.engine
            conditions: {logic_expression: is_docker}
            properties:
                - docker_host: {get_input: docker_host}

        ###################################################
        #
        # GCP
        #
        ###################################################

        gcp_appengine:
            type: gcp.appengine
            requirements:
                - host: gcp_provider

        gcp_cloudsql:
            type: gcp.cloudsql
            requirements:
                - host: gcp_provider

        gcp_provider:
            type: gcp.provider
            conditions: {logic_expression: is_gcp}
            properties:
                - gcp_region: {get_input: gcp_region}
                - gcp_service_account_file: {get_input: gcp_service_account_file}
                - gcp_project: {get_input: gcp_project}

        ###################################################
        #
        # Kubernetes
        #
        ###################################################

        kubernetes_runtime:
            type: kubernetes
            conditions: {logic_expression: is_kubernetes}
            properties:
                - k8s_api_address: {get_input: k8s_api_address}
                - k8s_api_port: {get_input: k8s_api_port}
                - k8s_ca_cert_file: {get_input: k8s_ca_cert_file}
                - k8s_client_cert_file: {get_input: k8s_client_cert_file}
                - k8s_client_key_file: {get_input: k8s_client_key_file}
