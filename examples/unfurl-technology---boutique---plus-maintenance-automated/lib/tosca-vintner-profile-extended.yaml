###################################################
#
# WARNING: Do not edit! This file is autogenerated!
#
###################################################

tosca_definitions_version: tosca_simple_yaml_1_3
description: TOSCA Profile for OpenTOSCA Vintner (Extended)
metadata:
    vintner_normative: 'true'
    template_name: TOSCA Vintner Profile (Extended)
    template_author: Miles St√∂tzner
    template_contact: miles.stoetzner@iste.uni-stuttgart.de
    template_link: https://vintner.opentosca.org
    template_version: 1.0.0-draft
    template_id: tosca-vintner-profile
    template_license: https://www.apache.org/licenses/LICENSE-2.0
    acknowledgments: Partially funded by the [German Federal Ministry for Economic Affairs and Climate Action (BMWK)](https://www.bmwk.de) as part of the research project [SofDCar (19S21002)](https://sofdcar.de).
    vintner_orchestrator: unfurl
imports:
    - tosca-vintner-profile-core.yaml
artifact_types:
    docker.image:
        derived_from: container.image
        description: expects image reference in "file"
    zip.archive:
        derived_from: source.archive
    tar.archive:
        derived_from: source.archive
    apt.package:
        derived_from: system.package
        properties:
            script:
                type: string
                required: false
                description: URL of an installation script
            repository:
                type: string
                required: false
                description: name of the repository (required if source is set)
            key:
                type: string
                required: false
                description: URL of the apt key which signs the apt repository (required if source is set)
            source:
                type: string
                required: false
                description: source of the repository
            dependencies:
                type: string
                required: false
                description: Comma separated list of apt packages that are additionally installed
            env:
                type: string
                required: false
                description: Space separated env variables
                default: ''
node_types:
    nodejs.runtime:
        derived_from: software.runtime
        metadata:
            vintner_normative: 'true'
        properties:
            application_name:
                type: string
                default: nodejs
        artifacts:
            apt_package:
                type: apt.package
                file: nodejs
                properties:
                    script: https://deb.nodesource.com/setup_18.x
        attributes:
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
    nodejs.service.application:
        derived_from: service.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
                default: nodejs18
        interfaces:
            management:
                type: management
                operations:
                    configure: npm ci
                    start: npm start
    python.runtime:
        derived_from: software.runtime
        metadata:
            vintner_normative: 'true'
        artifacts:
            apt_package:
                type: apt.package
                file: python-is-python3
                properties:
                    dependencies:
                        type: string
                        default: python3 python3-pip python3-venv
        attributes:
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
    python.service.application:
        derived_from: service.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
                default: python3
        interfaces:
            management:
                type: management
                operations:
                    configure: pip install -r requirements.txt
                    start: python main.py
    go.service.application:
        derived_from: service.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
                default: go122
    java.runtime:
        derived_from: software.runtime
        metadata:
            vintner_normative: 'true'
        properties:
            application_name:
                type: string
                default: java
        artifacts:
            apt_package:
                type: apt.package
                file: openjdk-18-jre-headless
        attributes:
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
    java.service.application:
        derived_from: service.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
                default: java21
    dotnet.runtime:
        derived_from: software.runtime
        metadata:
            vintner_normative: 'true'
        properties:
            application_name:
                type: string
                default: java
        artifacts:
            apt_package:
                type: apt.package
                file: dotnet-sdk-8.0
        attributes:
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
    csharp.service.application:
        derived_from: service.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
                default: dotnet8
    binary.service.application:
        derived_from: service.application
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            application_language:
                type: string
                default: binary
        interfaces:
            management:
                type: management
                operations:
                    start: ./{{ SELF.application_name }}
    gcp.provider:
        derived_from: cloud.provider
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            _hosting:
                type: string
                default: gcp
            gcp_region:
                type: string
            gcp_service_account_file:
                type: string
            gcp_project:
                type: string
        interfaces:
            Standard:
                operations:
                    create: exit 0
                    delete: exit 0
    gcp.service:
        derived_from: cloud.service
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            _hosting:
                type: string
                default: gcp
            gcp_service:
                type: string
                default: must-be-overridden
    gcp.cloudrun:
        derived_from: gcp.service
        metadata:
            vintner_normative: 'true'
        properties:
            gcp_service:
                type: string
                default: run.googleapis.com
    gcp.cloudsql:
        derived_from: gcp.service
        metadata:
            vintner_normative: 'true'
        properties:
            gcp_service:
                type: string
                default: sqladmin.googleapis.com
    gcp.appengine:
        derived_from: gcp.service
        metadata:
            vintner_normative: 'true'
        properties:
            gcp_service:
                type: string
                default: appengine.googleapis.com
        requirements:
            - build:
                  capability: tosca.capabilities.Root
                  relationship: tosca.relationships.DependsOn
            - reporting:
                  capability: tosca.capabilities.Root
                  relationship: tosca.relationships.DependsOn
    gcp.appenginereporting:
        derived_from: gcp.service
        metadata:
            vintner_normative: 'true'
        properties:
            gcp_service:
                type: string
                default: appenginereporting.googleapis.com
    gcp.cloudbuild:
        derived_from: gcp.service
        metadata:
            vintner_normative: 'true'
        properties:
            gcp_service:
                type: string
                default: cloudbuild.googleapis.com
    docker.engine:
        derived_from: container.runtime
        metadata:
            vintner_normative: 'true'
        properties:
            application_name:
                type: string
                default: docker
            _hosting:
                type: string
                default: docker
        attributes:
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
    kubernetes.cluster:
        derived_from: cloud.service
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            _hosting:
                type: string
                default: kubernetes
            k8s_host:
                type: string
            k8s_ca_cert_file:
                type: string
            k8s_client_cert_file:
                type: string
            k8s_client_key_file:
                type: string
        capabilities:
            host:
                type: tosca.capabilities.Compute
        interfaces:
            Standard:
                operations:
                    create: exit 0
                    delete: exit 0
    openstack.provider:
        derived_from: cloud.provider
        metadata:
            vintner_normative: 'true'
            vintner_abstract: 'true'
        properties:
            _hosting:
                type: string
                default: openstack
            os_region_name:
                type: string
            os_auth_type:
                type: string
            os_auth_url:
                type: string
            os_identity_api_version:
                type: string
            os_interface:
                type: string
            os_application_credential_id:
                type: string
            os_application_credential_secret:
                type: string
        interfaces:
            Standard:
                operations:
                    create: exit 0
                    delete: exit 0
    mysql.dbms:
        derived_from: relational.dbms
        metadata:
            vintner_normative: 'true'
        properties:
            dbms_name:
                type: string
            application_name:
                type: string
                default:
                    eval: .::dbms_name
            dbms_version:
                type: string
                default: '5.7'
            dbms_password:
                type: string
            dbms_ssl_mode:
                type: string
                default: None
        attributes:
            application_address:
                type: string
            application_port:
                type: string
            management_address:
                type: string
            management_port:
                type: string
        capabilities:
            host:
                type: tosca.capabilities.Compute
        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn
    mysql.database:
        derived_from: relational.database
        metadata:
            vintner_normative: 'true'
        properties:
            database_name:
                type: string
            database_user:
                type: string
            database_password:
                type: string
        attributes:
            application_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::application_address
            application_port:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::application_port
        capabilities:
            database:
                type: tosca.capabilities.Endpoint.Database
        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    # [OPENTOSCA_VINTNER_GENERATION_MARK]

    ################################################################
    #
    # WARNING: Do not edit! This following content is autogenerated!
    #
    ################################################################

    nodejs.runtime~software.application#apt.package::ansible@*->virtual.machine:
        derived_from: nodejs.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                      args:
                                          executable: /bin/bash
                                      when: '".artifacts::apt_package::script" | eval != ""'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::apt_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::apt_package::key" | eval != ""'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}
                                          filename: '{{ ".artifacts::apt_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::apt_package::source" | eval != ""'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::apt_package::dependencies" | eval != ""'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::apt_package::env" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    nodejs.runtime~software.application#tar.archive::ansible@*->virtual.machine:
        derived_from: nodejs.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: APPLICATION_NAME="{{ SELF.application_name }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    nodejs.runtime~software.application#zip.archive::ansible@*->virtual.machine:
        derived_from: nodejs.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: APPLICATION_NAME="{{ SELF.application_name }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    nodejs.runtime~software.application#apt.archive::terraform@*->virtual.machine:
        derived_from: nodejs.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Run setup script 
                                                    if [[ "{{ ".artifacts::apt_package::script" | eval }}" != "" ]]; then 
                                                        curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                                    fi

                                                    # Add apt key
                                                    if [[ "{{ ".artifacts::apt_package::key" | eval }}" != "" ]]; then 
                                                        curl -1sLf {{ ".artifacts::apt_package::key" | eval }} | gpg --dearmor --yes -o /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                                    fi

                                                    # Add apt repository
                                                    if [[ "{{ ".artifacts::apt_package::source" | eval }}" != "" ]]; then 
                                                        echo "deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}" | tee {{ ".artifacts::apt_package::repository" | eval }}
                                                    fi

                                                    # Update apt cache
                                                    apt-get update -y

                                                    # Install dependencies
                                                    if [[ "{{ ".artifacts::apt_package::dependencies" | eval }}" != "" ]]; then 
                                                        apt-get install {{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }} -y
                                                    fi

                                                    # Install package
                                                    {{ ".artifacts::apt_package::env" | eval }} apt-get install {{ ".artifacts::apt_package::file" | eval }} -y

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::apt_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-nodejs.runtime {{ ".artifacts::apt_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    undefined

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Uninstall package
                                                    apt-get uninstall {{ ".artifacts::apt_package::file" | eval }} -y
                                                destination: /tmp/delete-nodejs.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-nodejs.runtime.sh
                                                    - sudo bash /tmp/configure-nodejs.runtime.sh
                                                    - sudo bash /tmp/start-nodejs.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-nodejs.runtime.sh
                                                    - sudo bash /tmp/delete-nodejs.runtime.sh
                                                when: destroy
    nodejs.runtime~software.application#tar.archive::terraform@*->virtual.machine:
        derived_from: nodejs.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                                destination: /tmp/artifact-nodejs.runtime
                                                count: '{{ (not (".artifacts::tar_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::tar_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-nodejs.runtime {{ ".artifacts::tar_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    tar -xzf /tmp/artifact-nodejs.runtime -C {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-nodejs.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-nodejs.runtime.sh
                                                    - sudo bash /tmp/configure-nodejs.runtime.sh
                                                    - sudo bash /tmp/start-nodejs.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-nodejs.runtime.sh
                                                    - sudo bash /tmp/delete-nodejs.runtime.sh
                                                when: destroy
    nodejs.runtime~software.application#zip.archive::terraform@*->virtual.machine:
        derived_from: nodejs.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                                destination: /tmp/artifact-nodejs.runtime
                                                count: '{{ (not (".artifacts::zip_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::zip_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-nodejs.runtime {{ ".artifacts::zip_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    unzip /tmp/artifact-nodejs.runtime -d {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-nodejs.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-nodejs.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-nodejs.runtime.sh
                                                    - sudo bash /tmp/configure-nodejs.runtime.sh
                                                    - sudo bash /tmp/start-nodejs.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-nodejs.runtime.sh
                                                    - sudo bash /tmp/delete-nodejs.runtime.sh
                                                when: destroy
    python.runtime~software.application#apt.package::ansible@*->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                      args:
                                          executable: /bin/bash
                                      when: '".artifacts::apt_package::script" | eval != ""'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::apt_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::apt_package::key" | eval != ""'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}
                                          filename: '{{ ".artifacts::apt_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::apt_package::source" | eval != ""'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::apt_package::dependencies" | eval != ""'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::apt_package::env" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    python.runtime~software.application#tar.archive::ansible@*->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: ''
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    python.runtime~software.application#zip.archive::ansible@*->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: ''
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    python.runtime~software.application#apt.archive::terraform@*->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Run setup script 
                                                    if [[ "{{ ".artifacts::apt_package::script" | eval }}" != "" ]]; then 
                                                        curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                                    fi

                                                    # Add apt key
                                                    if [[ "{{ ".artifacts::apt_package::key" | eval }}" != "" ]]; then 
                                                        curl -1sLf {{ ".artifacts::apt_package::key" | eval }} | gpg --dearmor --yes -o /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                                    fi

                                                    # Add apt repository
                                                    if [[ "{{ ".artifacts::apt_package::source" | eval }}" != "" ]]; then 
                                                        echo "deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}" | tee {{ ".artifacts::apt_package::repository" | eval }}
                                                    fi

                                                    # Update apt cache
                                                    apt-get update -y

                                                    # Install dependencies
                                                    if [[ "{{ ".artifacts::apt_package::dependencies" | eval }}" != "" ]]; then 
                                                        apt-get install {{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }} -y
                                                    fi

                                                    # Install package
                                                    {{ ".artifacts::apt_package::env" | eval }} apt-get install {{ ".artifacts::apt_package::file" | eval }} -y

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env

                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::apt_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-python.runtime {{ ".artifacts::apt_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    undefined

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Uninstall package
                                                    apt-get uninstall {{ ".artifacts::apt_package::file" | eval }} -y
                                                destination: /tmp/delete-python.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-python.runtime.sh
                                                    - sudo bash /tmp/configure-python.runtime.sh
                                                    - sudo bash /tmp/start-python.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-python.runtime.sh
                                                    - sudo bash /tmp/delete-python.runtime.sh
                                                when: destroy
    python.runtime~software.application#tar.archive::terraform@*->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                                destination: /tmp/artifact-python.runtime
                                                count: '{{ (not (".artifacts::tar_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env

                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::tar_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-python.runtime {{ ".artifacts::tar_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    tar -xzf /tmp/artifact-python.runtime -C {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-python.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-python.runtime.sh
                                                    - sudo bash /tmp/configure-python.runtime.sh
                                                    - sudo bash /tmp/start-python.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-python.runtime.sh
                                                    - sudo bash /tmp/delete-python.runtime.sh
                                                when: destroy
    python.runtime~software.application#zip.archive::terraform@*->virtual.machine:
        derived_from: python.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                                destination: /tmp/artifact-python.runtime
                                                count: '{{ (not (".artifacts::zip_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env

                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::zip_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-python.runtime {{ ".artifacts::zip_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    unzip /tmp/artifact-python.runtime -d {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-python.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-python.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-python.runtime.sh
                                                    - sudo bash /tmp/configure-python.runtime.sh
                                                    - sudo bash /tmp/start-python.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-python.runtime.sh
                                                    - sudo bash /tmp/delete-python.runtime.sh
                                                when: destroy
    java.runtime~software.application#apt.package::ansible@*->virtual.machine:
        derived_from: java.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                      args:
                                          executable: /bin/bash
                                      when: '".artifacts::apt_package::script" | eval != ""'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::apt_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::apt_package::key" | eval != ""'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}
                                          filename: '{{ ".artifacts::apt_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::apt_package::source" | eval != ""'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::apt_package::dependencies" | eval != ""'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::apt_package::env" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    java.runtime~software.application#tar.archive::ansible@*->virtual.machine:
        derived_from: java.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: APPLICATION_NAME="{{ SELF.application_name }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    java.runtime~software.application#zip.archive::ansible@*->virtual.machine:
        derived_from: java.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: APPLICATION_NAME="{{ SELF.application_name }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    java.runtime~software.application#apt.archive::terraform@*->virtual.machine:
        derived_from: java.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Run setup script 
                                                    if [[ "{{ ".artifacts::apt_package::script" | eval }}" != "" ]]; then 
                                                        curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                                    fi

                                                    # Add apt key
                                                    if [[ "{{ ".artifacts::apt_package::key" | eval }}" != "" ]]; then 
                                                        curl -1sLf {{ ".artifacts::apt_package::key" | eval }} | gpg --dearmor --yes -o /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                                    fi

                                                    # Add apt repository
                                                    if [[ "{{ ".artifacts::apt_package::source" | eval }}" != "" ]]; then 
                                                        echo "deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}" | tee {{ ".artifacts::apt_package::repository" | eval }}
                                                    fi

                                                    # Update apt cache
                                                    apt-get update -y

                                                    # Install dependencies
                                                    if [[ "{{ ".artifacts::apt_package::dependencies" | eval }}" != "" ]]; then 
                                                        apt-get install {{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }} -y
                                                    fi

                                                    # Install package
                                                    {{ ".artifacts::apt_package::env" | eval }} apt-get install {{ ".artifacts::apt_package::file" | eval }} -y

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::apt_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-java.runtime {{ ".artifacts::apt_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    undefined

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Uninstall package
                                                    apt-get uninstall {{ ".artifacts::apt_package::file" | eval }} -y
                                                destination: /tmp/delete-java.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-java.runtime.sh
                                                    - sudo bash /tmp/configure-java.runtime.sh
                                                    - sudo bash /tmp/start-java.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-java.runtime.sh
                                                    - sudo bash /tmp/delete-java.runtime.sh
                                                when: destroy
    java.runtime~software.application#tar.archive::terraform@*->virtual.machine:
        derived_from: java.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                                destination: /tmp/artifact-java.runtime
                                                count: '{{ (not (".artifacts::tar_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::tar_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-java.runtime {{ ".artifacts::tar_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    tar -xzf /tmp/artifact-java.runtime -C {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-java.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-java.runtime.sh
                                                    - sudo bash /tmp/configure-java.runtime.sh
                                                    - sudo bash /tmp/start-java.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-java.runtime.sh
                                                    - sudo bash /tmp/delete-java.runtime.sh
                                                when: destroy
    java.runtime~software.application#zip.archive::terraform@*->virtual.machine:
        derived_from: java.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                                destination: /tmp/artifact-java.runtime
                                                count: '{{ (not (".artifacts::zip_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::zip_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-java.runtime {{ ".artifacts::zip_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    unzip /tmp/artifact-java.runtime -d {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-java.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-java.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-java.runtime.sh
                                                    - sudo bash /tmp/configure-java.runtime.sh
                                                    - sudo bash /tmp/start-java.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-java.runtime.sh
                                                    - sudo bash /tmp/delete-java.runtime.sh
                                                when: destroy
    dotnet.runtime~software.application#apt.package::ansible@*->virtual.machine:
        derived_from: dotnet.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                      args:
                                          executable: /bin/bash
                                      when: '".artifacts::apt_package::script" | eval != ""'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::apt_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::apt_package::key" | eval != ""'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}
                                          filename: '{{ ".artifacts::apt_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::apt_package::source" | eval != ""'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::apt_package::dependencies" | eval != ""'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::apt_package::env" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    dotnet.runtime~software.application#tar.archive::ansible@*->virtual.machine:
        derived_from: dotnet.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: APPLICATION_NAME="{{ SELF.application_name }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    dotnet.runtime~software.application#zip.archive::ansible@*->virtual.machine:
        derived_from: dotnet.runtime
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: APPLICATION_NAME="{{ SELF.application_name }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    dotnet.runtime~software.application#apt.archive::terraform@*->virtual.machine:
        derived_from: dotnet.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Run setup script 
                                                    if [[ "{{ ".artifacts::apt_package::script" | eval }}" != "" ]]; then 
                                                        curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                                    fi

                                                    # Add apt key
                                                    if [[ "{{ ".artifacts::apt_package::key" | eval }}" != "" ]]; then 
                                                        curl -1sLf {{ ".artifacts::apt_package::key" | eval }} | gpg --dearmor --yes -o /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                                    fi

                                                    # Add apt repository
                                                    if [[ "{{ ".artifacts::apt_package::source" | eval }}" != "" ]]; then 
                                                        echo "deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}" | tee {{ ".artifacts::apt_package::repository" | eval }}
                                                    fi

                                                    # Update apt cache
                                                    apt-get update -y

                                                    # Install dependencies
                                                    if [[ "{{ ".artifacts::apt_package::dependencies" | eval }}" != "" ]]; then 
                                                        apt-get install {{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }} -y
                                                    fi

                                                    # Install package
                                                    {{ ".artifacts::apt_package::env" | eval }} apt-get install {{ ".artifacts::apt_package::file" | eval }} -y

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::apt_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-dotnet.runtime {{ ".artifacts::apt_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    undefined

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Uninstall package
                                                    apt-get uninstall {{ ".artifacts::apt_package::file" | eval }} -y
                                                destination: /tmp/delete-dotnet.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-dotnet.runtime.sh
                                                    - sudo bash /tmp/configure-dotnet.runtime.sh
                                                    - sudo bash /tmp/start-dotnet.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-dotnet.runtime.sh
                                                    - sudo bash /tmp/delete-dotnet.runtime.sh
                                                when: destroy
    dotnet.runtime~software.application#tar.archive::terraform@*->virtual.machine:
        derived_from: dotnet.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                                destination: /tmp/artifact-dotnet.runtime
                                                count: '{{ (not (".artifacts::tar_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::tar_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-dotnet.runtime {{ ".artifacts::tar_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    tar -xzf /tmp/artifact-dotnet.runtime -C {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-dotnet.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-dotnet.runtime.sh
                                                    - sudo bash /tmp/configure-dotnet.runtime.sh
                                                    - sudo bash /tmp/start-dotnet.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-dotnet.runtime.sh
                                                    - sudo bash /tmp/delete-dotnet.runtime.sh
                                                when: destroy
    dotnet.runtime~software.application#zip.archive::terraform@*->virtual.machine:
        derived_from: dotnet.runtime
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                                destination: /tmp/artifact-dotnet.runtime
                                                count: '{{ (not (".artifacts::zip_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::zip_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-dotnet.runtime {{ ".artifacts::zip_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    unzip /tmp/artifact-dotnet.runtime -d {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-dotnet.runtime.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-dotnet.runtime.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-dotnet.runtime.sh
                                                    - sudo bash /tmp/configure-dotnet.runtime.sh
                                                    - sudo bash /tmp/start-dotnet.runtime.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-dotnet.runtime.sh
                                                    - sudo bash /tmp/delete-dotnet.runtime.sh
                                                when: destroy
    gcp.cloudrun~gcp.service::ansible:
        derived_from: gcp.cloudrun
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                                          project: '{{ SELF.gcp_project }}'
                    delete: exit 0
    gcp.cloudrun~gcp.service::terraform:
        derived_from: gcp.cloudrun
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    gcp.cloudsql~gcp.service::ansible:
        derived_from: gcp.cloudsql
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                                          project: '{{ SELF.gcp_project }}'
                    delete: exit 0
    gcp.cloudsql~gcp.service::terraform:
        derived_from: gcp.cloudsql
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    gcp.appengine~gcp.service::ansible:
        derived_from: gcp.appengine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                                          project: '{{ SELF.gcp_project }}'
                    delete: exit 0
    gcp.appengine~gcp.service::terraform:
        derived_from: gcp.appengine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    gcp.appenginereporting~gcp.service::ansible:
        derived_from: gcp.appenginereporting
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                                          project: '{{ SELF.gcp_project }}'
                    delete: exit 0
    gcp.appenginereporting~gcp.service::terraform:
        derived_from: gcp.appenginereporting
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    gcp.cloudbuild~gcp.service::ansible:
        derived_from: gcp.cloudbuild
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: enable service
                                      google.cloud.gcp_serviceusage_service:
                                          name: '{{ SELF.gcp_service }}'
                                          project: '{{ SELF.gcp_project }}'
                    delete: exit 0
    gcp.cloudbuild~gcp.service::terraform:
        derived_from: gcp.cloudbuild
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        resource:
                            google_project_service:
                                cloud_sql_admin:
                                    - disable_on_destroy: false
                                      project: '{{ SELF.gcp_project }}'
                                      service: '{{ SELF.gcp_service }}'
    docker.engine~docker.engine::ansible@virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install docker
                                      ansible.builtin.shell: curl -sSL https://get.docker.com | sh
                                      args:
                                          executable: /usr/bin/bash
                                    - name: add docker group
                                      ansible.builtin.group:
                                          name: docker
                                    - name: add user to docker group
                                      ansible.builtin.user:
                                          name: '{{ SELF.os_ssh_user }}'
                                          groups: docker
                                          append: 'yes'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    docker.engine~software.application#apt.package::ansible@*->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                      args:
                                          executable: /bin/bash
                                      when: '".artifacts::apt_package::script" | eval != ""'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::apt_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::apt_package::key" | eval != ""'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}
                                          filename: '{{ ".artifacts::apt_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::apt_package::source" | eval != ""'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::apt_package::dependencies" | eval != ""'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::apt_package::env" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    docker.engine~software.application#tar.archive::ansible@*->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              APPLICATION_NAME="{{ SELF.application_name }}"
                                              _HOSTING="{{ SELF._hosting }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    docker.engine~software.application#zip.archive::ansible@*->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              APPLICATION_NAME="{{ SELF.application_name }}"
                                              _HOSTING="{{ SELF._hosting }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    docker.engine~docker.engine::terraform@virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                docker:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          remote-exec:
                                              - inline:
                                                    - curl -sSL https://get.docker.com | sudo sh
                                                    - sudo groupadd -f docker
                                                    - sudo usermod -aG docker {{ SELF.os_ssh_user }}
    docker.engine~software.application#apt.archive::terraform@*->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Run setup script 
                                                    if [[ "{{ ".artifacts::apt_package::script" | eval }}" != "" ]]; then 
                                                        curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                                    fi

                                                    # Add apt key
                                                    if [[ "{{ ".artifacts::apt_package::key" | eval }}" != "" ]]; then 
                                                        curl -1sLf {{ ".artifacts::apt_package::key" | eval }} | gpg --dearmor --yes -o /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                                    fi

                                                    # Add apt repository
                                                    if [[ "{{ ".artifacts::apt_package::source" | eval }}" != "" ]]; then 
                                                        echo "deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}" | tee {{ ".artifacts::apt_package::repository" | eval }}
                                                    fi

                                                    # Update apt cache
                                                    apt-get update -y

                                                    # Install dependencies
                                                    if [[ "{{ ".artifacts::apt_package::dependencies" | eval }}" != "" ]]; then 
                                                        apt-get install {{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }} -y
                                                    fi

                                                    # Install package
                                                    {{ ".artifacts::apt_package::env" | eval }} apt-get install {{ ".artifacts::apt_package::file" | eval }} -y

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    _HOSTING="{{ SELF._hosting }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::apt_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-docker.engine {{ ".artifacts::apt_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    undefined

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Uninstall package
                                                    apt-get uninstall {{ ".artifacts::apt_package::file" | eval }} -y
                                                destination: /tmp/delete-docker.engine.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-docker.engine.sh
                                                    - sudo bash /tmp/configure-docker.engine.sh
                                                    - sudo bash /tmp/start-docker.engine.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-docker.engine.sh
                                                    - sudo bash /tmp/delete-docker.engine.sh
                                                when: destroy
    docker.engine~software.application#tar.archive::terraform@*->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                                destination: /tmp/artifact-docker.engine
                                                count: '{{ (not (".artifacts::tar_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    _HOSTING="{{ SELF._hosting }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::tar_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-docker.engine {{ ".artifacts::tar_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    tar -xzf /tmp/artifact-docker.engine -C {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-docker.engine.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-docker.engine.sh
                                                    - sudo bash /tmp/configure-docker.engine.sh
                                                    - sudo bash /tmp/start-docker.engine.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-docker.engine.sh
                                                    - sudo bash /tmp/delete-docker.engine.sh
                                                when: destroy
    docker.engine~software.application#zip.archive::terraform@*->virtual.machine:
        derived_from: docker.engine
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                                destination: /tmp/artifact-docker.engine
                                                count: '{{ (not (".artifacts::zip_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    _HOSTING="{{ SELF._hosting }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::zip_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-docker.engine {{ ".artifacts::zip_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    unzip /tmp/artifact-docker.engine -d {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-docker.engine.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-docker.engine.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-docker.engine.sh
                                                    - sudo bash /tmp/configure-docker.engine.sh
                                                    - sudo bash /tmp/start-docker.engine.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-docker.engine.sh
                                                    - sudo bash /tmp/delete-docker.engine.sh
                                                when: destroy
    mysql.dbms~mysql.dbms::ansible@docker.engine->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
            application_port:
                type: string
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default: 3306
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: start container
                                      community.docker.docker_container:
                                          name: '{{ SELF.dbms_name }}'
                                          image: mysql:{{ SELF.dbms_version }}
                                          network_mode: host
                                          env:
                                              MYSQL_ROOT_PASSWORD: '{{ SELF.dbms_password | string }}'
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.dbms~mysql.dbms::ansible@gcp.cloudsql:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
            dbms_ssl_mode:
                type: string
                default: Preferred
        attributes:
            application_port:
                type: string
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: create a instance
                                      register: instance_info
                                      google.cloud.gcp_sql_instance:
                                          name: '{{  SELF.dbms_name }}'
                                          database_version: MYSQL_{{ SELF.dbms_version | replace(".", "_") }}
                                          settings:
                                              tier: db-f1-micro
                                              availability_type: REGIONAL
                                              backup_configuration:
                                                  binary_log_enabled: true
                                                  enabled: true
                                              ip_configuration:
                                                  authorized_networks:
                                                      - value: 0.0.0.0/0
                                          region: '{{ SELF.gcp_region }}'
                                          project: '{{ SELF.gcp_project }}'
                                    - name: set root password
                                      google.cloud.gcp_sql_user:
                                          name: root
                                          host: '%'
                                          password: '{{ SELF.dbms_password }}'
                                          instance: '{{ instance_info }}'
                                          project: '{{ SELF.gcp_project }}'
                                    - name: aet attributes
                                      set_fact:
                                          application_address: '{{ instance_info.ipAddresses[0].ipAddress | trim }}'
                            resultTemplate: |
                                name: SELF
                                attributes:
                                    application_address: '{{ outputs.application_address }}'
                        outputs:
                            application_address:
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: Activate service account
                                      ansible.builtin.shell: gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}
                                      args:
                                          executable: /bin/bash
                                    - name: Delete Instance
                                      ansible.builtin.shell: gcloud sql instances delete {{ SELF.dbms_name }} --quiet
                                      args:
                                          executable: /bin/bash
    mysql.dbms~mysql.dbms::ansible@kubernetes.cluster:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::dbms_name
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                K8S_AUTH_HOST:
                                    eval: .::k8s_host
                                K8S_AUTH_SSL_CA_CERT:
                                    eval: .::k8s_ca_cert_file
                                K8S_AUTH_CERT_FILE:
                                    eval: .::k8s_client_cert_file
                                K8S_AUTH_KEY_FILE:
                                    eval: .::k8s_client_key_file
                        inputs:
                            playbook:
                                q:
                                    - name: create deployment
                                      kubernetes.core.k8s:
                                          wait: true
                                          definition:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.dbms_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.dbms_name }}'
                                                      spec:
                                                          containers:
                                                              - image: mysql:{{ SELF.dbms_version }}
                                                                name: '{{ SELF.dbms_name }}'
                                                                env:
                                                                    - name: MYSQL_ROOT_PASSWORD
                                                                      value: '{{ SELF.dbms_password }}'
                                                                ports:
                                                                    - containerPort: 3306
                                                                      name: mysql
                                    - name: create service
                                      kubernetes.core.k8s:
                                          definition:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  ports:
                                                      - name: mysql
                                                        port: 3306
                                                        targetPort: 3306
                                                  selector:
                                                      app: '{{ SELF.dbms_name }}'
                                                  type: ClusterIP
                    delete: exit 0
    mysql.dbms~mysql.dbms::ansible@virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_port:
                type: string
                default: 3001
            application_address:
                type: string
                default: 127.0.0.1
        attributes:
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: Installing mysql
                                      ansible.builtin.apt:
                                          name: '{{ item }}'
                                          state: present
                                          update_cache: 'yes'
                                      loop:
                                          - mysql-server
                                          - mysql-client
                                          - python3-mysqldb
                                          - libmysqlclient-dev
                                    - name: Start and enable mysql service
                                      ansible.builtin.systemd:
                                          name: mysql
                                          state: started
                                          enabled: 'yes'
                                    - name: Enable passwordless login
                                      ansible.builtin.copy:
                                          dest: '{{ item }}'
                                          content: |
                                              [client]
                                              user=root
                                              password={{ SELF.dbms_password }}
                                      loop:
                                          - /root/.my.cnf
                                          - /home/{{ SELF.os_ssh_user }}/.my.cnf
                                    - name: Configure port (e.g., since 3306 is blocked by the provider)
                                      ansible.builtin.lineinfile:
                                          path: /etc/mysql/mysql.conf.d/mysqld.cnf
                                          regexp: ^# port
                                          line: port = {{ SELF.application_port }}
                                          backup: 'yes'
                                    - name: Enable remote login
                                      ansible.builtin.lineinfile:
                                          path: /etc/mysql/mysql.conf.d/mysqld.cnf
                                          regexp: ^bind-address
                                          line: bind-address = 0.0.0.0
                                          backup: 'yes'
                                    - name: Restart mysql
                                      ansible.builtin.systemd:
                                          name: mysql
                                          state: restarted
                                    - name: Create all root
                                      community.mysql.mysql_user:
                                          name: root
                                          password: '{{ SELF.dbms_password }}'
                                          priv: '*.*:ALL'
                                          host: '%'
                                          state: present
                                          login_host: localhost
                                          login_password: '{{ SELF.dbms_password }}'
                                          login_port: '{{ SELF.application_port }}'
                                          login_user: root
                                    - name: Delete localhost root
                                      community.mysql.mysql_user:
                                          name: root
                                          host: localhost
                                          state: absent
                                          login_host: localhost
                                          login_password: '{{ SELF.dbms_password }}'
                                          login_port: '{{ SELF.application_port }}'
                                          login_user: root
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.dbms~software.application#apt.package::ansible@*->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: run setup script
                                      ansible.builtin.shell: curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                      args:
                                          executable: /bin/bash
                                      when: '".artifacts::apt_package::script" | eval != ""'
                                    - name: add apt key
                                      ansible.builtin.apt_key:
                                          url: '{{ ".artifacts::apt_package::key" | eval }}'
                                          keyring: /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                          state: present
                                      when: '".artifacts::apt_package::key" | eval != ""'
                                    - name: add apt repository
                                      ansible.builtin.apt_repository:
                                          repo: deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}
                                          filename: '{{ ".artifacts::apt_package::repository" | eval }}'
                                          state: present
                                      when: '".artifacts::apt_package::source" | eval != ""'
                                    - name: update apt cache
                                      ansible.builtin.apt:
                                          update_cache: 'yes'
                                    - name: install dependencies
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }}'
                                          state: present
                                      when: '".artifacts::apt_package::dependencies" | eval != ""'
                                    - name: install package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: present
                                      environment: '{{ ".artifacts::apt_package::env" | eval | split | map("split", "=") | community.general.dict }}'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                                    - name: uninstall package
                                      ansible.builtin.apt:
                                          name: '{{ ".artifacts::apt_package::file" | eval }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    mysql.dbms~software.application#tar.archive::ansible@*->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact from URL in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ ".artifacts::tar_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          remote_src: 'yes'
                                          extra_opts: '{{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}'
                                      when: (".artifacts::tar_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              DBMS_NAME="{{ SELF.dbms_name }}"
                                              APPLICATION_NAME="{{ SELF.application_name }}"
                                              DBMS_VERSION="{{ SELF.dbms_version }}"
                                              DBMS_PASSWORD="{{ SELF.dbms_password }}"
                                              DBMS_SSL_MODE="{{ SELF.dbms_ssl_mode }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    mysql.dbms~software.application#zip.archive::ansible@*->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install operational dependencies
                                      ansible.builtin.apt:
                                          name: unzip
                                          update_cache: 'yes'
                                    - name: create application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: directory
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: extract deployment artifact in application directory
                                      ansible.builtin.unarchive:
                                          src: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                          dest: '{{ SELF.application_directory }}'
                                          extra_opts: '{{ ".artifacts::zip_archive::extra_opts" | eval | map_value }}'
                                      when: not (".artifacts::zip_archive::file" | eval).startswith("http")
                                    - name: create vintner directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}/.vintner'
                                          state: directory
                                    - name: create .env file
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.env'
                                          content: |-
                                              DBMS_NAME="{{ SELF.dbms_name }}"
                                              APPLICATION_NAME="{{ SELF.application_name }}"
                                              DBMS_VERSION="{{ SELF.dbms_version }}"
                                              DBMS_PASSWORD="{{ SELF.dbms_password }}"
                                              DBMS_SSL_MODE="{{ SELF.dbms_ssl_mode }}"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/create.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/create.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_create != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    configure:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/configure.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/configure.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_configure != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    start:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "start" missing
                                      when: SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/start.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/start.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_start != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    stop:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: assert management operation
                                      ansible.builtin.fail:
                                          dest: Management operation "stop" missing
                                      when: SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/stop.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/stop.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_stop != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: copy management operation
                                      ansible.builtin.copy:
                                          dest: '{{ SELF.application_directory }}/.vintner/delete.sh'
                                          content: |-
                                              #!/usr/bin/bash
                                              set -e

                                              {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                          mode: '0755'
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: call management operation
                                      ansible.builtin.shell: . .env && . .vintner/delete.sh
                                      args:
                                          chdir: '{{ SELF.application_directory }}'
                                          executable: /bin/bash
                                      when: SELF._management_delete != "VINTNER_MANAGEMENT_OPERATION_UNDEFINED"
                                    - name: delete application directory
                                      ansible.builtin.file:
                                          path: '{{ SELF.application_directory }}'
                                          state: absent
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
    mysql.dbms~mysql.dbms::terraform@docker.engine->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default: 3306
        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - docker:
                                        source: kreuzwerker/docker
                                        version: 3.0.2
                        provider:
                            docker:
                                - host: ssh://{{ SELF.os_ssh_user }}@{{ SELF.os_ssh_host }}:22
                                  ssh_opts:
                                      - '-i'
                                      - '{{ SELF.os_ssh_key_file }}'
                                      - '-o'
                                      - IdentitiesOnly=yes
                                      - '-o'
                                      - BatchMode=yes
                                      - '-o'
                                      - UserKnownHostsFile=/dev/null
                                      - '-o'
                                      - StrictHostKeyChecking=no
                        resource:
                            docker_container:
                                application:
                                    - name: '{{ SELF.dbms_name }}'
                                      image: ${docker_image.image.image_id}
                                      network_mode: host
                                      env:
                                          - MYSQL_ROOT_PASSWORD={{ SELF.dbms_password }}
                            docker_image:
                                image:
                                    - name: mysql:{{ SELF.dbms_version }}
    mysql.dbms~mysql.dbms::terraform@gcp.cloudsql:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
            dbms_ssl_mode:
                type: string
                default: Preferred
        attributes:
            application_port:
                type: string
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                outputs:
                    application_address: application_address
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 4.67.0
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                        output:
                            application_address:
                                - value: ${google_sql_database_instance.dbms.public_ip_address}
                        resource:
                            google_sql_database_instance:
                                dbms:
                                    - database_version: MYSQL_{{ SELF.dbms_version | replace(".", "_") }}
                                      deletion_protection: false
                                      name: '{{ SELF.dbms_name }}'
                                      root_password: '{{ SELF.dbms_password }}'
                                      settings:
                                          - availability_type: REGIONAL
                                            backup_configuration:
                                                - binary_log_enabled: true
                                                  enabled: true
                                            ip_configuration:
                                                - authorized_networks:
                                                      - name: public
                                                        value: 0.0.0.0/0
                                                  ipv4_enabled: true
                                            tier: db-f1-micro
                            google_sql_user:
                                user:
                                    - host: '%'
                                      instance: ${google_sql_database_instance.dbms.name}
                                      name: root
                                      password: ${google_sql_database_instance.dbms.root_password}
    mysql.dbms~mysql.dbms::terraform@kubernetes.cluster:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::dbms_name
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - kubernetes:
                                        source: hashicorp/kubernetes
                                        version: 2.31.0
                              required_version: '>= 0.14.0'
                        provider:
                            kubernetes:
                                - client_certificate: ${file("{{ SELF.k8s_client_cert_file }}")}
                                  client_key: ${file("{{ SELF.k8s_client_key_file }}")}
                                  cluster_ca_certificate: ${file("{{ SELF.k8s_ca_cert_file }}")}
                                  host: '{{ SELF.k8s_host }}'
                        resource:
                            kubernetes_deployment_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.dbms_name }}'
                                      spec:
                                          - selector:
                                                - match_labels:
                                                      app: '{{ SELF.dbms_name }}'
                                            template:
                                                - metadata:
                                                      - labels:
                                                            app: '{{ SELF.dbms_name }}'
                                                  spec:
                                                      - container:
                                                            - name: '{{ SELF.dbms_name }}'
                                                              image: mysql:{{ SELF.dbms_version }}
                                                              env:
                                                                  - name: MYSQL_ROOT_PASSWORD
                                                                    value: '{{ SELF.dbms_password }}'
                                                              port:
                                                                  - container_port: 3306
                                                                    name: mysql
                            kubernetes_service_v1:
                                application:
                                    - metadata:
                                          - name: '{{ SELF.dbms_name }}'
                                      spec:
                                          - port:
                                                - name: mysql
                                                  port: 3306
                                                  target_port: 3306
                                            selector:
                                                app: '{{ SELF.dbms_name }}'
                                            type: ClusterIP
    mysql.dbms~mysql.dbms::terraform@virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_port:
                type: string
                default: 3001
            application_address:
                type: string
                default: 127.0.0.1
        attributes:
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |

                                                    #!/usr/bin/bash
                                                    set -e
                                                    export DEBIAN_FRONTEND="noninteractive"

                                                    DBMS_PASSWORD=$1
                                                    DBMS_PORT=$2

                                                    # Set password
                                                    debconf-set-selections <<< "mysql-server mysql-server/root_password password ${DBMS_PASSWORD}"
                                                    debconf-set-selections <<< "mysql-server mysql-server/root_password_again password ${DBMS_PASSWORD}"

                                                    # Install mysql
                                                    apt-get update -y
                                                    apt-get -y install mysql-server

                                                    # Passwordless auth
                                                    cat <<EOF > /root/.my.cnf
                                                    [client]
                                                    user=root
                                                    password=${DBMS_PASSWORD}
                                                    EOF

                                                    # Listen on all interfaces
                                                    sed -i "s/127\.0\.0\.1/0\.0\.0\.0/g" /etc/mysql/mysql.conf.d/mysqld.cnf

                                                    # Listen on custom port
                                                    sed -i "s/# port.*/port = ${DBMS_PORT}/g" /etc/mysql/mysql.conf.d/mysqld.cnf

                                                    # Configure any host for root
                                                    mysql -u root -e 'USE mysql; UPDATE user SET host = "%" WHERE user = "root"; FLUSH PRIVILEGES;'
                                                    mysql -u root -e 'USE mysql; DELETE FROM user WHERE user = "root" and host = "localhost"; FLUSH PRIVILEGES;'

                                                    # Enable service
                                                    systemctl enable mysql

                                                    # Restart service
                                                    systemctl restart mysql
                                                destination: /tmp/install-mysql-dbms.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/install-mysql-dbms.sh {{ SELF.dbms_password }} {{ SELF.application_port }}
    mysql.dbms~software.application#apt.archive::terraform@*->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Run setup script 
                                                    if [[ "{{ ".artifacts::apt_package::script" | eval }}" != "" ]]; then 
                                                        curl -fsSL {{ ".artifacts::apt_package::script" | eval }} | sudo -E bash -
                                                    fi

                                                    # Add apt key
                                                    if [[ "{{ ".artifacts::apt_package::key" | eval }}" != "" ]]; then 
                                                        curl -1sLf {{ ".artifacts::apt_package::key" | eval }} | gpg --dearmor --yes -o /usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg
                                                    fi

                                                    # Add apt repository
                                                    if [[ "{{ ".artifacts::apt_package::source" | eval }}" != "" ]]; then 
                                                        echo "deb [signed-by=/usr/share/keyrings/{{ ".artifacts::apt_package::repository" | eval }}.gpg] {{ ".artifacts::apt_package::source" | eval }}" | tee {{ ".artifacts::apt_package::repository" | eval }}
                                                    fi

                                                    # Update apt cache
                                                    apt-get update -y

                                                    # Install dependencies
                                                    if [[ "{{ ".artifacts::apt_package::dependencies" | eval }}" != "" ]]; then 
                                                        apt-get install {{ ".artifacts::apt_package::dependencies" | eval | split(",") | map("trim") }} -y
                                                    fi

                                                    # Install package
                                                    {{ ".artifacts::apt_package::env" | eval }} apt-get install {{ ".artifacts::apt_package::file" | eval }} -y

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    DBMS_NAME="{{ SELF.dbms_name }}"
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    DBMS_VERSION="{{ SELF.dbms_version }}"
                                                    DBMS_PASSWORD="{{ SELF.dbms_password }}"
                                                    DBMS_SSL_MODE="{{ SELF.dbms_ssl_mode }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::apt_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-mysql.dbms {{ ".artifacts::apt_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    undefined

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"

                                                    # Uninstall package
                                                    apt-get uninstall {{ ".artifacts::apt_package::file" | eval }} -y
                                                destination: /tmp/delete-mysql.dbms.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-mysql.dbms.sh
                                                    - sudo bash /tmp/configure-mysql.dbms.sh
                                                    - sudo bash /tmp/start-mysql.dbms.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-mysql.dbms.sh
                                                    - sudo bash /tmp/delete-mysql.dbms.sh
                                                when: destroy
    mysql.dbms~software.application#tar.archive::terraform@*->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::tar_archive::file" | eval }}'
                                                destination: /tmp/artifact-mysql.dbms
                                                count: '{{ (not (".artifacts::tar_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    DBMS_NAME="{{ SELF.dbms_name }}"
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    DBMS_VERSION="{{ SELF.dbms_version }}"
                                                    DBMS_PASSWORD="{{ SELF.dbms_password }}"
                                                    DBMS_SSL_MODE="{{ SELF.dbms_ssl_mode }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::tar_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-mysql.dbms {{ ".artifacts::tar_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    tar -xzf /tmp/artifact-mysql.dbms -C {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-mysql.dbms.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-mysql.dbms.sh
                                                    - sudo bash /tmp/configure-mysql.dbms.sh
                                                    - sudo bash /tmp/start-mysql.dbms.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-mysql.dbms.sh
                                                    - sudo bash /tmp/delete-mysql.dbms.sh
                                                when: destroy
    mysql.dbms~software.application#zip.archive::terraform@*->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            application_directory:
                type: string
                default:
                    concat:
                        - /var/lib/
                        - get_property:
                              - SELF
                              - application_name
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        resource:
                            terraform_data:
                                vm:
                                    - connection:
                                          - host: '{{ SELF.os_ssh_host }}'
                                            private_key: ${file("{{ SELF.os_ssh_key_file }}")}
                                            type: ssh
                                            user: '{{ SELF.os_ssh_user }}'
                                      provisioner:
                                          file:
                                              - source: '{{ "project" | get_dir }}/ensemble/{{  ".artifacts::zip_archive::file" | eval }}'
                                                destination: /tmp/artifact-mysql.dbms
                                                count: '{{ (not (".artifacts::zip_archive::file" | eval).startswith("http")) | ternary(1, 0) }}'
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Create application directory
                                                    mkdir -p {{ SELF.application_directory }}

                                                    # Create application environment
                                                    cat <<EOF > {{ SELF.application_directory }}/.env
                                                    DBMS_NAME="{{ SELF.dbms_name }}"
                                                    APPLICATION_NAME="{{ SELF.application_name }}"
                                                    DBMS_VERSION="{{ SELF.dbms_version }}"
                                                    DBMS_PASSWORD="{{ SELF.dbms_password }}"
                                                    DBMS_SSL_MODE="{{ SELF.dbms_ssl_mode }}"
                                                    EOF>>

                                                    # Download deployment artifact if required
                                                    if [[ "{{ ".artifacts::zip_archive::file" | eval }}" == http* ]]; then 
                                                        wget -O /tmp/artifact-mysql.dbms {{ ".artifacts::zip_archive::file" | eval }} 
                                                    fi

                                                    # Extract deployment artifact
                                                    unzip /tmp/artifact-mysql.dbms -d {{ SELF.application_directory }} {{ ".artifacts::tar_archive::extra_opts" | eval | map_value }}

                                                    # Create vintner directory
                                                    mkdir -p {{ SELF.application_directory }}/.vintner

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/create.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_create == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/create.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/create.sh
                                                destination: /tmp/create-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/configure.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_configure == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/configure.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/configure.sh
                                                destination: /tmp/configure-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_start | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "start" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/start.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_start == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/start.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/start.sh
                                                destination: /tmp/start-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Assert operation
                                                    if [[ "{{ SELF._management_stop | split('\n') | first }}" == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ]]; then
                                                        echo 'Management operation "stop" missing'
                                                        exit 1 
                                                    fi

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/stop.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_stop == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/stop.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/stop.sh
                                                destination: /tmp/stop-mysql.dbms.sh
                                              - content: |
                                                    #!/usr/bin/bash
                                                    set -e

                                                    # Copy operation
                                                    cat <<EOF > {{ SELF.application_directory }}/.vintner/delete.sh
                                                    #!/usr/bin/bash
                                                    set -e

                                                    {{ (SELF._management_delete == "VINTNER_MANAGEMENT_OPERATION_UNDEFINED" ) | ternary("echo 0", foo) }}
                                                    EOF>>
                                                    chmod +x {{ SELF.application_directory }}/.vintner/delete.sh

                                                    # Execute operation
                                                    cd {{ SELF.application_directory }}
                                                    . .env
                                                    . .vintner/delete.sh

                                                    # Delete application directory
                                                    rm -rf "{{ SELF.application_directory }}"
                                                destination: /tmp/delete-mysql.dbms.sh
                                          remote-exec:
                                              - inline:
                                                    - sudo bash /tmp/create-mysql.dbms.sh
                                                    - sudo bash /tmp/configure-mysql.dbms.sh
                                                    - sudo bash /tmp/start-mysql.dbms.sh
                                              - inline:
                                                    - sudo bash /tmp/stop-mysql.dbms.sh
                                                    - sudo bash /tmp/delete-mysql.dbms.sh
                                                when: destroy
    mysql.dbms~mysql.dbms::kubernetes@kubernetes.cluster:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        attributes:
            application_address:
                type: string
                default:
                    eval: .::dbms_name
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::application_address
            management_port:
                type: integer
                default:
                    eval: .::application_port
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.dbms_name }}.dbms.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: |
                                              {{ deployment | to_yaml }}
                                              ---
                                              {{ service | to_yaml }}
                                      vars:
                                          deployment:
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                                  namespace: default
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: '{{ SELF.dbms_name }}'
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: '{{ SELF.dbms_name }}'
                                                      spec:
                                                          containers:
                                                              - image: mysql:{{ SELF.dbms_version }}
                                                                name: '{{ SELF.dbms_name }}'
                                                                env:
                                                                    - name: MYSQL_ROOT_PASSWORD
                                                                      value: '{{ SELF.dbms_password }}'
                                                                ports:
                                                                    - containerPort: 3306
                                                                      name: mysql
                                          service:
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: '{{ SELF.dbms_name }}'
                                              spec:
                                                  ports:
                                                      - name: mysql
                                                        port: 3306
                                                        targetPort: 3306
                                                  selector:
                                                      app: '{{ SELF.dbms_name }}'
                                                  type: ClusterIP
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: wait for deployment
                                      ansible.builtin.shell: kubectl rollout status deployment/{{ SELF.dbms_name }} --timeout 60s
                                      args:
                                          executable: /usr/bin/bash
                                    - name: give DBMS some time
                                      ansible.builtin.pause:
                                          seconds: 10
                    delete: exit 0
    mysql.dbms~mysql.dbms::compose@docker.engine->virtual.machine:
        derived_from: mysql.dbms
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        attributes:
            application_address:
                type: string
                default: 127.0.0.1
            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
            management_port:
                type: integer
                default: 3306
        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host:
                        eval: .parent::management_address
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.dbms_name }}.compose.yaml'
                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              name: '{{ SELF.dbms_name }}'
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.dbms_name }}'
                                                      image: mysql:{{ SELF.dbms_version }}
                                                      network_mode: host
                                                      environment:
                                                          MYSQL_ROOT_PASSWORD: '{{ SELF.dbms_password }}'
                                    - name: apply compose
                                      ansible.builtin.shell: docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash
                                    - name: give DBMS some time
                                      ansible.builtin.pause:
                                          seconds: 10
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.database~mysql.database::ansible@mysql.dbms->docker.engine->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install pip
                                      apt:
                                          name: python3-pip
                                          state: present
                                    - name: install pymysql
                                      pip:
                                          name: pymysql
                                          state: present
                                    - name: create database
                                      community.mysql.mysql_db:
                                          name: '{{ SELF.database_name }}'
                                          login_host: '{{ HOST.application_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: '{{ HOST.application_port }}'
                                          login_user: root
                                    - name: create user (with privileges)
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: '{{ HOST.application_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: '{{ HOST.application_port }}'
                                          login_user: root
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.database~mysql.database::ansible@mysql.dbms->gcp.cloudsql:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                            environment:
                                GCP_SERVICE_ACCOUNT_FILE:
                                    eval: .::gcp_service_account_file
                                GCP_AUTH_KIND: serviceaccount
                        inputs:
                            playbook:
                                q:
                                    - name: create a database
                                      google.cloud.gcp_sql_database:
                                          name: '{{ SELF.database_name }}'
                                          charset: utf8
                                          instance: '{{ HOST.dbms_name }}'
                                          project: '{{ SELF.gcp_project }}'
                                    - name: create user (with privileges)
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: '{{ HOST.management_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: 3306
                                          login_user: root
    mysql.database~mysql.database::ansible@mysql.dbms->kubernetes.cluster:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: create database
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }} -- mysql --password={{ HOST.dbms_password }} -e "CREATE DATABASE IF NOT EXISTS {{ SELF.database_name }}"
                                      args:
                                          executable: /usr/bin/bash
                                    - name: create user
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }}  -- mysql --password={{ HOST.dbms_password }} -e "CREATE USER IF NOT EXISTS '{{ SELF.database_user }}'@'%' IDENTIFIED BY '{{ SELF.database_password }}'"
                                      args:
                                          executable: /usr/bin/bash
                                    - name: grant privileges
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }}  -- mysql --password={{ HOST.dbms_password }} -e "GRANT ALL PRIVILEGES ON *.* TO '{{ SELF.database_user }}'@'%'"
                                      args:
                                          executable: /usr/bin/bash
    mysql.database~mysql.database::ansible@mysql.dbms->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:
                                    - name: install pip
                                      apt:
                                          name: python3-pip
                                          state: present
                                    - name: install pymysql
                                      pip:
                                          name: pymysql
                                          state: present
                                    - name: create database
                                      community.mysql.mysql_db:
                                          name: '{{ SELF.database_name }}'
                                          login_host: '{{ HOST.application_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: '{{ HOST.application_port }}'
                                          login_user: root
                                    - name: create user (with privileges)
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: '{{ HOST.application_address }}'
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: '{{ HOST.application_port }}'
                                          login_user: root
                            playbookArgs:
                                - '--become'
                                - '--key-file={{ SELF.os_ssh_key_file }}'
                                - '--user={{ SELF.os_ssh_user }}'
                    delete: exit 0
    mysql.database~mysql.database::terraform@mysql.dbms->docker.engine->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                                    ssh:
                                        source: AndrewChubatiuk/ssh
                                        version: 0.2.3
                        data:
                            ssh_tunnel:
                                mysql:
                                    - remote:
                                          host: '{{ HOST.application_address }}'
                                          port: '{{ HOST.application_port }}'
                        provider:
                            mysql:
                                - endpoint: ${data.ssh_tunnel.mysql.local.address}
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                            ssh:
                                - auth:
                                      private_key:
                                          content: ${file(pathexpand("{{ SELF.os_ssh_key_file }}"))}
                                  server:
                                      host: '{{ HOST.management_address }}'
                                      port: 22
                                  user: '{{ SELF.os_ssh_user }}'
                        resource:
                            mysql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                            mysql_user:
                                user:
                                    - host: '%'
                                      plaintext_password: '{{ SELF.database_password }}'
                                      user: '{{ SELF.database_user }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - ALL
                                      user: ${mysql_user.user.user}
    mysql.database~mysql.database::terraform@mysql.dbms->gcp.cloudsql:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            gcp_service_account_file:
                type: string
                default:
                    get_input: gcp_service_account_file
            gcp_region:
                type: string
                default:
                    get_input: gcp_region
            gcp_project:
                type: string
                default:
                    get_input: gcp_project
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - google:
                                        source: hashicorp/google
                                        version: 5.39.1
                                    mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                        provider:
                            google:
                                - credentials: '{{ SELF.gcp_service_account_file }}'
                                  project: '{{ SELF.gcp_project }}'
                                  region: '{{ SELF.gcp_region }}'
                            mysql:
                                - endpoint: '{{ HOST.management_address }}'
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                        resource:
                            google_sql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                                      instance: '{{ HOST.dbms_name }}'
                            google_sql_user:
                                user:
                                    - host: '%'
                                      instance: '{{ HOST.dbms_name }}'
                                      name: '{{ SELF.database_name }}'
                                      password: '{{ SELF.database_password }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - ALL
                                      user: ${google_sql_user.user.name}
    mysql.database~mysql.database::terraform@mysql.dbms->kubernetes.cluster:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
    mysql.database~mysql.database::terraform@mysql.dbms->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
            os_ssh_host:
                type: string
                default:
                    eval: .::.requirements::[.name=host]::.target::management_address
        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                                    ssh:
                                        source: AndrewChubatiuk/ssh
                                        version: 0.2.3
                        data:
                            ssh_tunnel:
                                mysql:
                                    - remote:
                                          host: '{{ HOST.application_address }}'
                                          port: '{{ HOST.application_port }}'
                        provider:
                            mysql:
                                - endpoint: ${data.ssh_tunnel.mysql.local.address}
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                            ssh:
                                - auth:
                                      private_key:
                                          content: ${file(pathexpand("{{ SELF.os_ssh_key_file }}"))}
                                  server:
                                      host: '{{ HOST.management_address }}'
                                      port: 22
                                  user: '{{ SELF.os_ssh_user }}'
                        resource:
                            mysql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                            mysql_user:
                                user:
                                    - host: '%'
                                      plaintext_password: '{{ SELF.database_password }}'
                                      user: '{{ SELF.database_user }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - ALL
                                      user: ${mysql_user.user.user}
    mysql.database~mysql.database::kubernetes@mysql.dbms->kubernetes.cluster:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            k8s_host:
                type: string
                default:
                    get_input: k8s_host
            k8s_ca_cert_file:
                type: string
                default:
                    get_input: k8s_ca_cert_file
            k8s_client_cert_file:
                type: string
                default:
                    get_input: k8s_client_cert_file
            k8s_client_key_file:
                type: string
                default:
                    get_input: k8s_client_key_file
        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.database_name }}-{{ HOST.dbms_name }}.database.manifest.yaml'
                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: '{{ job | to_yaml }}'
                                      vars:
                                          job:
                                              apiVersion: batch/v1
                                              kind: Job
                                              metadata:
                                                  name: '{{ SELF.database_name }}-{{ HOST.dbms_name }}'
                                              spec:
                                                  template:
                                                      spec:
                                                          restartPolicy: Never
                                                          initContainers:
                                                              - name: create-database
                                                                image: mysql:{{ HOST.dbms_version }}
                                                                command:
                                                                    - mysql
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - '-e'
                                                                    - CREATE DATABASE IF NOT EXISTS {{ SELF.database_name }}
                                                              - name: create-user
                                                                image: mysql:{{ HOST.dbms_version }}
                                                                command:
                                                                    - mysql
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - '-e'
                                                                    - CREATE USER IF NOT EXISTS '{{ SELF.database_user }}'@'%' IDENTIFIED BY '{{ SELF.database_password }}'
                                                              - name: grant-privileges
                                                                image: mysql:{{ HOST.dbms_version }}
                                                                command:
                                                                    - mysql
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - '-e'
                                                                    - GRANT ALL PRIVILEGES ON *.* TO '{{ SELF.database_user }}'@'%'
                                                          containers:
                                                              - name: none
                                                                image: busybox
                                                                command:
                                                                    - echo
                                                                    - "'done'"
                                    - name: apply manifest
                                      ansible.builtin.shell: kubectl apply -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: wait for deployment
                                      ansible.builtin.shell: kubectl wait --for=condition=complete --timeout=30s job/{{ SELF.database_name }}-{{ HOST.dbms_name }}
                                      args:
                                          executable: /usr/bin/bash
                                    - name: cleanup
                                      ansible.builtin.shell: kubectl delete -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash
                    delete: exit 0
    mysql.database~mysql.database::compose@mysql.dbms->docker.engine->virtual.machine:
        derived_from: mysql.database
        metadata:
            vintner_generated: 'true'
            vintner_orchestrator: unfurl
        properties:
            os_ssh_user:
                type: string
                default:
                    get_input: os_ssh_user
            os_ssh_key_file:
                type: string
                default:
                    get_input: os_ssh_key_file
