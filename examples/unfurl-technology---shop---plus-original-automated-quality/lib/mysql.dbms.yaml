tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - repository: unfurl
      file: tosca_plugins/k8s.yaml

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    mysql.dbms:
        derived_from: tosca.nodes.Root
        properties:
            root_password:
                type: string

        attributes:
            management_address:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::management_address'}

            management_port:
                type: integer

            application_address:
                type: string

            application_port:
                type: integer

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    ###################################################
    #
    # Ansible OS
    #
    ###################################################

    mysql.dbms::ansible::os.compute:
        derived_from: mysql.dbms

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            management_port:
                type: integer
                default: 3000

            application_address:
                type: string
                default: '127.0.0.1'

            application_port:
                type: integer
                default: 3000

        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: {eval: '.::..::.requirements[.name=host]::.target::.capabilities[.name=endpoint]::connection'}
                    host: {eval: '.::..::.requirements[.name=host]::.target::management_address'}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                        inputs:
                            playbook:
                                q:
                                    - name: Wait for ssh
                                      wait_for_connection:

                                    - name: Installing mysql
                                      package:
                                          name: '{{item}}'
                                          state: present
                                          update_cache: yes
                                      loop:
                                          - mysql-server
                                          - mysql-client
                                          - python3-mysqldb
                                          - libmysqlclient-dev

                                    - name: Start and enable mysql service
                                      service:
                                          name: mysql
                                          state: started
                                          enabled: yes

                                    - name: Create mysql user
                                      community.mysql.mysql_user:
                                          name: root
                                          password: '{{ SELF.root_password }}'
                                          priv: '*.*:ALL'
                                          host: '%'
                                          state: present

                                    - name: Delete localhost root
                                      community.mysql.mysql_user:
                                          name: root
                                          host: localhost
                                          state: absent

                                    - name: Enable passwordless login
                                      copy:
                                          dest: /root/.my.cnf
                                          content: |
                                              [client]
                                              user=root
                                              password={{ SELF.root_password }}

                                    - name: Enable remote login
                                      lineinfile:
                                          path: /etc/mysql/mysql.conf.d/mysqld.cnf
                                          regexp: '^bind-address'
                                          line: 'bind-address = 0.0.0.0'
                                          backup: yes

                                    - name: Configure port (e.g., since 3306 is blocked by the provider)
                                      lineinfile:
                                          path: /etc/mysql/mysql.conf.d/mysqld.cnf
                                          regexp: '^# port'
                                          line: 'port = 3000'
                                          backup: yes

                                    - name: Restart mysql
                                      service:
                                          name: mysql
                                          state: restarted

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                                - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    # TODO: not required ...
    mysql.dbms::ansible::kubernetes:
        derived_from: tosca.nodes.Root
        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            management_port:
                type: integer
                default: 3306

            application_address:
                type: string
                default: mysql

            application_port:
                type: integer
                default: 3306

        capabilities:
            host:
                type: tosca.capabilities.Compute
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: {eval: '.::..::.requirements[.name=host]::.target::.capabilities[.name=endpoint]::connection'}
                    host: {eval: '.::..::.requirements[.name=host]::.target::management_address'}

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: Create file
                                      copy:
                                          dest: mysql.yaml
                                          content: |
                                              ---
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: mysql
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: mysql
                                                  strategy:
                                                      type: Recreate
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: mysql
                                                      spec:
                                                          containers:
                                                              - image: mysql:5.6
                                                                name: mysql
                                                                env:
                                                                    - name: MYSQL_ROOT_PASSWORD
                                                                      value: {{ SELF.root_password }}
                                                                ports:
                                                                    - containerPort: 3306
                                                                      name: mysql

                                              ---
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: mysql
                                              spec:
                                                  ports:
                                                      - port: 3306
                                                  selector:
                                                      app: mysql
                                                  type: NodePort

                                    - name: Install MySQL DBMS
                                      shell: |
                                          kubectl apply -f mysql.yaml
                                          kubectl rollout status deployment/mysql --timeout 60s
                                          sleep 2m

                            playbookArgs:
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                                - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

    ###################################################
    #
    # Kubernetes Kubernetes
    #
    ###################################################

    # TODO: inherit from mysql.dbms?
    mysql.dbms::kubernetes::kubernetes:
        derived_from: unfurl.nodes.K8sRawResource

        attributes:
            management_address:
                type: string
                default: {get_input: k8s_api_address}

            management_port:
                type: integer
                default: 30081

            application_address:
                type: string
                default: mysql

            application_port:
                type: integer
                default: 3306

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        properties:
            root_password:
                type: string

            definition:
                type: any
                default:
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                        name: mysql
                        namespace: default
                    spec:
                        selector:
                            matchLabels:
                                app: mysql
                        strategy:
                            type: Recreate
                        template:
                            metadata:
                                labels:
                                    app: mysql
                            spec:
                                containers:
                                    - image: mysql:5.6
                                      name: mysql
                                      env:
                                          - name: MYSQL_ROOT_PASSWORD
                                            value: '{{ SELF.root_password }}'
                                      ports:
                                          - containerPort: '{{ SELF.application_port }}'
                                            name: mysql

    mysql.dbms.expose:
        derived_from: tosca.nodes.Root

    mysql.dbms.expose::kubernetes::kubernetes:
        derived_from: unfurl.nodes.K8sRawResource
        properties:
            definition:
                type: any
                default:
                    apiVersion: v1
                    kind: Service
                    metadata:
                        name: mysql
                        namespace: default
                    spec:
                        ports:
                            - port: 3306
                              nodePort: 30081
                        selector:
                            app: mysql
                        type: NodePort

    ###################################################
    #
    # Terraform OS
    #
    ###################################################

    mysql.dbms::terraform::os:
        derived_from: mysql.dbms

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

            os_ssh_host:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::management_address'}

            artifact_script:
                type: string
                default: {eval: '.artifacts::artifact_script'}

        artifacts:
            artifact_script:
                type: tosca.artifacts.File
                file: files/mysql.dbms.create.sh

        attributes:
            management_port:
                type: integer
                default: 3000

            application_address:
                type: string
                default: '127.0.0.1'

            application_port:
                type: integer
                default: 3000

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    tfvars: |
                        ssh_user = "{{ SELF.os_ssh_user }}"
                        ssh_key_file = "{{ SELF.os_ssh_key_file }}"
                        ssh_host = "{{ SELF.os_ssh_host }}"

                        script = "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact_script.attributes.file }}"
                        password = "{{ SELF.root_password }}"
                        port = "{{ SELF.application_port }}"
                    main: |
                        variable "ssh_user" {
                          type = string
                        }

                        variable "ssh_key_file" {
                          type = string
                        }

                        variable "ssh_host" {
                          type = string
                        }

                        variable "script" {
                          type = string
                        }

                        variable "password" {
                          type = string
                        }

                        variable "port" {
                          type = number
                        }

                        resource "terraform_data" "os" {

                          connection {
                            type        = "ssh"
                            user        = var.ssh_user
                            private_key = file(var.ssh_key_file)
                            host        = var.ssh_host
                          }

                          provisioner "file" {
                            source      = var.script
                            destination = "/tmp/mysql.dbms.create.sh"
                          }

                          provisioner "remote-exec" {
                            inline = [
                              "sudo bash /tmp/mysql.dbms.create.sh ${var.password} ${var.port}",
                            ]
                          }
                        }
