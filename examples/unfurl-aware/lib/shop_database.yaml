tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    shop.database:
        derived_from: tosca.nodes.SoftwareComponent

        properties:
            database_name:
                type: string

            deployment_mode:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::deployment_mode'}

            ###################################################
            #
            # GCP
            #
            ###################################################

            gcp_dbms_name:
                type: string

            gcp_service_account_file:
                type: string
                default: {get_input: gcp_service_account_file}

            gcp_region:
                type: string
                default:  {get_input: gcp_region}

            gcp_project:
                type: string
                default: {get_input: gcp_project}

            ###################################################
            #
            # OS
            #
            ###################################################

            ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            public_address:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_address'}

            public_ip:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_ip'}

            database_address:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::database_address'}

        capabilities:
            database:
                type: tosca.capabilities.Endpoint.Database

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                ###################################################
                                #
                                # OS
                                #
                                ###################################################

                                - name: wait for ssh
                                  wait_for_connection:
                                  when: SELF.deployment_mode == "OS"

                                - name: Create database
                                  shell: kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -ppassword -e "create database shop";
                                  when: SELF.deployment_mode == "OS"

                                ###################################################
                                #
                                # GCP
                                #
                                ###################################################

                                - name: Activate service account
                                  shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'
                                  when: SELF.deployment_mode == "GCP"

                                # https://cloud.google.com/sql/docs/mysql/create-manage-databases
                                - name: Create database
                                  shell: 'gcloud sql databases create {{ SELF.database_name }} --instance {{ SELF.gcp_dbms_name }}'
                                  register: create_command
                                  failed_when:
                                      - "'Created database' not in create_command.stderr"
                                      - "'database exists' not in create_command.stderr"
                                  when: SELF.deployment_mode == "GCP"

                        playbookArgs:
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
