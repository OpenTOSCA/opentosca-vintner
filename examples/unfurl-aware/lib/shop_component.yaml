tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    shop.component:
        derived_from: tosca.nodes.SoftwareComponent

        properties:
            application_name:
                type: string

            DB_DIALECT:
                type: string

            DB_NAME:
                type: string

            DB_USERNAME:
                type: string

            DB_PASSWORD:
                type: string

            DB_ADDRESS:
                type: string

            artifact:
                type: string
                default: { eval: '.artifacts::artifact ' }

            deployment_mode:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::deployment_mode'}

            ###################################################
            #
            # GCP
            #
            ###################################################

            gcp_service_account_file:
                type: string
                default: { get_input: gcp_service_account_file }

            gcp_region:
                type: string
                default: { get_input: gcp_region }

            gcp_project:
                type: string
                default: { get_input: gcp_project }

            ###################################################
            #
            # OS
            #
            ###################################################

            ssh_user:
                type: string
                default: { get_input: os_compute_ssh_user }

            ssh_key_file:
                type: string
                default: { get_input: os_compute_ssh_key_file }

        requirements:
            -   database:
                    capability: tosca.capabilities.Endpoint.Database
                    relationship: tosca.relationships.ConnectsTo

        artifacts:
            artifact:
                type: tosca.artifacts.File
                file: files/shop.tar.gz

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                ###################################################
                                #
                                # OS
                                #
                                ###################################################

                                -   name: wait for ssh
                                    wait_for_connection:
                                    when: SELF.deployment_mode[0] == "OS"

                                -   name: Create application directory
                                    file:
                                        path: shop
                                        state: directory
                                    when: SELF.deployment_mode[0] == "OS"

                                -   name: Copy deployment artifact
                                    copy:
                                        src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact.attributes.file }}"
                                        dest: shop
                                    when: SELF.deployment_mode[0] == "OS"

                                -   name: Extract deployment artifact
                                    shell: |
                                        cd shop
                                        tar -xvf shop.tar.gz
                                    when: SELF.deployment_mode[0] == "OS"

                                -   name: Build Docker Image
                                    when: SELF.deployment_mode[0] == "OS"
                                    shell: |
                                        cd shop
                                        eval $(minikube -p minikube docker-env)
                                        docker build -t shop .

                                -   name: Create file
                                    when: SELF.deployment_mode[0] == "OS"
                                    copy:
                                        dest: shop.yaml
                                        content: |
                                            apiVersion: apps/v1
                                            kind: Deployment
                                            metadata:
                                                name: shop
                                            spec:
                                                selector:
                                                    matchLabels:
                                                        app: shop
                                                template:
                                                    metadata:
                                                        labels:
                                                            app: shop
                                                    spec:
                                                        containers:
                                                            - image: shop
                                                              imagePullPolicy: Never
                                                              name: shop
                                                              env:
                                                                  - name: DB_NAME
                                                                    value: {{ SELF.DB_NAME }}
                                            
                                                                  - name: DB_PASSWORD
                                                                    value: {{ SELF.DB_PASSWORD }}
                                            
                                                                  - name: DB_USERNAME
                                                                    value: {{ SELF.DB_USERNAME }}
                                            
                                                                  - name: DB_ADDRESS
                                                                    value: {{ SELF.DB_ADDRESS }}
                                            
                                                                  - name: DB_DIALECT
                                                                    value: {{ SELF.DB_DIALECT }}
                                            
                                                              ports:
                                                                  - containerPort: 80
                                            
                                            ---
                                            apiVersion: v1
                                            kind: Service
                                            metadata:
                                                name: shop
                                            spec:
                                                ports:
                                                    - port: 80
                                                selector:
                                                    app: shop
                                                type: NodePort


                                -   name: Install shop component
                                    when: SELF.deployment_mode[0] == "OS"
                                    shell: |
                                        kubectl apply -f shop.yaml
                                        kubectl rollout status deployment/shop --timeout 60s

                                -   name: create service
                                    copy:
                                        dest: '/etc/systemd/system/shop.service'
                                        content: |
                                            [Unit]
                                            After=network.target
                                            
                                            [Service]
                                            Type=simple
                                            ExecStart=sudo -E kubectl port-forward service/shop 80:80 --address 0.0.0.0
                                            User=ubuntu
                                            Group=ubuntu
                                            
                                            [Install]
                                            WantedBy=multi-user.target
                                    become: true
                                    when: SELF.deployment_mode[0] == "OS"

                                -   name: start service
                                    systemd:
                                        name: shop
                                        state: started
                                        enabled: yes
                                        daemon_reload: yes
                                    become: true
                                    when: SELF.deployment_mode[0] == "OS"

                                ###################################################
                                #
                                # GCP
                                #
                                ###################################################

                                -   name: Activate service account
                                    shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'
                                    when: SELF.deployment_mode[0] == "GCP"

                                -   name: Create working directory
                                    tempfile:
                                        state: directory
                                    register: tempdir_info
                                    when: SELF.deployment_mode[0] == "GCP"

                                -   name: Extract deployment artifact in working directory
                                    unarchive:
                                        src: "{{ 'project' | get_dir }}/ensemble/{{ SELF.artifact.attributes.file }}"
                                        dest: '{{ tempdir_info.path }}'
                                    when: SELF.deployment_mode[0] == "GCP"

                                # https://cloud.google.com/appengine/docs/standard/reference/app-yaml?tab=node.js
                                -   name: Configure app yaml
                                    copy:
                                        dest: '{{ tempdir_info.path }}/app.yaml'
                                        content: |
                                            runtime: nodejs18
                                            service: {{ SELF.application_name }}
                                            instance_class: F1
                                            env_variables:
                                                DB_DIALECT: {{ SELF.DB_DIALECT}}
                                                DB_NAME: {{ SELF.DB_NAME }}
                                                DB_USERNAME: {{ SELF.DB_USERNAME }}
                                                DB_PASSWORD: {{ SELF.DB_PASSWORD }}
                                                DB_ADDRESS: {{ SELF.DB_ADDRESS }}
                                    when: SELF.deployment_mode[0] == "GCP"

                                # https://cloud.google.com/sdk/gcloud/reference/app/deploy
                                -   name: Create App
                                    shell: 'gcloud app deploy {{ tempdir_info.path }} --quiet'
                                    when: SELF.deployment_mode[0] == "GCP"

                        playbookArgs:
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

                delete:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:

                                ###################################################
                                #
                                # GCP
                                #
                                ###################################################

                                -   name: Activate service account
                                    shell: 'gcloud auth activate-service-account --key-file {{ SELF.gcp_service_account_file }} --project {{ SELF.gcp_project }}'
                                    when: SELF.deployment_mode[0] == "GCP"

                                # https://cloud.google.com/sdk/gcloud/reference/app/deploy
                                -   name: Create App
                                    shell: 'gcloud app services delete {{ SELF.application_name }} --quiet'
                                    when: SELF.deployment_mode[0] == "GCP"

                        playbookArgs:
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
