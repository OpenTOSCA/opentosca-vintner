tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
    os.k8s:
        derived_from: tosca.nodes.Root
        properties:
            ssh_user:
                type: string
                default: { get_input: os_compute_ssh_user }

            ssh_key_file:
                type: string
                default: { get_input: os_compute_ssh_key_file }

            deployment_mode:
                type: string
                default: OS

        attributes:
            public_address:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_address'}

            public_ip:
                type: string
                default: {eval: '.::.requirements[.name=host]::.target::public_ip'}

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            -   host:
                    capability: tosca.capabilities.Compute
                    relationship: tosca.relationships.HostedOn

        interfaces:
            Standard:
                create:
                    implementation:
                        primary: Ansible
                        operation_host: HOST
                    inputs:
                        playbook:
                            q:
                                -   name: wait for ssh
                                    wait_for_connection:

                                -   name: Install utilities
                                    shell: |
                                        sudo apt-get update -y
                                        sudo apt-get install tree nano wget jq net-tools curl git stress nmap -y

                                -   name: Install Docker
                                    shell: |
                                        sudo apt-get update
                                        sudo apt-get install ca-certificates curl gnupg
                                        sudo install -m 0755 -d /etc/apt/keyrings
                                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                                        sudo chmod a+r /etc/apt/keyrings/docker.gpg
                                        echo \
                                            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                                            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                                            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                                        sudo apt-get update
                                        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                                        
                                        sudo groupadd docker
                                        sudo usermod -aG docker ubuntu

                                -   name: Install minikube
                                    shell: |
                                        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
                                        sudo install minikube-linux-amd64 /usr/local/bin/minikube


                                -   name: Install kubectl
                                    shell: |
                                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                                        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl


                                -   name: Install helm
                                    shell: |
                                        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
                                        chmod 700 get_helm.sh
                                        ./get_helm.sh

                                -   name: Start minikube
                                    shell: minikube start
                                    become: true

                        playbookArgs:
                            - --become
                            - --key-file={{ SELF.ssh_key_file }}
                            - --user={{ SELF.ssh_user }}
                            - --ssh-common-args="-o IdentitiesOnly=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
