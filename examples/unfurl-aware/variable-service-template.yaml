tosca_definitions_version: tosca_variability_1_0

imports:
    - lib/shop/types.yaml
    - lib/gcp/types.yaml
    - lib/os/types.yaml

topology_template:
    inputs:
        database_password:
            type: string
            default: password

        os_compute_network:
            type: string
            default: public-belwue-v6only

        os_compute_security_groups:
            type: string
            default: default

        os_compute_key_name:
            type: string
            default: default

        os_compute_ssh_user:
            type: string
            default: ubuntu

        os_compute_ssh_key_file:
            type: string
            default: /home/milesstoetzner/.ssh/bw-cloud--default

        os_region_name:
            type: string
            default: Mannheim

        os_auth_type:
            type: string
            default: v3applicationcredential

        os_auth_url:
            type: string
            default: https://idm02.bw-cloud.org:5000/v3

        os_identity_api_version:
            type: string
            default: '3'

        os_interface:
            type: string
            default: public

        os_application_credential_id:
            type: string
            default: 3f538f1823bd484e8238b2433de2f21a

        os_application_credential_secret:
            type: string

        gcp_region:
            type: string
            default: europe-west3

        gcp_service_account_file:
            type: string
            default: /home/milesstoetzner/gcp/stoetzms-387808-2ec1cf865c76.json

        gcp_project:
            type: string
            default: stoetzms-387808

    variability:
        inputs:
            cloud:
                type: boolean
                default: false

        presets:
            local:
                inputs:
                    cloud: false

            cloud:
                inputs:
                    cloud: true

        expressions:
            is_local: {equal: [{variability_input: cloud}, false]}
            is_cloud: {equal: [{variability_input: cloud}, true]}

        options:
            mode: semantic-loose
            node_default_condition_mode: incomingnaive-host
            hosting_stack_constraint: true
            optimization: true
            unique: true
            type_pruning: true

    node_templates:
        shop:
            type: shop.component
            persistent: true
            properties:
                - DB_NAME: shop
                - DB_USERNAME: root
                - DB_PASSWORD: {get_input: database_password}
                - DB_DIALECT: mysql
                - DB_ADDRESS: {get_attribute: [SELF, database, public_address]}

                - vm_ssh_user: {get_input: os_compute_ssh_user}
                - vm_ssh_key_file: {get_input: os_compute_ssh_key_file}

                - gcp_region: {get_input: gcp_region}
                - gcp_service_account_file: {get_input: gcp_service_account_file}
                - gcp_project: {get_input: gcp_project}

                - deployment_mode: {get_property: [SELF, host, deployment_mode]}
            requirements:
                - host:
                      node: os_kubernetes
                      conditions: {logic_expression: is_local}

                - host:
                      node: gcp_runtime
                      conditions: {logic_expression: is_cloud}

                - database:
                      node: database
                      implied: true

        database:
            type: mysql.database
            properties:
                - database_name: shop
                - deployment_mode: { get_property: [ SELF, host, deployment_mode ] }
            requirements:
                - host:
                      node: os_dbms
                      conditions: {logic_expression: is_local}

                - host:
                      node: gcp_dbms
                      conditions: {logic_expression: is_cloud}

        os_dbms:
            type: os.dbms
            requirements:
                - host:
                      node: os_kubernetes

        os_monitor:
            type: os.monitor
            requirements:
                - host:
                      node: os_kubernetes

        os_logger:
            type: os.logger
            requirements:
                - host:
                      node: os_kubernetes

        os_kubernetes:
            type: os.kubernetes
            requirements:
                - host:
                      node: os_compute

        os_compute:
            type: os.compute
            properties:
                - ports:
                      value: [80, 3000]
                - name:
                      value: shop

                - image:
                      value: Ubuntu 22.04

                - flavor: m1.medium

                - network:
                      value: {get_input: os_compute_network}
                - security_groups:
                      value: {get_input: os_compute_security_groups}
                - key_name:
                      value: {get_input: os_compute_key_name}
                - ssh_user:
                      value: {get_input: os_compute_ssh_user}
                - ssh_key_file:
                      value: {get_input: os_compute_ssh_key_file}
            requirements:
                - host:
                      node: os_cloud

        os_cloud:
            type: os.provider
            properties:
                - region_name:
                      value: {get_input: os_region_name}
                - auth_type:
                      value: {get_input: os_auth_type}
                - auth_url:
                      value: {get_input: os_auth_url}
                - identity_api_version:
                      value: {get_input: os_identity_api_version}
                - interface:
                      value: {get_input: os_interface}
                - application_credential_id:
                      value: {get_input: os_application_credential_id}
                - application_credential_secret:
                      value: {get_input: os_application_credential_secret}

        gcp_runtime:
            type: gcp.runtime
            requirements:
                - host:
                      node: gcp_cloud

        gcp_dbms:
            type: gcp.dbms
            properties:
                - instance_name:
                      value: shop
                - root_password:
                      value: {get_input: database_password}
                - authorized_networks:
                      value: 0.0.0.0/0
                - backups:
                      value: true
                - database_version:
                      value: MYSQL_5_7
                - availability_type:
                      value: REGIONAL
            requirements:
                - host:
                      node: gcp_cloud

        gcp_cloud:
            type: gcp.provider
            properties:
                - region:
                      value: {get_input: gcp_region}
                - service_account_file:
                      value: {get_input: gcp_service_account_file}
                - project:
                      value: {get_input: gcp_project}
