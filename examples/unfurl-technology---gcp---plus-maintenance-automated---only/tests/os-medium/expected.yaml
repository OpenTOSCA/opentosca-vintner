tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - lib/types.yaml

topology_template:
    inputs:
        database_password:
            type: string

        dbms_password:
            type: string

        os_network:
            type: string

        os_ssh_key_name:
            type: string

        os_ssh_user:
            type: string

        os_ssh_key_file:
            type: string

        os_region_name:
            type: string

        os_auth_type:
            type: string

        os_auth_url:
            type: string

        os_identity_api_version:
            type: string

        os_interface:
            type: string

        os_application_credential_id:
            type: string

        os_application_credential_secret:
            type: string

    node_templates:
        ###################################################
        #
        # Frontend
        #
        ###################################################

        frontend_service:
            type: frontend.service.docker.docker
            properties:
                checkout_address: {eval: '.::.requirements[.name=checkout]::.target::application_address'}
                currency_address: {eval: '.::.requirements[.name=currency]::.target::application_address'}
                shipping_address: {eval: '.::.requirements[.name=shipping]::.target::application_address'}
                cart_address: {eval: '.::.requirements[.name=cart]::.target::application_address'}
                product_address: {eval: '.::.requirements[.name=product]::.target::application_address'}
                recommendation_address: {eval: '.::.requirements[.name=recommendation]::.target::application_address'}
                advertisement_address: {eval: '.::.requirements[.name=advertisement]::.target::application_address'}
            requirements:
                - checkout: checkout_service
                - currency: currency_service
                - shipping: shipping_service
                - cart: cart_service
                - product: product_service
                - recommendation: recommendation_service
                - advertisement: advertisement_service
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/frontend:v0.10.1

        frontend_ingress:
            type: ingress.ansible.openstack
            properties:
                upstream_address: {eval: '.::.requirements[.name=checkout]::.target::application_address'}
            requirements:
                - upstream: frontend_service

                - host: virtual_machine

        ###################################################
        #
        # Checkout
        #
        ###################################################

        checkout_service:
            type: checkout.service.docker.docker
            properties:
                email_address: {eval: '.::.requirements[.name=email]::.target::application_address'}
                payment_address: {eval: '.::.requirements[.name=payment]::.target::application_address'}
                currency_address: {eval: '.::.requirements[.name=currency]::.target::application_address'}
                shipping_address: {eval: '.::.requirements[.name=shipping]::.target::application_address'}
                cart_address: {eval: '.::.requirements[.name=cart]::.target::application_address'}
                product_address: {eval: '.::.requirements[.name=product]::.target::application_address'}
            requirements:
                - email: email_service
                - payment: payment_service
                - currency: currency_service
                - shipping: shipping_service
                - cart: cart_service
                - product: product_service
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/checkoutservice:v0.10.1

        ###################################################
        #
        # Email
        #
        ###################################################

        email_service:
            type: email.service.docker.docker
            requirements:
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/emailservice:v0.10.1

        ###################################################
        #
        # Payment
        #
        ###################################################

        payment_service:
            type: payment.service.docker.docker
            requirements:
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/paymentservice:v0.10.1

        ###################################################
        #
        # Currency
        #
        ###################################################

        currency_service:
            type: currency.service.docker.docker
            requirements:
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/currencyservice:v0.10.1

        ###################################################
        #
        # Shipping
        #
        ###################################################

        shipping_service:
            type: shipping.service.docker.docker
            requirements:
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/shippingservice:v0.10.1

        ###################################################
        #
        # Cart
        #
        ###################################################

        cart_service:
            type: cart.service.docker.docker
            properties:
                database_name: cart
                database_user: cart
                database_password: {get_input: database_password}
            requirements:
                - database: postgresql_database
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/cartservice:v0.10.1

        postgresql_database:
            type: postgresql.database.terraform.postgresql
            properties:
                database_name: cart
                database_user: cart
                database_password: {get_input: database_password}
            requirements:
                - host: postgresql_dbms

        postgresql_dbms:
            type: postgresql.dbms.docker.docker
            properties:
                dbms_name: cart
                dbms_password: {get_input: dbms_password}
            requirements:
                - host: docker_runtime

        ###################################################
        #
        # Product
        #
        ###################################################

        product_service:
            type: product.service.docker.docker
            requirements:
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/productservice:v0.10.1

        ###################################################
        #
        # Recommendation
        #
        ###################################################

        recommendation_service:
            type: recommendation.service.docker.docker
            properties:
                product_address: {eval: '.::.requirements[.name=product]::.target::application_address'}
            requirements:
                - product: product_service
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/recommendationervice:v0.10.1

        ###################################################
        #
        # Advertisement
        #
        ###################################################

        advertisement_service:
            type: advertisement.service.docker.docker
            requirements:
                - host: docker_runtime
            artifacts:
                docker:
                    file: gcr.io/google-samples/microservices-demo/advertisementservice:v0.10.1

        ###################################################
        #
        # Virtual Machine
        #
        ###################################################

        docker_runtime:
            type: docker.engine.ansible.openstack
            requirements:
                - host: virtual_machine

        monitoring_agent:
            type: monitoring.agent.ansible.openstack
            requirements:
                - host: virtual_machine

        logging_agent:
            type: logging.agent.ansible.openstack
            requirements:
                - host: virtual_machine

        security_agent:
            type: security.agent.ansible.openstack
            requirements:
                - host: virtual_machine

        virtual_machine:
            type: openstack.machine.terraform.openstack
            properties:
                machine: unfurl-technology-gcp
                ports: [80, 3000, 8000]
                flavor: m1.medium
                os_network: {get_input: os_network}
                os_ssh_key_name: {get_input: os_ssh_key_name}
                os_ssh_user: {get_input: os_ssh_user}
                os_ssh_key_file: {get_input: os_ssh_key_file}
                os_region_name: {get_input: os_region_name}
            requirements:
                - host: openstack

        openstack:
            type: openstack.provider
            properties:
                os_region_name: {get_input: os_region_name}
                os_auth_type: {get_input: os_auth_type}
                os_auth_url: {get_input: os_auth_url}
                os_identity_api_version: {get_input: os_identity_api_version}
                os_interface: {get_input: os_interface}
                os_application_credential_id: {get_input: os_application_credential_id}
                os_application_credential_secret: {get_input: os_application_credential_secret}
