tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - ../base.yaml

# TODO: improve this to exec into container? we assume that dbms is exposed on the docker host
# TODO: add openstack suffix?

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    mysql.database:
        derived_from: relational.database

        properties:
            database_name:
                type: string

            database_user:
                type: string

            database_password:
                type: string

        attributes:
            application_address:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::application_address'}

            application_port:
                type: integer
                default: {eval: '.::.requirements::[.name=host]::.target::application_port'}

        capabilities:
            database:
                type: tosca.capabilities.Endpoint.Database

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    # TODO: mysql.database.docker.mysql.docker

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    mysql.database.ansible.mysql.kubernetes:
        derived_from: mysql.database

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: create database
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }} -- mysql --password={{ HOST.dbms_password }} -e "CREATE DATABASE IF NOT EXISTS {{ SELF.database_name }}";
                                      args:
                                          executable: /usr/bin/bash

                                    - name: create user
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }}  -- mysql --password={{ HOST.dbms_password }} -e "CREATE USER IF NOT EXISTS '{{ SELF.database_user }}'@'%' IDENTIFIED BY '{{ SELF.database_password }}'";
                                      args:
                                          executable: /usr/bin/bash

                                    - name: grant privileges
                                      ansible.builtin.shell: kubectl exec deploy/{{ HOST.dbms_name }}  -- mysql --password={{ HOST.dbms_password }} -e "GRANT ALL PRIVILEGES ON *.* TO '{{ SELF.database_user }}'@'%'";
                                      args:
                                          executable: /usr/bin/bash

    # TODO: mysql.database.terraform.mysql.kubernetes
    # TODO: mysql.database.kubernetes.mysql.kubernetes

    ###################################################
    #
    # Kubernetes Kubernetes
    #
    ###################################################

    # TODO: some sytnax error at create-user

    mysql.database.kubernetes.mysql.kubernetes:
        derived_from: mysql.database

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: ORCHESTRATOR
                        inputs:
                            playbook:
                                q:
                                    - name: touch manifest
                                      register: manifest
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.database_name }}-{{ HOST.dbms_name }}.database.manifest.yaml'

                                    - name: create manifest
                                      ansible.builtin.copy:
                                          dest: '{{ manifest.path }}'
                                          content: '{{ job | to_yaml }}'
                                      vars:
                                          job:
                                              apiVersion: batch/v1
                                              kind: Job
                                              metadata:
                                                  name: '{{ SELF.database_name }}-{{ HOST.dbms_name }}'
                                              spec:
                                                  template:
                                                      spec:
                                                          restartPolicy: Never
                                                          initContainers:
                                                              - name: create-database
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - 'mysql'
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - '-e'
                                                                    - 'CREATE DATABASE IF NOT EXISTS {{ SELF.database_name }}'

                                                              - name: create-user
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - 'mysql'
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - -e
                                                                    - CREATE USER IF NOT EXISTS '{{ SELF.database_user }}'@'%' IDENTIFIED BY '{{ SELF.database_password }}'

                                                              - name: grant-privileges
                                                                image: '{{ HOST.dbms_image }}'
                                                                command:
                                                                    - 'mysql'
                                                                    - '--host={{ HOST.management_address }}'
                                                                    - '--port={{ HOST.management_port }}'
                                                                    - '--user=root'
                                                                    - '--password={{ HOST.dbms_password }}'
                                                                    - -e
                                                                    - GRANT ALL PRIVILEGES ON *.* TO '{{ SELF.database_user }}'@'%'

                                                          containers:
                                                              - name: none
                                                                image: busybox
                                                                command: ['echo', "'done'"]

                                    - name: apply manifest
                                      ansible.builtin.shell: |
                                          kubectl apply -f {{ manifest.path }}
                                          kubectl wait --for=condition=complete --timeout=30s job/{{ SELF.database_name }}-{{ HOST.dbms_name }}
                                          #kubectl delete -f {{ manifest.path }}
                                      args:
                                          executable: /usr/bin/bash

                    delete: exit 0

    # TODO: mysql.database.ansible.mysql.gcp
    # TODO: mysql.database.terraform.mysql.gcp

    ###################################################
    #
    # Docker Docker
    #
    ###################################################

    mysql.database.terraform.mysql.docker:
        derived_from: mysql.database

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        interfaces:
            Standard:
                operations:
                    configure:
                        implementation:
                            primary: Terraform
                    delete:
                        implementation:
                            primary: Terraform
            defaults:
                inputs:
                    main:
                        terraform:
                            - required_providers:
                                  - mysql:
                                        source: petoju/mysql
                                        version: 3.0.48
                                    ssh:
                                        source: AndrewChubatiuk/ssh
                                        version: 0.2.3
                        data:
                            ssh_tunnel:
                                mysql:
                                    - remote:
                                          port: 3306
                        provider:
                            mysql:
                                - endpoint: ${data.ssh_tunnel.mysql.local.address}
                                  password: '{{ HOST.dbms_password }}'
                                  username: root
                            ssh:
                                - auth:
                                      private_key:
                                          content: '${file(pathexpand("{{ SELF.os_ssh_key_file }}"))}'
                                  server:
                                      host: '{{ HOST.management_address }}'
                                      port: 22
                                  user: '{{ SELF.os_ssh_user }}'
                        resource:
                            mysql_database:
                                database:
                                    - name: '{{ SELF.database_name }}'
                            mysql_grant:
                                user:
                                    - database: '{{ SELF.database_name }}'
                                      host: '%'
                                      table: '*'
                                      privileges:
                                          - 'ALL'
                                      user: '{{ SELF.database_user }}'
                            mysql_user:
                                user:
                                    - host: '%'
                                      plaintext_password: '{{ SELF.database_password }}'
                                      user: '{{ SELF.database_user }}'

    ###################################################
    #
    # Docker Docker
    #
    ###################################################

    mysql.database.ansible.mysql.docker:
        derived_from: mysql.database

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: install pip
                                      apt:
                                          name: python3-pip
                                          state: present

                                    - name: install pymysql
                                      pip:
                                          name: pymysql
                                          state: present

                                    - name: create database
                                      community.mysql.mysql_db:
                                          name: '{{ SELF.database_name }}'
                                          login_host: 127.0.0.1
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: 3306
                                          login_user: root

                                    - name: create user
                                      community.mysql.mysql_user:
                                          name: '{{ SELF.database_user }}'
                                          password: '{{ SELF.database_password }}'
                                          host: '%'
                                          priv: '*.*:ALL'
                                          login_host: 127.0.0.1
                                          login_password: '{{ HOST.dbms_password }}'
                                          login_port: 3306
                                          login_user: root

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                    delete: exit 0
