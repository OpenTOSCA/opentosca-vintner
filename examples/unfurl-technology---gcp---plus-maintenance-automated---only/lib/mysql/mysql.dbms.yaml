tosca_definitions_version: tosca_simple_yaml_1_3

imports:
    - ../base.yaml

node_types:
    ###################################################
    #
    # Abstract
    #
    ###################################################

    mysql.dbms:
        derived_from: relational.dbms

        properties:
            dbms_name:
                type: string

            dbms_image:
                type: string
                default: mysql:5.6

            dbms_password:
                type: string

        attributes:
            application_address:
                type: string

            application_port:
                type: integer

        capabilities:
            host:
                type: tosca.capabilities.Compute

        requirements:
            - host:
                  capability: tosca.capabilities.Compute
                  relationship: tosca.relationships.HostedOn

    # TODO: mysql.dbms.ansible.gcp
    # TODO: mysql.dbms.terraform.gcp

    ###################################################
    #
    # Ansible Kubernetes
    #
    ###################################################

    # TODO: migrate this

    mysql.dbms.ansible.kubernetes:
        derived_from: mysql.dbms

        attributes:
            application_address:
                type: string
                default: {eval: '.::dbms_name'}

            application_port:
                type: integer
                default: 3306

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: Create file
                                      copy:
                                          dest: '{{ SELF.dbms_name }}.yaml'
                                          content: |
                                              ---
                                              apiVersion: apps/v1
                                              kind: Deployment
                                              metadata:
                                                  name: {{ SELF.dbms_name }}
                                              spec:
                                                  selector:
                                                      matchLabels:
                                                          app: {{ SELF.dbms_name }}
                                                  strategy:
                                                      type: Recreate
                                                  template:
                                                      metadata:
                                                          labels:
                                                              app: {{ SELF.dbms_name }}
                                                      spec:
                                                          containers:
                                                              - image: {{ SELF.dbms_image }}
                                                                name: {{ SELF.dbms_name }}
                                                                env:
                                                                    - name: MYSQL_ROOT_PASSWORD
                                                                      value: {{ SELF.dbms_password }}
                                                                ports:
                                                                    - containerPort: 3306
                                                                      name: mysql

                                              ---
                                              apiVersion: v1
                                              kind: Service
                                              metadata:
                                                  name: {{ SELF.dbms_name }}
                                              spec:
                                                  ports:
                                                      - port: 3306
                                                  selector:
                                                      app: {{ SELF.dbms_name }}
                                                  type: NodePort

                                    - name: Install MySQL DBMS
                                      shell: |
                                          kubectl apply -f {{ SELF.dbms_name }}.yaml
                                          kubectl rollout status deployment/{{ SELF.dbms_name }} --timeout 60s
                                          sleep 2m
                                      args:
                                          executable: /usr/bin/bash

                                    - name: give DBMS some time
                                      ansible.builtin.pause:
                                          seconds: 10

                            playbookArgs:
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}

    # TODO: mysql.dbms.terraform.kubernetes
    # TODO: mysql.dbms.kubernetes.kubernetes

    # TODO: mysql.dbms.ansible.docker
    # TODO: mysql.dbms.terraform.docker

    ###################################################
    #
    # Docker Docker
    #
    ###################################################

    mysql.dbms.docker.docker:
        derived_from: mysql.dbms

        properties:
            os_ssh_user:
                type: string
                default: {get_input: os_ssh_user}

            os_ssh_key_file:
                type: string
                default: {get_input: os_ssh_key_file}

        attributes:
            application_address:
                type: string
                default: {eval: '.::dbms_name'}

            application_port:
                type: integer
                default: 3306
            management_address:
                type: string
                default: {eval: '.::.requirements::[.name=host]::.target::management_address'}

        capabilities:
            endpoint:
                type: unfurl.capabilities.Endpoint.Ansible
                properties:
                    connection: ssh
                    host: {eval: '.parent::management_address'}

        interfaces:
            Standard:
                operations:
                    create:
                        implementation:
                            primary: Ansible
                            operation_host: HOST
                            environment:
                                ANSIBLE_HOST_KEY_CHECKING: 'False'
                        inputs:
                            playbook:
                                q:
                                    - name: wait for ssh
                                      wait_for_connection:

                                    - name: touch compose
                                      register: compose
                                      ansible.builtin.tempfile:
                                          suffix: '{{ SELF.dbms_name }}.compose.yaml'

                                    - name: create compose
                                      ansible.builtin.copy:
                                          dest: '{{ compose.path }}'
                                          content: '{{ manifest | to_yaml }}'
                                      vars:
                                          manifest:
                                              services:
                                                  application:
                                                      container_name: '{{ SELF.dbms_name }}'
                                                      image: '{{ SELF.dbms_image }}'
                                                      network_mode: host
                                                      environment:
                                                          MYSQL_ROOT_PASSWORD: '{{ SELF.dbms_password }}'

                                    - name: apply compose
                                      shell: |
                                          docker compose -f {{ compose.path }} up -d
                                      args:
                                          executable: /usr/bin/bash

                                    - name: give DBMS some time
                                      ansible.builtin.pause:
                                          seconds: 10

                            playbookArgs:
                                - --become
                                - --key-file={{ SELF.os_ssh_key_file }}
                                - --user={{ SELF.os_ssh_user }}
                    delete: exit 0
