---
title: Technology Rules
tags:
- Vintner
- Specification
---

--8<-- "enumerate.html"

# Deployment Technology Rules Specification 1.0 Release Candidate

!!! info
    Quick Tip: Elements in graphs can be clicked to open their type definition!

{{ autogenerated_notice('./task docs:generate:rules') }}

This document specifies the deployment technology rules.
The specification is under active development and is not backwards compatible with any previous versions.

## Deployment Technologies

Technology rules are defined in the context of the following deployment technologies.

<% for(const description of descriptions) { -%>
### <%- description.name %>

<%- description.description %>
Find out [more](<%- description.link %>){target=_blank}.

<% } -%>


## Derivation Rules

We use the following derivation rules to assess deployment qualities.

1. _(Critical)_ Custom module vs battle-proven module
1. _(Critical)_ Imperative vs declarative technology
1. _(Critical)_ Imperative flow of declarative tasks vs pure declarative tasks (e.g., Ansible Playbook Tasks vs Terraform Module)
1. Generic vs specialized/ native technology, e.g., Ansible vs Docker to start docker container (up to date modules, bug fixes ...)
1. Depth of technology toolchain
1. Number of workarounds
1. Number of tasks/ resources/ artifacts/ manifests to be defined
1. Length of the template
1. Usage of deprecated or not recommended features
1. More specialized node type, e.g., `software.application` vs `service.application`.


<% Object.entries(groups).forEach(([component, scenarios], index) => { -%>

## Component "<%= component %>"

The following scenarios deploy a node template of node type <%= link(component) -%> with various hosting stacks, artifacts, deployment technologies, and qualities.

<% scenarios.forEach((scenario, index) => { -%>

### Scenario #<%= index + 1 %>

In this scenario, the node template "component" of node type <%= link(scenario.component) -%> is deployed.
<% if (scenario.artifact) { -%>
This node template is implemented by its deployment artifact "artifact" of artifact type <%= link(scenario.artifact) -%>.
<% } -%>
<% if (scenario.hosting.length !== 0) { -%>
The node template <%- scenario.hosting.map((type, index) => type === "*" ? "is hosted on an arbitrary hosting stack of arbitrary length" : `is hosted on the node template "host ${index + 1}" of node type ${link(type)}`).join(", which ") -%>.
<% } else { -%>
The scenario does not require a specific hosting.
<% } -%>

<figure markdown><%- scenario.svg %></figure>

<% scenario.technologies.forEach(technology => { %>
!!! <% if (technology.quality > 0.7) { -%>success<% } else if (technology.quality > 0.25) { -%>info<% } else { -%>failure<% } -%> "<%= technology.name %> (Quality: <%= technology.quality %>)"
    <%= technology.reason %>
<% }) %>

<% }) -%>
<% }) -%>


## Appendix A "Rules"

This appendix contains the deployment technology rules.

<% data.forEach((rule, index) => { -%>
### Rule #<%= index + 1 %>
| Attribute | Value |
| --- | --- |
| Identifier | <%= constructRuleName(rule) %> |
| Component | <%= link(rule.component) %> |
<% if (rule.artifact) {-%>
| Artifact | <%= link(rule.artifact) %> |
<% } -%>
| Technology | <%= rule.technology %> |
<% if (rule.hosting.length !== 0) {-%>
| Hosting | <%= rule.hosting.map(link).join(" -> ") %> |
<% } -%>
| Quality | <%= rule.weight %> |
| Reason | <%= rule.reason %> |
| Details | <%= rule.details %> |
| Graph |<figure markdown><%- svgs["rule." + rule.technology + "." + (index + 1)]%></figure>|

<% }) %>


## Appendix B "YAML"

This appendix contains the deployment technology rules as YAML.
The rules are also available as [download](technology-rules.yaml){download=technology-rules.yaml}.

```yaml linenums="1"
--8<-- "variability4tosca/rules/technology-rules.yaml"
```

--8<-- "vacd.md"
