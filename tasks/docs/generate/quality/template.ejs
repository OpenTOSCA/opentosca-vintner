---
title: Deployment Quality
tags:
- Vintner
- Specification
---

--8<-- "enumerate.html"

# Deployment Quality Specification 1.0 Release Candidate

{{ autogenerated_notice('./task docs:generate:quality') }}

!!! info "Hidden Information"
    The document does not specify quality assignments at this stage.

!!! info "Quick Tip #1"
    Elements in graphs can be clicked to open their type definition!

!!! info "Quick Tip #2"
    You can query deployment qualities for your deployment scenario using `vintner utils scenarios`!

This document specifies the deployment qualities.
The specification is under active development and is not backwards compatible with any previous versions.

## Deployment Technologies

Deployment qualities are defined in the context of the following deployment technologies.

<% for(const description of descriptions) { -%>
### <%- description.name %>

<%- description.description %>
Find out [more](<%- description.link %>){target=_blank}.

<% } -%>

<% Object.entries(groups).forEach(([component, scenarios], index) => { -%>

## Component "<%= component %>"

The following scenarios deploy a node template of node type <%= link(component) -%> with various hosting stacks, artifacts, deployment technologies, and qualities.

<% scenarios.forEach((scenario, index) => { -%>

### Scenario #<%= index + 1 %>

In this scenario, the node template "component" of node type <%= link(scenario.component) -%> is deployed.
<% if (scenario.artifact) { -%>
This node template is implemented by its deployment artifact "artifact" of artifact type <%= link(scenario.artifact) -%>.
<% } -%>
<% if (scenario.hosting.length !== 0) { -%>
The node template <%- scenario.hosting.map((type, index) => type === "*" ? "is hosted on an arbitrary hosting stack of arbitrary length" : `is hosted on the node template "host ${index + 1}" of node type ${link(type)}`).join(", which ") -%>.
<% } else { -%>
The scenario does not require a specific hosting.
<% } -%>

<figure markdown><%- scenario.svg %></figure>

<% scenario.technologies.forEach(technology => { %>
!!! <% if (technology.quality > 0.875) { -%>success<% } else if (technology.quality > 0.625) { -%>info<% } else if (technology.quality > 0.375) { -%>question<% } else if (technology.quality > 0.125) { -%>warning<% }else { -%>failure<% } -%> "<%= technology.name %> has <%= toLabel(technology.quality) %> quality for this scenario"
<% }) %>

<% }) -%>
<% }) -%>


## Appendix A "Cards"

This appendix contains the deployment quality cards.

<% data.forEach((rule, index) => { -%>
### Rule #<%= index + 1 %>
| Attribute | Value |
| --- | --- |
| Number | <%= index + 1 %> |
| Identifier | <%= constructRuleName(rule) %> |
| Component | <%= link(rule.component) %> |
<% if (rule.artifact) {-%>
| Artifact | <%= link(rule.artifact) %> |
<% } -%>
| Technology | <%= rule.technology %> |
<% if (rule.hosting.length !== 0) {-%>
| Hosting | <%= rule.hosting.map(link).join(" -> ") %> |
<% } -%>
| Quality | <%= toLabel(rule.weight) -%> |
| Weight | <%= rule.weight %> |
| Graph |<figure markdown><%- svgs["rule." + rule.technology + "." + (index + 1)]%></figure>|

<% }) %>

## Appendix B "YAML"

This appendix contains the deployment qualities as YAML.
The rules are also available as [download](qualities.yaml){download=qualities.yaml}.

```yaml linenums="1"
--8<-- "variability4tosca/quality/qualities.yaml"
```

--8<-- "vacd.md"
