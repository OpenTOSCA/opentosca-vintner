import * as assert from '#assert'
import * as check from '#check'
import {NodeType} from '#spec/node-type'
import {METADATA} from '#technologies/plugins/rules/types'
import * as utils from '#utils'

export const GENERATION_MARK_TEXT = '# [OPENTOSCA_VINTNER_GENERATION_MARK]'

export const GENERATION_MARK_REGEX = new RegExp(
    String.raw`[\s]*#\s\[OPENTOSCA\_VINTNER\_GENERATION\_MARK\][\s\S]*`,
    'm'
)

export const GENERATION_NOTICE = `
################################################################
#
# WARNING: Do not edit! This following content is autogenerated!
#
################################################################
`.trim()

export type TypeData = {component: string; technology: string; artifact?: string; hosting?: string[]}

export function constructType(data: TypeData) {
    let output = data.component

    if (check.isDefined(data.artifact)) {
        output += '#' + data.artifact
    }

    output += '::' + data.technology

    if (check.isDefined(data.hosting) && !utils.isEmpty(data.hosting)) {
        output += '@' + data.hosting.join('->')
    }

    return output
}

// TODO: update this (and use regex)
export function destructType(type: string): TypeData {
    const [componentTypeArtifactPart, hostingPart] = type.split('@')
    const [componentTechnologyPart, artifact] = componentTypeArtifactPart.split('#')
    const [component, technology] = componentTechnologyPart.split('::')

    assert.isDefined(component)
    assert.isDefined(technology)

    return {
        component,
        technology,
        artifact,
        hosting: hostingPart ? hostingPart.split('->') : undefined,
    }
}

export function isImplementation(type: string) {
    return type.includes('::')
}

export function isGenerated(type: NodeType) {
    return check.isDefined(type.metadata) && type.metadata[METADATA.VINTNER_GENERATED] === 'true'
}

export function isAbstract(type: NodeType) {
    return check.isDefined(type.metadata) && type.metadata[METADATA.VINTNER_ABSTRACT] === 'true'
}

export function isGenerate(type: NodeType) {
    if (check.isUndefined(type.metadata)) return true
    return type.metadata[METADATA.VINTNER_GENERATE] !== 'false'
}
