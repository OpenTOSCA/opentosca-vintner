- technology: ansible
  component: docker.engine
  hosting:
      - local.machine
  weight: 1
  reason: The Docker engine is hosted on a local machine. Ansible is specialized for installing software components on local targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: docker.engine
  hosting:
      - local.machine
  weight: 0
- technology: ansible
  component: docker.engine
  hosting:
      - remote.machine
  weight: 1
  reason: The Docker engine is hosted on a remote machine. Ansible is specialized for installing software components on remote targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: docker.engine
  hosting:
      - remote.machine
  weight: 0
- technology: ansible
  component: gcp.service
  hosting: []
  weight: 0
- technology: terraform
  component: gcp.service
  hosting: []
  weight: 1
  reason: The GCP service is hosted on GCP. Terraform provides an official provider for GCP. In contrast, the corresponding Ansible module is not maintained and violates community standards.
- technology: ansible
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 0.5
- technology: kubernetes
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: The ingress is hosted on a Kubernetes cluster. Kubernetes provides its own natively integrated deployment technology.
- technology: terraform
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 0.5
- technology: ansible
  component: ingress
  hosting:
      - local.machine
  weight: 1
  reason: The ingress is hosted on a local machine. Ansible is specialized for installing software components on local targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: ingress
  hosting:
      - local.machine
  weight: 0
- technology: ansible
  component: ingress
  hosting:
      - remote.machine
  weight: 1
  reason: The ingress is hosted on a remote machine. Ansible is specialized for installing software components on remote targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: ingress
  hosting:
      - remote.machine
  weight: 0
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 1
  reason: The MySQL database is hosted on a MySQL DBMS on a Docker engine on a local machine. Ansible and Terraform offer declarative modules for managing a MySQL database.
- technology: compose
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 1
  reason: The MySQL database is hosted on a MySQL DBMS on a Docker engine on a local machine. Ansible and Terraform offer declarative modules for managing a MySQL database.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 1
  reason: The MySQL database is hosted on a MySQL DBMS on a Docker engine on a remote machine. Ansible and Terraform offer declarative modules for managing a MySQL database. However, in contrast to Terraform, Ansible provides native features to access the MySQL DBMS using SSH.
- technology: compose
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 0.75
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - gcp.cloudsql
  weight: 0
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - gcp.cloudsql
  weight: 1
  reason: The MySQL database is hosted on a MySQL DBMS on GCP CloudSQL. Terraform provides an official provider for GCP. In contrast, the corresponding Ansible module is not maintained and violates community standards.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 1
  reason: The MySQL database is hosted on a MySQL DBMS on a Kubernetes cluster. Ansible and Terraform offer declarative modules for managing a MySQL database. However, in contrast to Terraform, Ansible provides better features to access the MySQL DBMS within the Kubernetes cluster.
- technology: kubernetes
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 0
  reason: Kubernetes Job with imperative parts, while declarative other technologies provide declarative modules
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 0.25
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - local.machine
  weight: 1
  reason: The MySQL database is hosted on a MySQL DBMS on a local machine. Ansible and Terraform offer declarative modules for managing a MySQL database.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - local.machine
  weight: 1
  reason: The MySQL database is hosted on a MySQL DBMS on a local machine. Ansible and Terraform offer declarative modules for managing a MySQL database.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - remote.machine
  weight: 1
  reason: The MySQL database is hosted on a MySQL DBMS on a remote machine. Ansible is Terraform offer declarative modules for managing a MySQL database. However, in contrast to Terraform, Ansible provides native features to access the MySQL DBMS using SSH.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - remote.machine
  weight: 0.5
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
- technology: compose
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: The MySQL DBMS is hosted on a Docker engine on a local machine. Docker Compose is natively integrated into the Docker engine.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
- technology: compose
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: The MySQL DBMS is hosted on a Docker engine on a remote machine. Docker Compose is natively integrated into the Docker engine.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - gcp.cloudsql
  weight: 0
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - gcp.cloudsql
  weight: 1
  reason: The MySQL DBMS is hosted on GCP CloudSQL. Terraform provides an official provider for GCP. In contrast, the corresponding Ansible module is not maintained and violates community standards.
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
- technology: kubernetes
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: The MySQL DBMS is hosted on a Kubernetes cluster. Kubernetes provides its own natively integrated deployment technology.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - local.machine
  weight: 1
  reason: The MySQL DBMS is hosted on a local machine. Ansible is specialized for installing software components on local targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - local.machine
  weight: 0
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - remote.machine
  weight: 1
  reason: The MySQL DBMS is hosted on a remote machine. Ansible is specialized for installing software components on remote targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - remote.machine
  weight: 0
- technology: ansible
  component: object.storage
  hosting:
      - gcp.cloudstorage
  weight: 0
- technology: terraform
  component: object.storage
  hosting:
      - gcp.cloudstorage
  weight: 1
  reason: The object storage is hosted on GCP CloudStorage. Terraform provides an official provider for GCP. In contrast, the corresponding Ansible module is not maintained and violates community standards.
- technology: ansible
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - local.machine
  weight: 1
  reason: The object storage is hosted on a MinIO server on a Docker engine on a local machine. Ansible and Terraform offer declarative modules for this scenario.
- technology: compose
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - local.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - local.machine
  weight: 1
  reason: The object storage is hosted on a MinIO server on a Docker engine on a local machine. Ansible and Terraform offer declarative modules for this scenario.
- technology: ansible
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - remote.machine
  weight: 1
  reason: The object storage is hosted on a MinIO server on a Docker engine on a remote machine. Ansible and Terraform offer declarative modules for this scenario. However, in contrast to Terraform, Ansible provides native features to access the MySQL DBMS using SSH.
- technology: compose
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - remote.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - remote.machine
  weight: 0.75
- technology: ansible
  component: object.storage
  hosting:
      - minio.server
      - kubernetes.cluster
  weight: 1
  reason: The object storage is hosted on a MinIO server on a Kubernetes cluster. Ansible and Terraform offer declarative modules for this scenario. However, in contrast to Terraform, Ansible provides better features to access the MinIO server within the Kubernetes cluster.
- technology: kubernetes
  component: object.storage
  hosting:
      - minio.server
      - kubernetes.cluster
  weight: 0
  reason: Kubernetes Job with imperative parts, while declarative other technologies provide declarative modules
- technology: terraform
  component: object.storage
  hosting:
      - minio.server
      - kubernetes.cluster
  weight: 0.25
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
- technology: compose
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: The redis server is hosted on a Docker engine on a local machine. Docker Compose is natively integrated into the Docker engine.
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
- technology: compose
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: The redis server is hosted on a Docker engine on a remote machine. Docker Compose is natively integrated into the Docker engine.
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - gcp.memorystore
  weight: 0
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - gcp.memorystore
  weight: 1
  reason: The redis server is hosted on GCP Memorystore. Terraform provides an official provider for GCP. In contrast, the corresponding Ansible module is not maintained and violates community standards.
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
- technology: kubernetes
  component: redis.server
  artifact: cache.image
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: The redis server is hosted on a Kubernetes cluster. Kubernetes provides its own natively integrated deployment technology.
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
- technology: ansible
  component: service.component
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
- technology: compose
  component: service.component
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: The service component is hosted on a Docker engine on a local machine. Docker Compose is natively integrated into the Docker engine.
- technology: terraform
  component: service.component
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
- technology: ansible
  component: service.component
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
- technology: compose
  component: service.component
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: The service component is hosted on a Docker engine on a remote machine. Docker Compose is natively integrated into the Docker engine.
- technology: terraform
  component: service.component
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
- technology: ansible
  component: service.component
  artifact: docker.image
  hosting:
      - gcp.cloudrun
  weight: 0
- technology: terraform
  component: service.component
  artifact: docker.image
  hosting:
      - gcp.cloudrun
  weight: 1
  reason: The service component is hosted on GCP CloudRun. Terraform provides an official provider for GCP. In contrast, the corresponding Ansible module does not provide resources for GCP CloudRun.
- technology: ansible
  component: service.component
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
- technology: kubernetes
  component: service.component
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: The service component is hosted on a Kubernetes cluster. Kubernetes provides its own natively integrated deployment technology.
- technology: terraform
  component: service.component
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
- technology: ansible
  component: service.component
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: The service component is hosted on a local machine. Ansible is specialized for installing software components on local targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: service.component
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
- technology: ansible
  component: service.component
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: The service component is hosted on a remote machine. Ansible is specialized for installing software components on remote targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: service.component
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
- technology: ansible
  component: service.component
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: The service component is hosted on a local machine. Ansible is specialized for installing software components on local targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: service.component
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
- technology: ansible
  component: service.component
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: The service component is hosted on a remote machine. Ansible is specialized for installing software components on remote targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: service.component
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
- technology: ansible
  component: service.component
  artifact: zip.archive
  hosting:
      - gcp.appengine
  weight: 0
- technology: terraform
  component: service.component
  artifact: zip.archive
  hosting:
      - gcp.appengine
  weight: 1
  reason: The service component is hosted on GCP AppEngine. Terraform provides an official provider for GCP. In contrast, the corresponding Ansible module is not maintained and violates community standards.
- technology: ansible
  component: software.component
  artifact: apt.package
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: The software component is hosted on a local machine. Ansible is specialized for installing software components on local targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: software.component
  artifact: apt.package
  hosting:
      - '*'
      - local.machine
  weight: 0
- technology: ansible
  component: software.component
  artifact: apt.package
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: The software component is hosted on a remote machine. Ansible is specialized for installing software components on remote targets, while Terraform discourages from being used to manage such scenarios.
- technology: terraform
  component: software.component
  artifact: apt.package
  hosting:
      - '*'
      - remote.machine
  weight: 0
- technology: ansible
  component: software.component
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: The software component is hosted on a local machine. Ansible is specialized for installing software components on local targets, while Terraform discourages from being used to manage such scenarios.
  operations:
      - create
      - delete
- technology: terraform
  component: software.component
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  operations:
      - create
      - delete
- technology: ansible
  component: software.component
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: The software component is hosted on a remote machine. Ansible is specialized for installing software components on remote targets, while Terraform discourages from being used to manage such scenarios.
  operations:
      - create
      - delete
- technology: terraform
  component: software.component
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  operations:
      - create
      - delete
- technology: ansible
  component: software.component
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: The software component is hosted on a local machine. Ansible is specialized for installing software components on local targets, while Terraform discourages from being used to manage such scenarios.
  operations:
      - create
      - delete
- technology: terraform
  component: software.component
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  operations:
      - create
      - delete
- technology: ansible
  component: software.component
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: The software component is hosted on a remote machine. Ansible is specialized for installing software components on remote targets, while Terraform discourages from being used to manage such scenarios.
  operations:
      - create
      - delete
- technology: terraform
  component: software.component
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  operations:
      - create
      - delete
- technology: ansible
  component: virtual.machine
  artifact: machine.image
  hosting:
      - openstack.provider
  weight: 0.5
- technology: terraform
  component: virtual.machine
  artifact: machine.image
  hosting:
      - openstack.provider
  weight: 1
  reason: The virtual machine is hosted on OpenStack. Terraform is specialized in provisioning infrastructure, while Ansible is specialized for managing software on such infrastructure.
