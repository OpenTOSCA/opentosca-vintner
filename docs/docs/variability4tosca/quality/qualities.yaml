- technology: ansible
  component: docker.engine
  hosting:
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: docker.engine
  hosting:
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: docker.engine
  hosting:
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: docker.engine
  hosting:
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: gcp.service
  hosting: []
  weight: 0
  reason: Ansible provides a declarative module
- technology: terraform
  component: gcp.service
  hosting: []
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: kubernetes
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: Kubernetes is the underlying technology.
- technology: terraform
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: ansible
  component: ingress
  hosting:
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: ingress
  hosting:
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: ingress
  hosting:
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: ingress
  hosting:
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: compose
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: compose
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 0.75
  reason: Terraform provides a declarative module. However, Terraform requires an SSH workaround. Ansible is more specialized.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - gcp.cloudsql
  weight: 0
  reason: Primary use case due to the specialization of Ansible. However, need to install and handle GCP CloudSQL Proxy, while the corresponding Terraform module already provides this.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - gcp.cloudsql
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: kubernetes
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 0
  reason: Kubernetes Job with imperative parts, while declarative other technologies provide declarative modules.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 0.25
  reason: Ansible is more specialized.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - local.machine
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - remote.machine
  weight: 0.5
  reason: Terraform provides a declarative module. However, Terraform requires an SSH workaround. Ansible is more specialized.
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized
- technology: compose
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: Docker is the underlying technology.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized
- technology: compose
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: Docker is the underlying technology.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - gcp.cloudsql
  weight: 0
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - gcp.cloudsql
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: kubernetes
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: Kubernetes is the underlying technology.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: object.storage
  hosting:
      - gcp.cloudstorage
  weight: 0
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: object.storage
  hosting:
      - gcp.cloudstorage
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: compose
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - local.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - local.machine
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: compose
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - remote.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: object.storage
  hosting:
      - minio.server
      - docker.engine
      - remote.machine
  weight: 0.75
  reason: Terraform provides a declarative module. However, Terraform requires an SSH workaround. Ansible is more specialized.
- technology: ansible
  component: object.storage
  hosting:
      - minio.server
      - kubernetes.cluster
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: kubernetes
  component: object.storage
  hosting:
      - minio.server
      - kubernetes.cluster
  weight: 0
  reason: Kubernetes Job with imperative parts, while declarative other technologies provide declarative modules.
- technology: terraform
  component: object.storage
  hosting:
      - minio.server
      - kubernetes.cluster
  weight: 0.25
  reason: Ansible is more specialized.
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: compose
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: Docker is the underlying technology.
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: compose
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: Docker is the underlying technology.
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - gcp.memorystore
  weight: 0
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - gcp.memorystore
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: kubernetes
  component: redis.server
  artifact: cache.image
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: Kubernetes is the underlying technology.
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: ansible
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: compose
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: Docker is the underlying technology.
- technology: terraform
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: ansible
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: compose
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: Docker is the underlying technology.
- technology: terraform
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
- technology: ansible
  component: service.application
  artifact: docker.image
  hosting:
      - gcp.cloudrun
  weight: 0
  reason: Custom module with imperative parts, while Terraform provides a declarative module.
- technology: terraform
  component: service.application
  artifact: docker.image
  hosting:
      - gcp.cloudrun
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: service.application
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: kubernetes
  component: service.application
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: Kubernetes is the underlying technology.
- technology: terraform
  component: service.application
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: ansible
  component: service.application
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible. Special integration for systemd.
- technology: terraform
  component: service.application
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: service.application
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible. Special integration for systemd.
- technology: terraform
  component: service.application
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: service.application
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible. Special integration for systemd.
- technology: terraform
  component: service.application
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: service.application
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible. Special integration for systemd.
- technology: terraform
  component: service.application
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: service.application
  artifact: zip.archive
  hosting:
      - gcp.appengine
  weight: 0
  reason: Custom module with imperative parts, while Terraform provides a declarative module.
- technology: terraform
  component: service.application
  artifact: zip.archive
  hosting:
      - gcp.appengine
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: software.application
  artifact: apt.package
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: software.application
  artifact: apt.package
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: software.application
  artifact: apt.package
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: software.application
  artifact: apt.package
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: software.application
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: While this is a primary use case due to the specialization of Ansible, we must rely on scripts. More specialized types should be used, e.g., service.application.
- technology: terraform
  component: software.application
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: software.application
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: While this is a primary use case due to the specialization of Ansible, we must rely on scripts. More specialized types should be used, e.g., "service.application".
- technology: terraform
  component: software.application
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: software.application
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: While this is a primary use case due to the specialization of Ansible, we must rely on scripts. More specialized types should be used, e.g., service.application.
- technology: terraform
  component: software.application
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: software.application
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: While this is a primary use case due to the specialization of Ansible, we must rely on scripts. More specialized types should be used, e.g., service.application.
- technology: terraform
  component: software.application
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
- technology: ansible
  component: virtual.machine
  artifact: machine.image
  hosting:
      - openstack.provider
  weight: 0.5
  reason: Terraform is more specialized.
- technology: terraform
  component: virtual.machine
  artifact: machine.image
  hosting:
      - openstack.provider
  weight: 1
  reason: Terraform provides a declarative module.
