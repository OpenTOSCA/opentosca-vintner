- technology: ansible
  component: bucket
  hosting:
      - gcp.cloudstorage
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: bucket
  hosting:
      - gcp.cloudstorage
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: bucket
  artifact: cache.image
  hosting:
      - gcp.memorystore
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: ansible
  component: bucket
  hosting:
      - minio.server
      - '*'
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: bucket
  hosting:
      - minio.server
      - '*'
      - local.machine
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: bucket
  hosting:
      - minio.server
      - '*'
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: bucket
  hosting:
      - minio.server
      - '*'
      - remote.machine
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: bucket
  hosting:
      - minio.server
      - kubernetes.cluster
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: bucket
  hosting:
      - minio.server
      - kubernetes.cluster
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: docker.engine
  hosting:
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"ansible.builtin.shell", "ansible.builtin.group", and "ansible.builtin.user" tasks'
- technology: terraform
  component: docker.engine
  hosting:
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"local-exec" provider'
- technology: ansible
  component: docker.engine
  hosting:
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"ansible.builtin.shell", "ansible.builtin.group", and "ansible.builtin.user" tasks'
- technology: terraform
  component: docker.engine
  hosting:
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"remote-exec" provider'
- technology: ansible
  component: gcp.service
  hosting: []
  weight: 1
  reason: Ansible provides a declarative module
  details: '"google.cloud.gcp_serviceusage_service" task'
- technology: terraform
  component: gcp.service
  hosting: []
  weight: 1
  reason: Terraform provides a declarative module.
  details: '"google_project_service" resource'
- technology: ansible
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
  details: '"kubernetes.core.k8s" task'
- technology: kubernetes
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: Kubernetes is the underlying technology.
  details: Kubernetes manifest generated and applied
- technology: terraform
  component: ingress
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
  details: '"kubernetes_service_v1" resource'
- technology: ansible
  component: ingress
  hosting:
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"ansible.builtin.apt_key", "ansible.builtin.apt_repository", "ansible.builtin.apt", "ansible.builtin.copy", and "ansible.builtin.systemd" tasks'
- technology: terraform
  component: ingress
  hosting:
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"local_file" resource to create the installation script and "terraform_data" to execute the script using the "local-exec" provisioner'
- technology: ansible
  component: ingress
  hosting:
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"ansible.builtin.apt_key", "ansible.builtin.apt_repository", "ansible.builtin.apt", "ansible.builtin.copy", and "ansible.builtin.systemd" tasks'
- technology: terraform
  component: ingress
  hosting:
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"terraform_data" resource with an "ssh" connection to the virtual machine to copy the install script using the "file" provisioner on the virtual machine and to execute the script using the "remote-exec" provisioner'
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: compose
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - local.machine
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: compose
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 0
  reason: One-time use docker container ("fake Kubernetes job") with imperative parts, while other technologies provide declarative modules.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Terraform provides a declarative module. However, Terraform requires an SSH workaround. Ansible is more specialized.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - gcp.cloudsql
  weight: 0.5
  reason: Primary use case due to the specialization of Ansible. However, need to install and handle GCP CloudSQL Proxy, while the corresponding Terraform module already provides this.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - gcp.cloudsql
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: kubernetes
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 0
  reason: Kubernetes Job with imperative parts, while declarative other technologies provide declarative modules.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - kubernetes.cluster
  weight: 0
  reason: Ansible is more specialized.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - local.machine
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: mysql.database
  hosting:
      - mysql.dbms
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
- technology: terraform
  component: mysql.database
  hosting:
      - mysql.dbms
      - remote.machine
  weight: 0.5
  reason: Terraform provides a declarative module. However, Terraform requires an SSH workaround. Ansible is more specialized.
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized
  details: '"community.docker.docker_container" task'
- technology: compose
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: Docker is the underlying technology.
  details: docker-compose manifest generated and applied
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"docker_container" and "docker_image" resources'
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized
  details: '"community.docker.docker_container" task'
- technology: compose
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: Docker is the underlying technology.
  details: docker-compose manifest generated and applied
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"docker_container" and "docker_image" resources'
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - gcp.cloudsql
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"google.cloud.gcp_sql_instance" and "google.cloud.gcp_sql_user" tasks'
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - gcp.cloudsql
  weight: 1
  reason: Terraform provides a declarative module.
  details: '"google_sql_database_instance" and "google_sql_user" resources'
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
  details: '"kubernetes.core.k8s" tasks'
- technology: kubernetes
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: Kubernetes is the underlying technology.
  details: Kubernetes manifest generated and applied
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
  details: '"kubernetes_deployment_v1" and "kubernetes_service_v1" resources'
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"ansible.builtin.apt", "ansible.builtin.systemd", "ansible.builtin.copy", "ansible.builtin.lineinfile", and "community.mysql.mysql_user" tasks'
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"local_file" resource to create the installation script and "terraform_data" to execute the script using the "local-exec" provisioner'
- technology: ansible
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"ansible.builtin.apt", "ansible.builtin.systemd", "ansible.builtin.copy", "ansible.builtin.lineinfile", and "community.mysql.mysql_user" tasks'
- technology: terraform
  component: mysql.dbms
  artifact: dbms.image
  hosting:
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"terraform_data" resource with an "ssh" connection to the virtual machine to copy the install script using the "file" provisioner on the virtual machine and to execute the script using the "remote-exec" provisioner'
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"community.docker.docker_container" task'
- technology: compose
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: Docker is the underlying technology.
  details: docker compose manifest generated and applied
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"docker_container" and "docker_image" resources'
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"community.docker.docker_container" task'
- technology: compose
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: Docker is the underlying technology.
  details: docker compose manifest generated and applied
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"docker_container" and "docker_image" resources'
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - gcp.memorystore
  weight: 1
  reason: Terraform provides a declarative module.
- technology: ansible
  component: redis.server
  artifact: cache.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: terraform
  component: redis.server
  artifact: cache.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
- technology: ansible
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"community.docker.docker_container" task'
- technology: compose
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 1
  reason: Docker is the underlying technology.
  details: docker compose manifest generated and applied
- technology: terraform
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - local.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"docker_container" and "docker_image" resources'
- technology: ansible
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"community.docker.docker_container" task'
- technology: compose
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 1
  reason: Docker is the underlying technology.
  details: docker compose manifest generated and applied
- technology: terraform
  component: service.application
  artifact: docker.image
  hosting:
      - docker.engine
      - remote.machine
  weight: 0.5
  reason: Docker Compose is more specialized.
  details: '"docker_container" and "docker_image" resources'
- technology: ansible
  component: service.application
  artifact: docker.image
  hosting:
      - gcp.cloudrun
  weight: 0
  reason: Custom module with imperative parts, while Terraform provides a declarative module.
  details: '"ansible.builtin.shell", "ansible.builtin.tempfile", and "ansible.builtin.copy" tasks '
- technology: terraform
  component: service.application
  artifact: docker.image
  hosting:
      - gcp.cloudrun
  weight: 1
  reason: Terraform provides a declarative module.
  details: '"google_cloud_run_v2_service" and "google_cloud_run_service_iam_binding" resources'
- technology: ansible
  component: service.application
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
  details: '"kubernetes.core.k8s" tasks'
- technology: kubernetes
  component: service.application
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 1
  reason: Kubernetes is the underlying technology.
  details: Kubernetes manifest generated and applied
- technology: terraform
  component: service.application
  artifact: docker.image
  hosting:
      - kubernetes.cluster
  weight: 0.5
  reason: Kubernetes is more specialized.
  details: '"kubernetes_deployment_v1" and "kubernetes_service_v1" resources'
- technology: ansible
  component: service.application
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible. Special integration for systemd.
  details: '"ansible.builtin.file", "ansible.builtin.unarchive", "ansible.builtin.copy", "ansible.builtin.fail", "ansible.builtin.shell", and "ansible.builtin.systemd" tasks with "when" statements'
- technology: terraform
  component: service.application
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"local_file" module to create scripts and artifacts and "local-exec" provisioner to execute scripts.'
- technology: ansible
  component: service.application
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible. Special integration for systemd.
  details: '"ansible.builtin.file", "ansible.builtin.unarchive", "ansible.builtin.copy", "ansible.builtin.fail", "ansible.builtin.shell", and "ansible.builtin.systemd" tasks with "when" statements'
- technology: terraform
  component: service.application
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"file" provisioner to upload artifacts and scripts and "remote-exec" to execute scripts'
- technology: ansible
  component: service.application
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible. Special integration for systemd.
  details: '"ansible.builtin.file", "ansible.builtin.unarchive", "ansible.builtin.copy", "ansible.builtin.fail", "ansible.builtin.shell", and "ansible.builtin.systemd" tasks with "when" statements'
- technology: terraform
  component: service.application
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"local_file" module to create scripts and artifacts and "local-exec" provisioner to execute scripts.'
- technology: ansible
  component: service.application
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible. Special integration for systemd.
  details: '"ansible.builtin.file", "ansible.builtin.unarchive", "ansible.builtin.copy", "ansible.builtin.fail", "ansible.builtin.shell", and "ansible.builtin.systemd" tasks with "when" statements'
- technology: terraform
  component: service.application
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"file" provisioner to upload artifacts and scripts and "remote-exec" to execute scripts'
- technology: ansible
  component: service.application
  artifact: zip.archive
  hosting:
      - gcp.appengine
  weight: 0
  reason: Custom module with imperative parts, while Terraform provides a declarative module.
  details: '"ansible.builtin.shell", "ansible.builtin.tempfile", "ansible.builtin.unarchive", and "ansible.builtin.copy" tasks'
- technology: terraform
  component: service.application
  artifact: zip.archive
  hosting:
      - gcp.appengine
  weight: 1
  reason: Terraform provides a declarative module.
  details: '"google_app_engine_standard_app_version", "google_project_iam_member", "google_service_account", "google_storage_bucket", and "google_storage_bucket_object" resources'
- technology: terraform
  component: software.application
  artifact: apt.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"file" provisioner to upload scripts and "remote-exec" to execute scripts'
- technology: ansible
  component: software.application
  artifact: apt.package
  hosting:
      - '*'
      - local.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"ansible.builtin.shell", "ansible.builtin.apt_key", "ansible.builtin.apt_repository", "ansible.builtin.apt", and "ansible.builtin.copy", tasks with "when" statements'
- technology: terraform
  component: software.application
  artifact: apt.package
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"local_file" module to create scripts and artifacts and "local-exec" provisioner to execute scripts'
- technology: ansible
  component: software.application
  artifact: apt.package
  hosting:
      - '*'
      - remote.machine
  weight: 1
  reason: Primary use case due to the specialization of Ansible.
  details: '"ansible.builtin.shell", "ansible.builtin.apt_key", "ansible.builtin.apt_repository", "ansible.builtin.apt", and "ansible.builtin.copy", tasks with "when" statements'
- technology: ansible
  component: software.application
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 0.5
  reason: While this is a primary use case due to the specialization of Ansible, we must rely on scripts. More specialized types should be used, e.g., service.application.
  details: '"ansible.builtin.apt", "ansible.builtin.file", "ansible.builtin.unarchive", "ansible.builtin.copy", "ansible.builtin.fail", and "ansible.builtin.shell" tasks with "when" statements'
- technology: terraform
  component: software.application
  artifact: tar.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"local_file" module to create scripts and artifacts and "local-exec" provisioner to execute scripts'
- technology: ansible
  component: software.application
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0.5
  reason: While this is a primary use case due to the specialization of Ansible, we must rely on scripts. More specialized types should be used, e.g., "service.application".
  details: '"ansible.builtin.file", "ansible.builtin.unarchive", "ansible.builtin.copy", "ansible.builtin.fail", and "ansible.builtin.shell" tasks with "when" statements'
- technology: terraform
  component: software.application
  artifact: tar.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"file" provisioner to upload artifacts and scripts and "remote-exec" to execute scripts'
- technology: ansible
  component: software.application
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 0.5
  reason: While this is a primary use case due to the specialization of Ansible, we must rely on scripts. More specialized types should be used, e.g., service.application.
  details: '"ansible.builtin.apt", "ansible.builtin.file", "ansible.builtin.unarchive", "ansible.builtin.copy", "ansible.builtin.fail", and "ansible.builtin.shell" tasks with "when" statements'
- technology: terraform
  component: software.application
  artifact: zip.archive
  hosting:
      - '*'
      - local.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"local_file" module to create scripts and artifacts and "local-exec" provisioner to execute scripts.'
- technology: ansible
  component: software.application
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0.5
  reason: While this is a primary use case due to the specialization of Ansible, we must rely on scripts. More specialized types should be used, e.g., service.application.
  details: '"ansible.builtin.apt", "ansible.builtin.file", "ansible.builtin.unarchive", "ansible.builtin.copy", "ansible.builtin.fail", and "ansible.builtin.shell" tasks with "when" statements'
- technology: terraform
  component: software.application
  artifact: zip.archive
  hosting:
      - '*'
      - remote.machine
  weight: 0
  reason: Ansible is more specialized. Also using provisioners is a "last resort".
  details: '"file" provisioner to upload artifacts and scripts and "remote-exec" to execute scripts'
- technology: ansible
  component: virtual.machine
  artifact: machine.image
  hosting:
      - openstack.provider
  weight: 0.5
  reason: Terraform is more specialized.
  details: '"openstack.cloud.security_group", "openstack.cloud.security_group_rule" and "openstack.cloud.server" tasks'
- technology: terraform
  component: virtual.machine
  artifact: machine.image
  hosting:
      - openstack.provider
  weight: 1
  reason: Terraform provides a declarative module.
  details: '"openstack_compute_instance_v2", "openstack_networking_secgroup_rule_v2" and "openstack_networking_secgroup_v2" resources'
